{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n/**\n * Portal host is the component which actually renders all Portals.\n */\n\nexport default class PortalManager extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"state\", {\n      portals: []\n    });\n\n    _defineProperty(this, \"mount\", (key, children) => {\n      this.setState(state => ({\n        portals: [...state.portals, {\n          key,\n          children\n        }]\n      }));\n    });\n\n    _defineProperty(this, \"update\", (key, children) => this.setState(state => ({\n      portals: state.portals.map(item => {\n        if (item.key === key) {\n          return { ...item,\n            children\n          };\n        }\n\n        return item;\n      })\n    })));\n\n    _defineProperty(this, \"unmount\", key => this.setState(state => ({\n      portals: state.portals.filter(item => item.key !== key)\n    })));\n  }\n\n  render() {\n    return this.state.portals.map(_ref => {\n      let {\n        key,\n        children\n      } = _ref;\n      return /*#__PURE__*/React.createElement(View, {\n        key: key,\n        collapsable: false\n        /* Need collapsable=false here to clip the elevations, otherwise they appear above sibling components */\n        ,\n        pointerEvents: \"box-none\",\n        style: StyleSheet.absoluteFill\n      }, children);\n    });\n  }\n\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,cAAjC;AASA;AACA;AACA;;AACA,eAAe,MAAMC,aAAN,SAA4BH,KAAK,CAACI,aAAlC,CAA2D;EAAAC;IAAA;;IAAAC,+BACzD;MACbC,OAAO,EAAE;IADI,CADyD;;IAAAD,+BAKhE,CAACE,GAAD,EAAcC,QAAd,KAA4C;MAClD,KAAKC,QAAL,CAAeC,KAAD,KAAY;QACxBJ,OAAO,EAAE,CAAC,GAAGI,KAAK,CAACJ,OAAV,EAAmB;UAAEC,GAAF;UAAOC;QAAP,CAAnB;MADe,CAAZ,CAAd;IANsE;;IAAAH,gCAW/D,CAACE,GAAD,EAAcC,QAAd,KACP,KAAKC,QAAL,CAAeC,KAAD,KAAY;MACxBJ,OAAO,EAAEI,KAAK,CAACJ,OAANI,CAAcC,GAAdD,CAAmBE,IAAD,IAAU;QACnC,IAAIA,IAAI,CAACL,GAALK,KAAaL,GAAjB,EAAsB;UACpB,OAAO,EAAE,GAAGK,IAAL;YAAWJ;UAAX,CAAP;QACD;;QACD,OAAOI,IAAP;MAJO;IADe,CAAZ,CAAd,CAZsE;;IAAAP,iCAqB7DE,GAAD,IACR,KAAKE,QAAL,CAAeC,KAAD,KAAY;MACxBJ,OAAO,EAAEI,KAAK,CAACJ,OAANI,CAAcG,MAAdH,CAAsBE,IAAD,IAAUA,IAAI,CAACL,GAALK,KAAaL,GAA5CG;IADe,CAAZ,CAAd,CAtBsE;EAAA;;EA0BxEI,MAAM,GAAG;IACP,OAAO,KAAKJ,KAAL,CAAWJ,OAAX,CAAmBK,GAAnB,CAAuBI;MAAA,IAAC;QAAER,GAAF;QAAOC;MAAP,IAADO;MAAA,oBAC5BhB,oBAACC,IAAD;QACEO,GAAG,EAAEA,GADP;QAEES,WAAW,EACT;QAAM;QAHV;QAKEC,aAAa,EAAC,UALhB;QAMEC,KAAK,EAAEjB,UAAU,CAACkB;MANpB,GAQGX,QARH,CAD4B;IAAvB,EAAP;EAYD;;AAvCuE","names":["React","View","StyleSheet","PortalManager","PureComponent","constructor","_defineProperty","portals","key","children","setState","state","map","item","filter","render","_ref","collapsable","pointerEvents","style","absoluteFill"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/Portal/PortalManager.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\ntype State = {\n  portals: Array<{\n    key: number;\n    children: React.ReactNode;\n  }>;\n};\n\n/**\n * Portal host is the component which actually renders all Portals.\n */\nexport default class PortalManager extends React.PureComponent<{}, State> {\n  state: State = {\n    portals: [],\n  };\n\n  mount = (key: number, children: React.ReactNode) => {\n    this.setState((state) => ({\n      portals: [...state.portals, { key, children }],\n    }));\n  };\n\n  update = (key: number, children: React.ReactNode) =>\n    this.setState((state) => ({\n      portals: state.portals.map((item) => {\n        if (item.key === key) {\n          return { ...item, children };\n        }\n        return item;\n      }),\n    }));\n\n  unmount = (key: number) =>\n    this.setState((state) => ({\n      portals: state.portals.filter((item) => item.key !== key),\n    }));\n\n  render() {\n    return this.state.portals.map(({ key, children }) => (\n      <View\n        key={key}\n        collapsable={\n          false /* Need collapsable=false here to clip the elevations, otherwise they appear above sibling components */\n        }\n        pointerEvents=\"box-none\"\n        style={StyleSheet.absoluteFill}\n      >\n        {children}\n      </View>\n    ));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}