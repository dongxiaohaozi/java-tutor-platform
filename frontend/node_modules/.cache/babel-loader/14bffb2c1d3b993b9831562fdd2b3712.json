{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Image, I18nManager, Platform } from 'react-native';\nimport { Consumer as SettingsConsumer } from '../core/settings';\nimport { accessibilityProps } from './MaterialCommunityIcon';\nimport { withTheme } from '../core/theming';\n\nconst isImageSource = source => // source is an object with uri\ntypeof source === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string' || // source is a module, e.g. - require('image')\ntypeof source === 'number' || // image url on web\nPlatform.OS === 'web' && typeof source === 'string' && (source.startsWith('data:image') || /\\.(bmp|jpg|jpeg|png|gif|svg)$/.test(source));\n\nconst getIconId = source => {\n  if (typeof source === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string') {\n    return source.uri;\n  }\n\n  return source;\n};\n\nexport const isValidIcon = source => typeof source === 'string' || typeof source === 'function' || isImageSource(source);\nexport const isEqualIcon = (a, b) => a === b || getIconId(a) === getIconId(b);\n\nconst Icon = _ref => {\n  let {\n    source,\n    color,\n    size,\n    theme,\n    ...rest\n  } = _ref;\n  const direction = typeof source === 'object' && source.direction && source.source ? source.direction === 'auto' ? I18nManager.isRTL ? 'rtl' : 'ltr' : source.direction : null;\n  const s = typeof source === 'object' && source.direction && source.source ? source.source : source;\n  const iconColor = color || theme.colors.text;\n\n  if (isImageSource(s)) {\n    return /*#__PURE__*/React.createElement(Image, _extends({}, rest, {\n      source: s,\n      style: [{\n        transform: [{\n          scaleX: direction === 'rtl' ? -1 : 1\n        }]\n      }, // eslint-disable-next-line react-native/no-inline-styles\n      {\n        width: size,\n        height: size,\n        tintColor: color,\n        resizeMode: 'contain'\n      }]\n    }, accessibilityProps));\n  } else if (typeof s === 'string') {\n    return /*#__PURE__*/React.createElement(SettingsConsumer, null, _ref2 => {\n      let {\n        icon\n      } = _ref2;\n      return icon({\n        name: s,\n        color: iconColor,\n        size,\n        direction\n      });\n    });\n  } else if (typeof s === 'function') {\n    return s({\n      color: iconColor,\n      size,\n      direction\n    });\n  }\n\n  return null;\n};\n\nexport default withTheme(Icon);","map":{"version":3,"mappings":"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","names":["React","Image","I18nManager","Platform","Consumer","SettingsConsumer","accessibilityProps","withTheme","isImageSource","source","Object","prototype","hasOwnProperty","call","uri","OS","startsWith","test","getIconId","isValidIcon","isEqualIcon","a","b","Icon","_ref","color","size","theme","rest","direction","isRTL","s","iconColor","colors","text","style","transform","scaleX","width","height","tintColor","resizeMode","_ref2","icon","name"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/Icon.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Image,\n  I18nManager,\n  Platform,\n  ImageSourcePropType,\n} from 'react-native';\nimport { Consumer as SettingsConsumer } from '../core/settings';\nimport { accessibilityProps } from './MaterialCommunityIcon';\nimport { withTheme } from '../core/theming';\n\ntype IconSourceBase = string | ImageSourcePropType;\n\nexport type IconSource =\n  | IconSourceBase\n  | Readonly<{ source: IconSourceBase; direction: 'rtl' | 'ltr' | 'auto' }>\n  | ((props: IconProps & { color: string }) => React.ReactNode);\n\ntype IconProps = {\n  size: number;\n  allowFontScaling?: boolean;\n};\n\ntype Props = IconProps & {\n  color?: string;\n  source: any;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst isImageSource = (source: any) =>\n  // source is an object with uri\n  (typeof source === 'object' &&\n    source !== null &&\n    Object.prototype.hasOwnProperty.call(source, 'uri') &&\n    typeof source.uri === 'string') ||\n  // source is a module, e.g. - require('image')\n  typeof source === 'number' ||\n  // image url on web\n  (Platform.OS === 'web' &&\n    typeof source === 'string' &&\n    (source.startsWith('data:image') ||\n      /\\.(bmp|jpg|jpeg|png|gif|svg)$/.test(source)));\n\nconst getIconId = (source: any) => {\n  if (\n    typeof source === 'object' &&\n    source !== null &&\n    Object.prototype.hasOwnProperty.call(source, 'uri') &&\n    typeof source.uri === 'string'\n  ) {\n    return source.uri;\n  }\n\n  return source;\n};\n\nexport const isValidIcon = (source: any) =>\n  typeof source === 'string' ||\n  typeof source === 'function' ||\n  isImageSource(source);\n\nexport const isEqualIcon = (a: any, b: any) =>\n  a === b || getIconId(a) === getIconId(b);\n\nconst Icon = ({ source, color, size, theme, ...rest }: Props) => {\n  const direction =\n    typeof source === 'object' && source.direction && source.source\n      ? source.direction === 'auto'\n        ? I18nManager.isRTL\n          ? 'rtl'\n          : 'ltr'\n        : source.direction\n      : null;\n  const s =\n    typeof source === 'object' && source.direction && source.source\n      ? source.source\n      : source;\n  const iconColor = color || theme.colors.text;\n\n  if (isImageSource(s)) {\n    return (\n      <Image\n        {...rest}\n        source={s}\n        style={[\n          {\n            transform: [{ scaleX: direction === 'rtl' ? -1 : 1 }],\n          },\n          // eslint-disable-next-line react-native/no-inline-styles\n          {\n            width: size,\n            height: size,\n            tintColor: color,\n            resizeMode: 'contain',\n          },\n        ]}\n        {...accessibilityProps}\n      />\n    );\n  } else if (typeof s === 'string') {\n    return (\n      <SettingsConsumer>\n        {({ icon }) => {\n          return icon({\n            name: s,\n            color: iconColor,\n            size,\n            direction,\n          });\n        }}\n      </SettingsConsumer>\n    );\n  } else if (typeof s === 'function') {\n    return s({ color: iconColor, size, direction });\n  }\n\n  return null;\n};\n\nexport default withTheme(Icon);\n"]},"metadata":{},"sourceType":"module"}