{"ast":null,"code":"var _jsxFileName = \"/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/src/Pages/methods/Methods.jsx\";\nimport React from 'react';\nimport './methods.scss';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { far } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Methods = _ref => {\n  let {\n    submit\n  } = _ref;\n  const obj1 = ` public class MyFirstClass {\n    public void myFirstMethod() {\n      // code\n    }\n  }`;\n  const obj2 = ` public class MyFirstClass {\n    public void myFirstMethod(Fruit fruit) {\n        // code to be executed\n    }\n}`;\n  const obj3 = `Car car = new Car()`;\n  const obj4 = ` String car = \"VM\";\n   public boolean mySecondMethod(String car) {\n       \n       if (car == \"VM\") {\n           return true;\n       } else {\n           return false;\n       }\n   }\nmySecondMethod(car)`;\n  const obj5 = ` String car = \"VM\";\n   public boolean mySecondMethod(String car) {\n       \n       if (car.equals(\"VM\") {\n           return true;\n       } else {\n           return false;\n       }\n   }\nmySecondMethod(car)`;\n\n  const Code = _ref2 => {\n    let {\n      children\n    } = _ref2;\n    return /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n      language: \"java\",\n      style: far,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"widgets\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Methods\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"In Java, the appearance of method is somehow different from the method's in other languages. Because Java emphasizes the type of data, so no matter where and how we declare a variable, we must add the type in front of the variable name after the modifier. For a method, we need to write the type of return value, if the method doesn\\u2019t return a value, we use keyword \\\"void\\\". For the parameter, we also need to indicate the type. So the fundamental look of method is like this:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"In Java, there are two kinds of methods, one is the main method, it's used for executing the program, and the other is the method declared in the class we create.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"example\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Example\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"code\",\n          children: /*#__PURE__*/_jsxDEV(Code, {\n            children: obj1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Notice, any type of data can be the parameter, it is totally okay we use the object of class we create to be the parameter:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"example\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Example\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"code\",\n          children: /*#__PURE__*/_jsxDEV(Code, {\n            children: obj2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"We know the data in Java have two general types: primitive and reference. For reference type data, such as string, \\u201C=\\u201D actually means convey the referencing address in memory  rather than copy the value. Below code firstly creates a new object and allocates the memory space and assigns a pointer to it, then copies the pointer to the car variable.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"example\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Example\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"code\",\n          children: /*#__PURE__*/_jsxDEV(Code, {\n            children: obj3\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"So the following code should return false in principle, because \\u201C==\\u201D is to check if the referencing object is the identical:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"example\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Example\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"code\",\n          children: /*#__PURE__*/_jsxDEV(Code, {\n            children: obj4\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"but in reality because the compiler is smart enough to recognize the same value so only construct one referenced string.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"To avoid this issue, when we compare two strings, we better use String.equals() method:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"example\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Example\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"code\",\n          children: /*#__PURE__*/_jsxDEV(Code, {\n            children: obj5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Notice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 28\n        }, this), \": the initial value of any reference type data is null, meaning It haven't has a referencing address yet, if we want to pass this object to another object, there would be a run-time error occurring.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n\n_c = Methods;\nexport default Methods;\n\nvar _c;\n\n$RefreshReg$(_c, \"Methods\");","map":{"version":3,"names":["React","SyntaxHighlighter","far","Methods","submit","obj1","obj2","obj3","obj4","obj5","Code","children"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/src/Pages/methods/Methods.jsx"],"sourcesContent":["import React from 'react'\r\nimport './methods.scss'\r\nimport  SyntaxHighlighter  from 'react-syntax-highlighter';\r\nimport {far} from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\nconst Methods = ({submit}) => {\r\n   \r\n    const obj1 = \r\n  ` public class MyFirstClass {\r\n    public void myFirstMethod() {\r\n      // code\r\n    }\r\n  }`\r\n    const obj2 =\r\n  ` public class MyFirstClass {\r\n    public void myFirstMethod(Fruit fruit) {\r\n        // code to be executed\r\n    }\r\n}`\r\n   const obj3 =\r\n   `Car car = new Car()`\r\n   const obj4 =\r\n  ` String car = \"VM\";\r\n   public boolean mySecondMethod(String car) {\r\n       \r\n       if (car == \"VM\") {\r\n           return true;\r\n       } else {\r\n           return false;\r\n       }\r\n   }\r\nmySecondMethod(car)`\r\n   const obj5=\r\n  ` String car = \"VM\";\r\n   public boolean mySecondMethod(String car) {\r\n       \r\n       if (car.equals(\"VM\") {\r\n           return true;\r\n       } else {\r\n           return false;\r\n       }\r\n   }\r\nmySecondMethod(car)`\r\n\r\nconst Code = ({ children }) => (\r\n    <SyntaxHighlighter language=\"java\" style={far}>\r\n        { children }\r\n    </SyntaxHighlighter>\r\n);\r\n  return (\r\n\r\n    <>\r\n                <div className=\"widgets\">\r\n                    \r\n                        \r\n                        <h1>Methods</h1>\r\n                        \r\n                        <p>In Java, the appearance of method is somehow different from the method's in other languages. Because Java emphasizes the type of data, so no matter where and how we declare a variable, we must add the type in front of the variable name after the modifier. For a method, we need to write the type of return value, if the method doesn’t return a value, we use keyword \"void\". For the parameter, we also need to indicate the type. So the fundamental look of method is like this:</p>\r\n                        <p>In Java, there are two kinds of methods, one is the main method, it's used for executing the program, and the other is the method declared in the class we create.</p>\r\n                        <div className = \"example\">\r\n                          <h3>Example</h3>\r\n                           <pre className = \"code\" >\r\n                              <Code>{obj1}</Code>\r\n                           </pre>\r\n                        </div>\r\n                        \r\n                        <p>Notice, any type of data can be the parameter, it is totally okay we use the object of class we create to be the parameter:</p>\r\n                        <div className = \"example\">\r\n                          <h3>Example</h3>\r\n                           <pre className = \"code\" >\r\n                              <Code>{obj2}</Code>\r\n                           </pre>\r\n                        </div>\r\n                        <p>We know the data in Java have two general types: primitive and reference. For reference type data, such as string, “=” actually means convey the referencing address in memory  rather than copy the value. Below code firstly creates a new object and allocates the memory space and assigns a pointer to it, then copies the pointer to the car variable.</p>\r\n                        <div className = \"example\">\r\n                          <h3>Example</h3>\r\n                           <pre className = \"code\" >\r\n                              <Code>{obj3}</Code>\r\n                           </pre>\r\n                        </div>\r\n                        <p>So the following code should return false in principle, because “==” is to check if the referencing object is the identical:</p>\r\n                        <div className = \"example\">\r\n                          <h3>Example</h3>\r\n                           <pre className = \"code\" >\r\n                              <Code>{obj4}</Code>\r\n                           </pre>\r\n                        </div>\r\n                        <p>but in reality because the compiler is smart enough to recognize the same value so only construct one referenced string.</p>\r\n                        <p>To avoid this issue, when we compare two strings, we better use String.equals() method:</p>\r\n                        <div className = \"example\">\r\n                          <h3>Example</h3>\r\n                           <pre className = \"code\" >\r\n                              <Code>{obj5}</Code>\r\n                           </pre>\r\n                        </div>\r\n                        <p><strong>Notice</strong>: the initial value of any reference type data is null, meaning It haven't has a referencing address yet, if we want to pass this object to another object, there would be a run-time error occurring.</p>\r\n                 </div>        \r\n           </> \r\n        \r\n  )\r\n}\r\n\r\nexport default Methods"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,OAAQC,iBAAR,MAAgC,0BAAhC;AACA,SAAQC,GAAR,QAAkB,+CAAlB;;;;AACA,MAAMC,OAAO,GAAG,QAAc;EAAA,IAAb;IAACC;EAAD,CAAa;EAE1B,MAAMC,IAAI,GACX;AACH;AACA;AACA;AACA,IALI;EAMA,MAAMC,IAAI,GACX;AACH;AACA;AACA;AACA,EALI;EAMD,MAAMC,IAAI,GACT,qBADD;EAEA,MAAMC,IAAI,GACV;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAVG;EAWA,MAAMC,IAAI,GACV;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAVG;;EAYH,MAAMC,IAAI,GAAG;IAAA,IAAC;MAAEC;IAAF,CAAD;IAAA,oBACT,QAAC,iBAAD;MAAmB,QAAQ,EAAC,MAA5B;MAAmC,KAAK,EAAET,GAA1C;MAAA,UACMS;IADN;MAAA;MAAA;MAAA;IAAA,QADS;EAAA,CAAb;;EAKE,oBAEE;IAAA,uBACY;MAAK,SAAS,EAAC,SAAf;MAAA,wBAGQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHR,eAKQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QALR,eAMQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QANR,eAOQ;QAAK,SAAS,EAAG,SAAjB;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEG;UAAK,SAAS,EAAG,MAAjB;UAAA,uBACG,QAAC,IAAD;YAAA,UAAON;UAAP;YAAA;YAAA;YAAA;UAAA;QADH;UAAA;UAAA;UAAA;QAAA,QAFH;MAAA;QAAA;QAAA;QAAA;MAAA,QAPR,eAcQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAdR,eAeQ;QAAK,SAAS,EAAG,SAAjB;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEG;UAAK,SAAS,EAAG,MAAjB;UAAA,uBACG,QAAC,IAAD;YAAA,UAAOC;UAAP;YAAA;YAAA;YAAA;UAAA;QADH;UAAA;UAAA;UAAA;QAAA,QAFH;MAAA;QAAA;QAAA;QAAA;MAAA,QAfR,eAqBQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QArBR,eAsBQ;QAAK,SAAS,EAAG,SAAjB;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEG;UAAK,SAAS,EAAG,MAAjB;UAAA,uBACG,QAAC,IAAD;YAAA,UAAOC;UAAP;YAAA;YAAA;YAAA;UAAA;QADH;UAAA;UAAA;UAAA;QAAA,QAFH;MAAA;QAAA;QAAA;QAAA;MAAA,QAtBR,eA4BQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QA5BR,eA6BQ;QAAK,SAAS,EAAG,SAAjB;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEG;UAAK,SAAS,EAAG,MAAjB;UAAA,uBACG,QAAC,IAAD;YAAA,UAAOC;UAAP;YAAA;YAAA;YAAA;UAAA;QADH;UAAA;UAAA;UAAA;QAAA,QAFH;MAAA;QAAA;QAAA;QAAA;MAAA,QA7BR,eAmCQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAnCR,eAoCQ;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QApCR,eAqCQ;QAAK,SAAS,EAAG,SAAjB;QAAA,wBACE;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEG;UAAK,SAAS,EAAG,MAAjB;UAAA,uBACG,QAAC,IAAD;YAAA,UAAOC;UAAP;YAAA;YAAA;YAAA;UAAA;QADH;UAAA;UAAA;UAAA;QAAA,QAFH;MAAA;QAAA;QAAA;QAAA;MAAA,QArCR,eA2CQ;QAAA,wBAAG;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAH;MAAA;QAAA;QAAA;QAAA;MAAA,QA3CR;IAAA;MAAA;MAAA;MAAA;IAAA;EADZ,iBAFF;AAmDD,CA/FD;;KAAMN,O;AAiGN,eAAeA,OAAf"},"metadata":{},"sourceType":"module"}