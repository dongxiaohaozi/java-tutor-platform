{"ast":null,"code":"import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport ToggleButtonGroup from './ToggleButtonGroup';\nimport ToggleButton from './ToggleButton';\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\n\nconst ToggleButtonRow = _ref => {\n  let {\n    value,\n    onValueChange,\n    children,\n    style\n  } = _ref;\n  const count = React.Children.count(children);\n  return /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    value: value,\n    onValueChange: onValueChange\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.row, style]\n  }, React.Children.map(children, (child, i) => {\n    // @ts-expect-error: TypeScript complains about child.type but it doesn't matter\n    if (child && child.type === ToggleButton) {\n      // @ts-expect-error: We're sure that child is a React Element\n      return /*#__PURE__*/React.cloneElement(child, {\n        style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle, // @ts-expect-error: We're sure that child is a React Element\n        child.props.style]\n      });\n    }\n\n    return child;\n  })));\n};\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth\n  },\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0\n  },\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0\n  },\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  }\n});\nexport default ToggleButtonRow; // @component-docs ignore-next-line\n\nexport { ToggleButtonRow };","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAuD,cAAvD;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAGC,QAAsD;EAAA,IAArD;IAAEC,KAAF;IAASC,aAAT;IAAwBC,QAAxB;IAAkCC;EAAlC,IAAqDJ;EAC5E,MAAMK,KAAK,GAAGX,KAAK,CAACY,QAANZ,CAAeW,KAAfX,CAAqBS,QAArBT,CAAd;EAEA,oBACEA,oBAACG,iBAAD;IAAmBI,KAAK,EAAEA,KAA1B;IAAiCC,aAAa,EAAEA;EAAhD,gBACER,oBAACE,IAAD;IAAMQ,KAAK,EAAE,CAACG,MAAM,CAACC,GAAR,EAAaJ,KAAb;EAAb,GACGV,KAAK,CAACY,QAANZ,CAAee,GAAff,CAAmBS,QAAnBT,EAA6B,CAACgB,KAAD,EAAQC,CAAR,KAAc;IAC1C;IACA,IAAID,KAAK,IAAIA,KAAK,CAACE,IAANF,KAAeZ,YAA5B,EAA0C;MACxC;MACA,oBAAOJ,KAAK,CAACmB,YAANnB,CAAmBgB,KAAnBhB,EAA0B;QAC/BU,KAAK,EAAE,CACLG,MAAM,CAACO,MADF,EAELH,CAAC,KAAK,CAANA,GACIJ,MAAM,CAACQ,KADXJ,GAEIA,CAAC,KAAKN,KAAK,GAAG,CAAdM,GACAJ,MAAM,CAACS,IADPL,GAEAJ,MAAM,CAACU,MANN,EAOL;QACAP,KAAK,CAACQ,KAANR,CAAYN,KARP;MADwB,CAA1BV,CAAP;IAYD;;IAED,OAAOgB,KAAP;EAlBD,EADH,CADF,CADF;AAHF;;AA+BAX,eAAe,CAACoB,WAAhBpB,GAA8B,kBAA9BA;AAEA,MAAMQ,MAAM,GAAGZ,UAAU,CAACyB,MAAXzB,CAAkB;EAC/Ba,GAAG,EAAE;IACHa,aAAa,EAAE;EADZ,CAD0B;EAI/BP,MAAM,EAAE;IACNQ,WAAW,EAAE3B,UAAU,CAAC4B;EADlB,CAJuB;EAQ/BR,KAAK,EAAE;IACLS,oBAAoB,EAAE,CADjB;IAELC,uBAAuB,EAAE;EAFpB,CARwB;EAa/BR,MAAM,EAAE;IACNS,YAAY,EAAE,CADR;IAENC,eAAe,EAAE;EAFX,CAbuB;EAkB/BX,IAAI,EAAE;IACJW,eAAe,EAAE,CADb;IAEJC,mBAAmB,EAAE,CAFjB;IAGJC,sBAAsB,EAAE;EAHpB;AAlByB,CAAlBlC,CAAf;AAyBA,eAAeI,eAAf,C,CAEA;;AACA,SAASA,eAAT","names":["React","StyleSheet","View","ToggleButtonGroup","ToggleButton","ToggleButtonRow","_ref","value","onValueChange","children","style","count","Children","styles","row","map","child","i","type","cloneElement","button","first","last","middle","props","displayName","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/ToggleButton/ToggleButtonRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButtonGroup from './ToggleButtonGroup';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nconst ToggleButtonRow = ({ value, onValueChange, children, style }: Props) => {\n  const count = React.Children.count(children);\n\n  return (\n    <ToggleButtonGroup value={value} onValueChange={onValueChange}>\n      <View style={[styles.row, style]}>\n        {React.Children.map(children, (child, i) => {\n          // @ts-expect-error: TypeScript complains about child.type but it doesn't matter\n          if (child && child.type === ToggleButton) {\n            // @ts-expect-error: We're sure that child is a React Element\n            return React.cloneElement(child, {\n              style: [\n                styles.button,\n                i === 0\n                  ? styles.first\n                  : i === count - 1\n                  ? styles.last\n                  : styles.middle,\n                // @ts-expect-error: We're sure that child is a React Element\n                child.props.style,\n              ],\n            });\n          }\n\n          return child;\n        })}\n      </View>\n    </ToggleButtonGroup>\n  );\n};\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonRow };\n"]},"metadata":{},"sourceType":"module"}