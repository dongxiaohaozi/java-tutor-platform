{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { StyleSheet, Animated, TouchableWithoutFeedback, View } from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport CardCover from './CardCover'; // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\nimport CardTitle from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst Card = _ref => {\n  let {\n    elevation: cardElevation = 1,\n    onLongPress,\n    onPress,\n    mode: cardMode = 'elevated',\n    children,\n    style,\n    theme,\n    testID,\n    accessible,\n    ...rest\n  } = _ref; // Default animated value\n\n  const {\n    current: elevation\n  } = React.useRef(new Animated.Value(cardElevation)); // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n\n  const {\n    current: elevationDarkAdaptive\n  } = React.useRef(new Animated.Value(cardElevation));\n  const {\n    animation,\n    dark,\n    mode,\n    roundness\n  } = theme;\n  const prevDarkRef = React.useRef(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [prevDark, dark, isAdaptiveMode, cardElevation, elevation, elevationDarkAdaptive]);\n\n  const runElevationAnimation = pressType => {\n    const isPressTypeIn = pressType === 'in';\n\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  const handlePressIn = () => {\n    runElevationAnimation('in');\n  };\n\n  const handlePressOut = () => {\n    runElevationAnimation('out');\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) && child.type ? child.type.displayName : null);\n  const borderColor = color(dark ? white : black).alpha(0.12).rgb().string();\n  const computedElevation = dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n  return /*#__PURE__*/React.createElement(Surface, _extends({\n    style: [{\n      borderRadius: roundness,\n      elevation: computedElevation,\n      borderColor\n    }, cardMode === 'outlined' ? styles.outlined : {}, style],\n    theme: theme\n  }, rest), /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {\n    delayPressIn: 0,\n    disabled: !(onPress || onLongPress),\n    onLongPress: onLongPress,\n    onPress: onPress,\n    onPressIn: onPress || onLongPress ? handlePressIn : undefined,\n    onPressOut: onPress || onLongPress ? handlePressOut : undefined,\n    testID: testID,\n    accessible: accessible\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.innerContainer\n  }, React.Children.map(children, (child, index) => /*#__PURE__*/React.isValidElement(child) ? /*#__PURE__*/React.cloneElement(child, {\n    index,\n    total,\n    siblings\n  }) : child))));\n}; // @component ./CardContent.tsx\n\n\nCard.Content = CardContent; // @component ./CardActions.tsx\n\nCard.Actions = CardActions; // @component ./CardCover.tsx\n\nCard.Cover = CardCover; // @component ./CardTitle.tsx\n\nCard.Title = CardTitle;\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1\n  }\n});\nexport default withTheme(Card);","map":{"version":3,"mappings":"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","names":["React","StyleSheet","Animated","TouchableWithoutFeedback","View","color","white","black","CardContent","CardActions","CardCover","CardTitle","Surface","withTheme","Card","_ref","elevation","cardElevation","onLongPress","onPress","mode","cardMode","children","style","theme","testID","accessible","rest","current","useRef","Value","elevationDarkAdaptive","animation","dark","roundness","prevDarkRef","useEffect","prevDark","isAdaptiveMode","animationDuration","scale","setValue","runElevationAnimation","pressType","isPressTypeIn","timing","toValue","duration","useNativeDriver","start","handlePressIn","handlePressOut","total","Children","count","siblings","map","child","isValidElement","type","displayName","borderColor","alpha","rgb","string","computedElevation","borderRadius","styles","outlined","delayPressIn","disabled","onPressIn","undefined","onPressOut","innerContainer","index","cloneElement","Content","Actions","Cover","Title","create","flexGrow","flexShrink","borderWidth"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/Card/Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype HandlePressType = 'in' | 'out';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: never | number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `outlined` - Card with an outline.\n   */\n  mode?: 'elevated' | 'outlined';\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps) & Props) => {\n  // Default animated value\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  // Dark adaptive animated value, used in case of toggling the theme,\n  // it prevents animating the background with native drivers inside Surface\n  const { current: elevationDarkAdaptive } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness } = theme;\n\n  const prevDarkRef = React.useRef<boolean>(dark);\n  React.useEffect(() => {\n    prevDarkRef.current = dark;\n  });\n\n  const prevDark = prevDarkRef.current;\n  const isAdaptiveMode = mode === 'adaptive';\n  const animationDuration = 150 * animation.scale;\n\n  React.useEffect(() => {\n    /**\n     * Resets animations values if updating to dark adaptive mode,\n     * otherwise, any card that is in the middle of animation while\n     * toggling the theme will stay at that animated value until\n     * the next press-in\n     */\n    if (dark && isAdaptiveMode && !prevDark) {\n      elevation.setValue(cardElevation);\n      elevationDarkAdaptive.setValue(cardElevation);\n    }\n  }, [\n    prevDark,\n    dark,\n    isAdaptiveMode,\n    cardElevation,\n    elevation,\n    elevationDarkAdaptive,\n  ]);\n\n  const runElevationAnimation = (pressType: HandlePressType) => {\n    const isPressTypeIn = pressType === 'in';\n    if (dark && isAdaptiveMode) {\n      Animated.timing(elevationDarkAdaptive, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: false,\n      }).start();\n    } else {\n      Animated.timing(elevation, {\n        toValue: isPressTypeIn ? 8 : cardElevation,\n        duration: animationDuration,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressIn = () => {\n    runElevationAnimation('in');\n  };\n\n  const handlePressOut = () => {\n    runElevationAnimation('out');\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const borderColor = color(dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n  const computedElevation =\n    dark && isAdaptiveMode ? elevationDarkAdaptive : elevation;\n\n  return (\n    <Surface\n      style={[\n        { borderRadius: roundness, elevation: computedElevation, borderColor },\n        cardMode === 'outlined' ? styles.outlined : {},\n        style,\n      ]}\n      theme={theme}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]},"metadata":{},"sourceType":"module"}