{"ast":null,"code":"import React from 'react';\nimport color from 'color';\nimport { Text, StyleSheet, Animated } from 'react-native';\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\nconst AFFIX_OFFSET = 12;\nconst AffixContext = /*#__PURE__*/React.createContext({\n  textStyle: {\n    fontFamily: '',\n    color: ''\n  },\n  topPosition: null,\n  side: AdornmentSide.Left\n});\n\nconst AffixAdornment = _ref => {\n  let {\n    affix,\n    side,\n    textStyle,\n    topPosition,\n    onLayout,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier\n  } = _ref;\n  return /*#__PURE__*/React.createElement(AffixContext.Provider, {\n    value: {\n      side,\n      textStyle,\n      topPosition,\n      onLayout,\n      visible,\n      paddingHorizontal,\n      maxFontSizeMultiplier\n    }\n  }, affix);\n};\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\n\nconst TextInputAffix = _ref2 => {\n  let {\n    text,\n    textStyle: labelStyle,\n    theme\n  } = _ref2;\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  const offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n  const style = {\n    top: topPosition,\n    [side]: offset\n  };\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.container, style, {\n      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0]\n      })) || 1\n    }],\n    onLayout: onLayout\n  }, /*#__PURE__*/React.createElement(Text, {\n    maxFontSizeMultiplier: maxFontSizeMultiplier,\n    style: [{\n      color: textColor\n    }, textStyle, labelStyle]\n  }, text));\n};\n\nTextInputAffix.displayName = 'TextInput.Affix';\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(TextInputAffix); // @component-docs ignore-next-line\n\nexport { TextInputAffix, AffixAdornment };","map":{"version":3,"mappings":"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","names":["React","color","Text","StyleSheet","Animated","withTheme","AdornmentSide","AFFIX_OFFSET","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","_ref","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","Provider","value","TextInputAffix","_ref2","text","labelStyle","theme","useContext","textColor","colors","alpha","dark","rgb","string","offset","style","top","View","styles","container","opacity","interpolate","inputRange","outputRange","displayName","create","position","justifyContent","alignItems"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/TextInput/Adornment/TextInputAffix.tsx"],"sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n  ViewStyle,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n  } = React.useContext(AffixContext);\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        style={[{ color: textColor }, textStyle, labelStyle]}\n      >\n        {text}\n      </Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]},"metadata":{},"sourceType":"module"}