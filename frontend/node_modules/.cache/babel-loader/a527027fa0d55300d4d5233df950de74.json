{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming'; // From https://material.io/design/motion/speed.html#duration\n\nconst ANIMATION_DURATION = 100;\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\n\nconst CheckboxAndroid = _ref => {\n  let {\n    status,\n    theme,\n    disabled,\n    onPress,\n    testID,\n    ...rest\n  } = _ref;\n  const {\n    current: scaleAnim\n  } = React.useRef(new Animated.Value(1));\n  const isFirstRendering = React.useRef(true);\n  const {\n    animation: {\n      scale\n    }\n  } = theme;\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    const checked = status === 'checked';\n    Animated.sequence([Animated.timing(scaleAnim, {\n      toValue: 0.85,\n      duration: checked ? ANIMATION_DURATION * scale : 0,\n      useNativeDriver: false\n    }), Animated.timing(scaleAnim, {\n      toValue: 1,\n      duration: checked ? ANIMATION_DURATION * scale : ANIMATION_DURATION * scale * 1.75,\n      useNativeDriver: false\n    })]).start();\n  }, [status, scaleAnim, scale]);\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor = rest.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  let rippleColor, checkboxColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    checkboxColor = theme.colors.disabled;\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    checkboxColor = checked ? checkedColor : uncheckedColor;\n  }\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0]\n  });\n  const icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';\n  return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled,\n      checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID\n  }), /*#__PURE__*/React.createElement(Animated.View, {\n    style: {\n      transform: [{\n        scale: scaleAnim\n      }]\n    }\n  }, /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: checkboxColor,\n    direction: \"ltr\"\n  }), /*#__PURE__*/React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.fillContainer]\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.fill, {\n      borderColor: checkboxColor\n    }, {\n      borderWidth\n    }]\n  }))));\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    height: 14,\n    width: 14\n  }\n});\nexport default withTheme(CheckboxAndroid); // @component-docs ignore-next-line\n\nconst CheckboxAndroidWithTheme = withTheme(CheckboxAndroid); // @component-docs ignore-next-line\n\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };","map":{"version":3,"mappings":"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","names":["React","Animated","View","StyleSheet","color","MaterialCommunityIcon","TouchableRipple","withTheme","ANIMATION_DURATION","CheckboxAndroid","_ref","status","theme","disabled","onPress","testID","rest","current","scaleAnim","useRef","Value","isFirstRendering","animation","scale","useEffect","checked","sequence","timing","toValue","duration","useNativeDriver","start","indeterminate","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","checkboxColor","fade","borderWidth","interpolate","inputRange","outputRange","icon","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","transform","allowFontScaling","name","size","direction","absoluteFill","fillContainer","fill","borderColor","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent","CheckboxAndroidWithTheme"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/Checkbox/CheckboxAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxAndroid = ({\n  status,\n  theme,\n  disabled,\n  onPress,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: scaleAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    const checked = status === 'checked';\n\n    Animated.sequence([\n      Animated.timing(scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * scale\n          : ANIMATION_DURATION * scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }, [status, scaleAnim, scale]);\n\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor, checkboxColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    checkboxColor = theme.colors.disabled;\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    checkboxColor = checked ? checkedColor : uncheckedColor;\n  }\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0],\n  });\n\n  const icon = indeterminate\n    ? 'minus-box'\n    : checked\n    ? 'checkbox-marked'\n    : 'checkbox-blank-outline';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkboxColor}\n          direction=\"ltr\"\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <Animated.View\n            style={[\n              styles.fill,\n              { borderColor: checkboxColor },\n              { borderWidth },\n            ]}\n          />\n        </View>\n      </Animated.View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nconst CheckboxAndroidWithTheme = withTheme(CheckboxAndroid);\n// @component-docs ignore-next-line\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };\n"]},"metadata":{},"sourceType":"module"}