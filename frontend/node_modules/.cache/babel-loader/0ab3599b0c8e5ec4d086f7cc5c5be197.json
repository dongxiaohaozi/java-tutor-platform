{"ast":null,"code":"import * as React from 'react';\nimport { View, Animated, TextInput as NativeTextInput, StyleSheet, I18nManager, Platform } from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment from './Adornment/TextInputAdornment';\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, FLAT_INPUT_OFFSET } from './constants';\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingFlat, interpolatePlaceholder, calculateFlatAffixTopPosition, calculateFlatInputHorizontalPadding } from './helpers';\nimport { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nconst TextInputFlat = _ref => {\n  let {\n    disabled = false,\n    editable = true,\n    label,\n    error = false,\n    selectionColor,\n    underlineColor,\n    activeUnderlineColor,\n    dense,\n    style,\n    theme,\n    render = props => /*#__PURE__*/React.createElement(NativeTextInput, props),\n    multiline = false,\n    parentState,\n    innerRef,\n    onFocus,\n    forceFocus,\n    onBlur,\n    onChangeText,\n    onLayoutAnimatedText,\n    onLeftAffixLayoutChange,\n    onRightAffixLayoutChange,\n    left,\n    right,\n    placeholderTextColor,\n    ...rest\n  } = _ref;\n  const isAndroid = Platform.OS === 'android';\n  const {\n    colors,\n    fonts\n  } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    height,\n    paddingHorizontal,\n    textAlign,\n    ...viewStyle\n  } = StyleSheet.flatten(style) || {};\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  const isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right\n  });\n  let {\n    paddingLeft,\n    paddingRight\n  } = calculateFlatInputHorizontalPadding({\n    adornmentConfig\n  });\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal;\n    paddingRight = paddingHorizontal;\n  }\n\n  const {\n    leftLayout,\n    rightLayout\n  } = parentState;\n  const rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig,\n    rightAffixWidth,\n    leftAffixWidth,\n    paddingHorizontal,\n    inputOffset: FLAT_INPUT_OFFSET,\n    mode: InputMode.Flat\n  });\n  let inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;\n\n  if (disabled) {\n    inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n    placeholderColor = colors.disabled;\n    underlineColorCustom = 'transparent';\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeUnderlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    errorColor = colors.error;\n    underlineColorCustom = underlineColor || colors.disabled;\n  }\n\n  const containerStyle = {\n    backgroundColor: theme.dark ? color(colors.background).lighten(0.24).rgb().string() : color(colors.background).darken(0.06).rgb().string(),\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness\n  };\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n  const baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n  const minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  const topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    label,\n    scale: fontScale,\n    isAndroid,\n    styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n  };\n  const pad = calculatePadding(paddingSettings);\n  const paddingFlat = adjustPaddingFlat({ ...paddingSettings,\n    pad\n  });\n  const baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n  const placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  const minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  const flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n  const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n  const leftAffixTopPosition = leftLayout.height ? calculateFlatAffixTopPosition({\n    height: flatHeight,\n    ...paddingFlat,\n    affixHeight: leftLayout.height\n  }) : null;\n  const rightAffixTopPosition = rightLayout.height ? calculateFlatAffixTopPosition({\n    height: flatHeight,\n    ...paddingFlat,\n    affixHeight: rightLayout.height\n  }) : null;\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    paddingOffset: {\n      paddingLeft,\n      paddingRight\n    },\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    errorColor,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange\n  };\n  let adornmentProps = {\n    paddingHorizontal,\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Affix]: affixTopPosition,\n      [AdornmentType.Icon]: iconTopPosition\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = { ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font,\n        fontSize,\n        fontWeight\n      },\n      visible: parentState.labeled\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(View, {\n    style: [containerStyle, viewStyle]\n  }, /*#__PURE__*/React.createElement(Underline, {\n    parentState: parentState,\n    underlineColorCustom: underlineColorCustom,\n    error: error,\n    colors: colors,\n    activeColor: activeColor\n  }), /*#__PURE__*/React.createElement(View, {\n    style: [styles.labelContainer, {\n      minHeight\n    }]\n  }, !isAndroid && multiline && !!label &&\n  /*#__PURE__*/\n  // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n  // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n  React.createElement(View, {\n    testID: \"patch-container\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {\n      backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,\n      left: paddingLeft,\n      right: paddingRight\n    }]\n  }), /*#__PURE__*/React.createElement(InputLabel, {\n    parentState: parentState,\n    labelProps: labelProps\n  }), render === null || render === void 0 ? void 0 : render({\n    testID: 'text-input-flat',\n    ...rest,\n    ref: innerRef,\n    onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus,\n    onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline,\n    style: [styles.input, {\n      paddingLeft,\n      paddingRight\n    }, !multiline || multiline && height ? {\n      height: flatHeight\n    } : {}, paddingFlat, { ...font,\n      fontSize,\n      fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n    }, Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  })), /*#__PURE__*/React.createElement(TextInputAdornment, adornmentProps));\n};\n\nexport default TextInputFlat;\n\nconst Underline = _ref2 => {\n  let {\n    parentState,\n    error,\n    colors,\n    activeColor,\n    underlineColorCustom\n  } = _ref2;\n  let backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.underline, {\n      backgroundColor,\n      // Underlines is thinner when input is not focused\n      transform: [{\n        scaleY: parentState.focused ? 1 : 0.5\n      }]\n    }]\n  });\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2\n  }\n});","map":{"version":3,"mappings":"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","names":["React","View","Animated","TextInput","NativeTextInput","StyleSheet","I18nManager","Platform","color","InputLabel","TextInputAdornment","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","FLAT_INPUT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingFlat","interpolatePlaceholder","calculateFlatAffixTopPosition","calculateFlatInputHorizontalPadding","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","AdornmentSide","AdornmentType","InputMode","MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","LABEL_PADDING_TOP_DENSE","MIN_HEIGHT","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","TextInputFlat","_ref","disabled","editable","label","error","selectionColor","underlineColor","activeUnderlineColor","dense","style","theme","render","props","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","isAndroid","OS","colors","fonts","font","regular","hasActiveOutline","focused","fontSize","fontSizeStyle","fontWeight","height","paddingHorizontal","textAlign","viewStyle","flatten","isPaddingHorizontalPassed","undefined","adornmentConfig","paddingLeft","paddingRight","leftLayout","rightLayout","rightAffixWidth","width","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","inputOffset","mode","Flat","inputTextColor","activeColor","underlineColorCustom","placeholderColor","errorColor","text","alpha","rgb","string","primary","placeholder","containerStyle","backgroundColor","dark","background","lighten","darken","borderTopLeftRadius","roundness","borderTopRightRadius","labelScale","fontScale","labelWidth","labelLayout","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","isRTL","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","styles","inputFlatDense","inputFlat","pad","paddingFlat","baseLabelTranslateY","placeholderOpacity","labeled","measured","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","placeholderStyle","wiggleOffsetX","paddingOffset","maxFontSizeMultiplier","affixTopPosition","Left","Right","onAffixChange","adornmentProps","Affix","Icon","isTextInputFocused","length","textStyle","visible","Underline","labelContainer","testID","pointerEvents","absoluteFill","densePatchContainer","patchContainer","ref","underlineColorAndroid","input","textAlignVertical","outline","_ref2","underline","transform","scaleY","create","position","bottom","zIndex","paddingTop","paddingBottom","flexGrow","margin"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/TextInput/TextInputFlat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingFlat,\n  Padding,\n  interpolatePlaceholder,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n} from './helpers';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\n\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\n\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nconst TextInputFlat = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor,\n  activeUnderlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const isAndroid = Platform.OS === 'android';\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    height,\n    paddingHorizontal,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const isPaddingHorizontalPassed =\n    paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right,\n  });\n\n  let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n    adornmentConfig,\n  });\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal as number;\n    paddingRight = paddingHorizontal as number;\n  }\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      paddingHorizontal,\n      inputOffset: FLAT_INPUT_OFFSET,\n      mode: InputMode.Flat,\n    });\n\n  let inputTextColor,\n    activeColor,\n    underlineColorCustom,\n    placeholderColor,\n    errorColor;\n\n  if (disabled) {\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    underlineColorCustom = 'transparent';\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeUnderlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    errorColor = colors.error;\n    underlineColorCustom = underlineColor || colors.disabled;\n  }\n\n  const containerStyle = {\n    backgroundColor: theme.dark\n      ? color(colors.background).lighten(0.24).rgb().string()\n      : color(colors.background).darken(0.06).rgb().string(),\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness,\n  };\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth - (labelScale * labelWidth) / 2) +\n    (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n\n  const minInputHeight = dense\n    ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE\n    : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    label,\n    scale: fontScale,\n    isAndroid,\n    styles: StyleSheet.flatten(\n      dense ? styles.inputFlatDense : styles.inputFlat\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingFlat = adjustPaddingFlat({\n    ...paddingSettings,\n    pad,\n  });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const minHeight =\n    height ||\n    (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n  const flatHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n  const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n  const leftAffixTopPosition = leftLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: leftLayout.height,\n      })\n    : null;\n\n  const rightAffixTopPosition = rightLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: rightLayout.height,\n      })\n    : null;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    paddingOffset: { paddingLeft, paddingRight },\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    errorColor,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    paddingHorizontal,\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Affix]: affixTopPosition,\n      [AdornmentType.Icon]: iconTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={[containerStyle, viewStyle]}>\n      <Underline\n        parentState={parentState}\n        underlineColorCustom={underlineColorCustom}\n        error={error}\n        colors={colors}\n        activeColor={activeColor}\n      />\n      <View\n        style={[\n          styles.labelContainer,\n          {\n            minHeight,\n          },\n        ]}\n      >\n        {!isAndroid && multiline && !!label && (\n          // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n          // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n          <View\n            testID=\"patch-container\"\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              dense ? styles.densePatchContainer : styles.patchContainer,\n              {\n                backgroundColor:\n                  viewStyle.backgroundColor || containerStyle.backgroundColor,\n                left: paddingLeft,\n                right: paddingRight,\n              },\n            ]}\n          />\n        )}\n        <InputLabel parentState={parentState} labelProps={labelProps} />\n        {render?.({\n          testID: 'text-input-flat',\n          ...rest,\n          ref: innerRef,\n          onChangeText,\n          placeholder: label ? parentState.placeholder : rest.placeholder,\n          placeholderTextColor: placeholderTextColor ?? placeholderColor,\n          editable: !disabled && editable,\n          selectionColor:\n            typeof selectionColor === 'undefined'\n              ? activeColor\n              : selectionColor,\n          onFocus,\n          onBlur,\n          underlineColorAndroid: 'transparent',\n          multiline,\n          style: [\n            styles.input,\n            { paddingLeft, paddingRight },\n            !multiline || (multiline && height) ? { height: flatHeight } : {},\n            paddingFlat,\n            {\n              ...font,\n              fontSize,\n              fontWeight,\n              color: inputTextColor,\n              textAlignVertical: multiline ? 'top' : 'center',\n              textAlign: textAlign\n                ? textAlign\n                : I18nManager.isRTL\n                ? 'right'\n                : 'left',\n            },\n            Platform.OS === 'web' && { outline: 'none' },\n            adornmentStyleAdjustmentForNativeInput,\n          ],\n        })}\n      </View>\n      <TextInputAdornment {...adornmentProps} />\n    </View>\n  );\n};\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors: {\n    error: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n}: UnderlineProps) => {\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return (\n    <Animated.View\n      style={[\n        styles.underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1,\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2,\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}