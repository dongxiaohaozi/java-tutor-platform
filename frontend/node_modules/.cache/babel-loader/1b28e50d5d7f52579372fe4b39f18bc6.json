{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nconst BORDER_WIDTH = 2;\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\n\nconst RadioButtonAndroid = _ref => {\n  let {\n    disabled,\n    onPress,\n    theme,\n    value,\n    status,\n    testID,\n    ...rest\n  } = _ref;\n  const {\n    current: borderAnim\n  } = React.useRef(new Animated.Value(BORDER_WIDTH));\n  const {\n    current: radioAnim\n  } = React.useRef(new Animated.Value(1));\n  const isFirstRendering = React.useRef(true);\n  const {\n    scale\n  } = theme.animation;\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor = rest.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n  let rippleColor, radioColor;\n  return /*#__PURE__*/React.createElement(RadioButtonContext.Consumer, null, context => {\n    const checked = isChecked({\n      contextValue: context === null || context === void 0 ? void 0 : context.value,\n      status,\n      value\n    }) === 'checked';\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n      radioColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor).fade(0.32).rgb().string();\n      radioColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n      borderless: true,\n      rippleColor: rippleColor,\n      onPress: disabled ? undefined : () => {\n        handlePress({\n          onPress,\n          onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n          value\n        });\n      } // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      ,\n      accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n      accessibilityComponentType: checked ? 'radiobutton_checked' : 'radiobutton_unchecked',\n      accessibilityRole: \"radio\",\n      accessibilityState: {\n        disabled,\n        checked\n      },\n      accessibilityLiveRegion: \"polite\",\n      style: styles.container,\n      testID: testID\n    }), /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.radio, {\n        borderColor: radioColor,\n        borderWidth: borderAnim\n      }]\n    }, checked ? /*#__PURE__*/React.createElement(View, {\n      style: [StyleSheet.absoluteFill, styles.radioContainer]\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.dot, {\n        backgroundColor: radioColor,\n        transform: [{\n          scale: radioAnim\n        }]\n      }]\n    })) : null));\n  });\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5\n  }\n});\nexport default withTheme(RadioButtonAndroid); // @component-docs ignore-next-line\n\nconst RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid); // @component-docs ignore-next-line\n\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };","map":{"version":3,"mappings":"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","names":["React","Animated","View","StyleSheet","color","RadioButtonContext","handlePress","isChecked","TouchableRipple","withTheme","BORDER_WIDTH","RadioButtonAndroid","_ref","disabled","onPress","theme","value","status","testID","rest","current","borderAnim","useRef","Value","radioAnim","isFirstRendering","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","checkedColor","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","Consumer","context","checked","contextValue","fade","borderless","undefined","onValueChange","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","radio","borderColor","borderWidth","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin","RadioButtonAndroidWithTheme"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/RadioButton/RadioButtonAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor: string, radioColor: string;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        if (disabled) {\n          rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n          radioColor = theme.colors.disabled;\n        } else {\n          rippleColor = color(checkedColor).fade(0.32).rgb().string();\n          radioColor = checked ? checkedColor : uncheckedColor;\n        }\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    });\n                  }\n            }\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: radioColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: radioColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nconst RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid);\n// @component-docs ignore-next-line\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"module"}