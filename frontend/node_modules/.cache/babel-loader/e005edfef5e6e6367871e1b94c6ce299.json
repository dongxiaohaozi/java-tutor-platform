{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\n\nconst CheckboxIOS = _ref => {\n  let {\n    status,\n    disabled,\n    onPress,\n    theme,\n    testID,\n    ...rest\n  } = _ref;\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const checkedColor = disabled ? theme.colors.disabled : rest.color || theme.colors.accent;\n  let rippleColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  const icon = indeterminate ? 'minus' : 'check';\n  return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: true,\n    rippleColor: rippleColor,\n    onPress: onPress,\n    disabled: disabled // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      disabled,\n      checked\n    },\n    accessibilityLiveRegion: \"polite\",\n    style: styles.container,\n    testID: testID\n  }), /*#__PURE__*/React.createElement(View, {\n    style: {\n      opacity: indeterminate || checked ? 1 : 0\n    }\n  }, /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n    allowFontScaling: false,\n    name: icon,\n    size: 24,\n    color: checkedColor,\n    direction: \"ltr\"\n  })));\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6\n  }\n});\nexport default withTheme(CheckboxIOS); // @component-docs ignore-next-line\n\nconst CheckboxIOSWithTheme = withTheme(CheckboxIOS); // @component-docs ignore-next-line\n\nexport { CheckboxIOSWithTheme as CheckboxIOS };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,cAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,0BAAlC;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAGC,QAOP;EAAA,IAPQ;IACnBC,MADmB;IAEnBC,QAFmB;IAGnBC,OAHmB;IAInBC,KAJmB;IAKnBC,MALmB;IAMnB,GAAGC;EANgB,IAORN;EACX,MAAMO,OAAO,GAAGN,MAAM,KAAK,SAA3B;EACA,MAAMO,aAAa,GAAGP,MAAM,KAAK,eAAjC;EAEA,MAAMQ,YAAY,GAAGP,QAAQ,GACzBE,KAAK,CAACM,MAANN,CAAaF,QADY,GAEzBI,IAAI,CAACX,KAALW,IAAcF,KAAK,CAACM,MAANN,CAAaO,MAF/B;EAIA,IAAIC,WAAJ;;EAEA,IAAIV,QAAJ,EAAc;IACZU,WAAW,GAAGjB,KAAK,CAACS,KAAK,CAACM,MAANN,CAAaS,IAAd,CAALlB,CAAyBmB,KAAzBnB,CAA+B,IAA/BA,EAAqCoB,GAArCpB,GAA2CqB,MAA3CrB,EAAdiB;EADF,OAEO;IACLA,WAAW,GAAGjB,KAAK,CAACc,YAAD,CAALd,CAAoBsB,IAApBtB,CAAyB,IAAzBA,EAA+BoB,GAA/BpB,GAAqCqB,MAArCrB,EAAdiB;EACD;;EAED,MAAMM,IAAI,GAAGV,aAAa,GAAG,OAAH,GAAa,OAAvC;EAEA,oBACEhB,oBAACK,eAAD,eACMS,IADN;IAEEa,UAAU,MAFZ;IAGEP,WAAW,EAAEA,WAHf;IAIET,OAAO,EAAEA,OAJX;IAKED,QAAQ,EAAEA,QALZ,CAME;IANF;IAOEkB,mBAAmB,EAAElB,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAP3D;IAQEmB,0BAA0B,EAAC,QAR7B;IASEC,iBAAiB,EAAC,UATpB;IAUEC,kBAAkB,EAAE;MAAErB,QAAF;MAAYK;IAAZ,CAVtB;IAWEiB,uBAAuB,EAAC,QAX1B;IAYEC,KAAK,EAAEC,MAAM,CAACC,SAZhB;IAaEtB,MAAM,EAAEA;EAbV,iBAeEb,oBAACE,IAAD;IAAM+B,KAAK,EAAE;MAAEG,OAAO,EAAEpB,aAAa,IAAID,OAAjBC,GAA2B,CAA3BA,GAA+B;IAA1C;EAAb,gBACEhB,oBAACI,qBAAD;IACEiC,gBAAgB,EAAE,KADpB;IAEEC,IAAI,EAAEZ,IAFR;IAGEa,IAAI,EAAE,EAHR;IAIEpC,KAAK,EAAEc,YAJT;IAKEuB,SAAS,EAAC;EALZ,EADF,CAfF,CADF;AAzBF;;AAsDAjC,WAAW,CAACkC,WAAZlC,GAA0B,cAA1BA;AAEA,MAAM2B,MAAM,GAAGjC,UAAU,CAACyC,MAAXzC,CAAkB;EAC/BkC,SAAS,EAAE;IACTQ,YAAY,EAAE,EADL;IAETC,OAAO,EAAE;EAFA;AADoB,CAAlB3C,CAAf;AAOA,eAAeK,SAAS,CAACC,WAAD,CAAxB,C,CAEA;;AACA,MAAMsC,oBAAoB,GAAGvC,SAAS,CAACC,WAAD,CAAtC,C,CACA;;AACA,SAASsC,oBAAoB,IAAItC,WAAjC","names":["React","StyleSheet","View","color","MaterialCommunityIcon","TouchableRipple","withTheme","CheckboxIOS","_ref","status","disabled","onPress","theme","testID","rest","checked","indeterminate","checkedColor","colors","accent","rippleColor","text","alpha","rgb","string","fade","icon","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","opacity","allowFontScaling","name","size","direction","displayName","create","borderRadius","padding","CheckboxIOSWithTheme"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/Checkbox/CheckboxIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme,\n  testID,\n  ...rest\n}: Props) => {\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  const icon = indeterminate ? 'minus' : 'check';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkedColor}\n          direction=\"ltr\"\n        />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nconst CheckboxIOSWithTheme = withTheme(CheckboxIOS);\n// @component-docs ignore-next-line\nexport { CheckboxIOSWithTheme as CheckboxIOS };\n"]},"metadata":{},"sourceType":"module"}