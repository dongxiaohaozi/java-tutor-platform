{"ast":null,"code":"import color from 'color';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst MenuItem = _ref => {\n  let {\n    icon,\n    title,\n    disabled,\n    onPress,\n    style,\n    contentStyle,\n    testID,\n    titleStyle,\n    accessibilityLabel,\n    theme\n  } = _ref;\n  const disabledColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  const titleColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.87).rgb().string();\n  const iconColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.54).rgb().string();\n  return /*#__PURE__*/React.createElement(TouchableRipple, {\n    style: [styles.container, style],\n    onPress: onPress,\n    disabled: disabled,\n    testID: testID,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: \"menuitem\",\n    accessibilityState: {\n      disabled\n    }\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.row\n  }, icon ? /*#__PURE__*/React.createElement(View, {\n    style: [styles.item, styles.icon],\n    pointerEvents: \"box-none\"\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    size: 24,\n    color: iconColor\n  })) : null, /*#__PURE__*/React.createElement(View, {\n    style: [styles.item, styles.content, icon ? styles.widthWithIcon : null, contentStyle],\n    pointerEvents: \"none\"\n  }, /*#__PURE__*/React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.title, {\n      color: titleColor\n    }, titleStyle]\n  }, title))));\n};\n\nMenuItem.displayName = 'Menu.Item';\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center'\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  icon: {\n    width: iconWidth\n  },\n  title: {\n    fontSize: 16\n  },\n  item: {\n    marginHorizontal: 8\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48)\n  }\n});\nexport default withTheme(MenuItem);","map":{"version":3,"mappings":"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","names":["color","React","StyleSheet","View","Icon","TouchableRipple","Text","black","white","withTheme","MenuItem","_ref","icon","title","disabled","onPress","style","contentStyle","testID","titleStyle","accessibilityLabel","theme","disabledColor","dark","alpha","rgb","string","titleColor","colors","text","iconColor","styles","container","accessibilityRole","accessibilityState","row","item","pointerEvents","source","size","content","widthWithIcon","selectable","numberOfLines","displayName","minWidth","maxWidth","iconWidth","create","paddingHorizontal","height","justifyContent","flexDirection","width","fontSize","marginHorizontal"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/Menu/MenuItem.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  style?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the Touchable. This is read by the screen reader when the user taps the component.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst MenuItem = ({\n  icon,\n  title,\n  disabled,\n  onPress,\n  style,\n  contentStyle,\n  testID,\n  titleStyle,\n  accessibilityLabel,\n  theme,\n}: Props) => {\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.32)\n    .rgb()\n    .string();\n\n  const titleColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.87).rgb().string();\n\n  const iconColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      style={[styles.container, style]}\n      onPress={onPress}\n      disabled={disabled}\n      testID={testID}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"menuitem\"\n      accessibilityState={{ disabled }}\n    >\n      <View style={styles.row}>\n        {icon ? (\n          <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n            <Icon source={icon} size={24} color={iconColor} />\n          </View>\n        ) : null}\n        <View\n          style={[\n            styles.item,\n            styles.content,\n            icon ? styles.widthWithIcon : null,\n            contentStyle,\n          ]}\n          pointerEvents=\"none\"\n        >\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n        </View>\n      </View>\n    </TouchableRipple>\n  );\n};\n\nMenuItem.displayName = 'Menu.Item';\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n"]},"metadata":{},"sourceType":"module"}