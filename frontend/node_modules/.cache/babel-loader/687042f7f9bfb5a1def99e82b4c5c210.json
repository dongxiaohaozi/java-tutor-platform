{"ast":null,"code":"import * as React from 'react';\nimport { AccessibilityInfo, Appearance } from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\nimport { addEventListener } from '../utils/addEventListener';\n\nconst Provider = _ref => {\n  let { ...props\n  } = _ref;\n  const colorSchemeName = !props.theme && (Appearance === null || Appearance === void 0 ? void 0 : Appearance.getColorScheme()) || 'light';\n  const [reduceMotionEnabled, setReduceMotionEnabled] = React.useState(false);\n  const [colorScheme, setColorScheme] = React.useState(colorSchemeName);\n\n  const handleAppearanceChange = preferences => {\n    const {\n      colorScheme\n    } = preferences;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(() => {\n    let subscription;\n\n    if (!props.theme) {\n      subscription = addEventListener(AccessibilityInfo, 'reduceMotionChanged', setReduceMotionEnabled);\n    }\n\n    return () => {\n      if (!props.theme) {\n        var _subscription;\n\n        (_subscription = subscription) === null || _subscription === void 0 ? void 0 : _subscription.remove();\n      }\n    };\n  }, [props.theme]);\n  React.useEffect(() => {\n    let appearanceSubscription;\n\n    if (!props.theme) {\n      appearanceSubscription = Appearance === null || Appearance === void 0 ? void 0 : Appearance.addChangeListener(handleAppearanceChange);\n    }\n\n    return () => {\n      if (!props.theme) {\n        if (appearanceSubscription) {\n          appearanceSubscription.remove();\n        } else {\n          Appearance === null || Appearance === void 0 ? void 0 : Appearance.removeChangeListener(handleAppearanceChange);\n        }\n      }\n    };\n  }, [props.theme]);\n\n  const getTheme = () => {\n    const {\n      theme: providedTheme\n    } = props;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      const theme = colorScheme === 'dark' ? DarkTheme : DefaultTheme;\n      return { ...theme,\n        animation: { ...theme.animation,\n          scale: reduceMotionEnabled ? 0 : 1\n        }\n      };\n    }\n  };\n\n  const {\n    children,\n    settings\n  } = props;\n  return /*#__PURE__*/React.createElement(PortalHost, null, /*#__PURE__*/React.createElement(SettingsProvider, {\n    value: settings || {\n      icon: MaterialCommunityIcon\n    }\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: getTheme()\n  }, children)));\n};\n\nexport default Provider;","map":{"version":3,"mappings":"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","names":["React","AccessibilityInfo","Appearance","ThemeProvider","Provider","SettingsProvider","MaterialCommunityIcon","PortalHost","DefaultTheme","DarkTheme","addEventListener","_ref","props","colorSchemeName","theme","getColorScheme","reduceMotionEnabled","setReduceMotionEnabled","useState","colorScheme","setColorScheme","handleAppearanceChange","preferences","useEffect","subscription","remove","appearanceSubscription","addChangeListener","removeChangeListener","getTheme","providedTheme","animation","scale","children","settings","value","icon"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/core/Provider.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityInfo,\n  Appearance,\n  ColorSchemeName,\n  NativeEventSubscription,\n} from 'react-native';\nimport { ThemeProvider } from './theming';\nimport { Provider as SettingsProvider, Settings } from './settings';\nimport MaterialCommunityIcon from '../components/MaterialCommunityIcon';\nimport PortalHost from '../components/Portal/PortalHost';\nimport DefaultTheme from '../styles/DefaultTheme';\nimport DarkTheme from '../styles/DarkTheme';\nimport { addEventListener } from '../utils/addEventListener';\n\ntype Props = {\n  children: React.ReactNode;\n  theme?: ReactNativePaper.Theme;\n  settings?: Settings;\n};\n\nconst Provider = ({ ...props }: Props) => {\n  const colorSchemeName =\n    (!props.theme && Appearance?.getColorScheme()) || 'light';\n\n  const [reduceMotionEnabled, setReduceMotionEnabled] =\n    React.useState<boolean>(false);\n  const [colorScheme, setColorScheme] =\n    React.useState<ColorSchemeName>(colorSchemeName);\n\n  const handleAppearanceChange = (\n    preferences: Appearance.AppearancePreferences\n  ) => {\n    const { colorScheme } = preferences;\n    setColorScheme(colorScheme);\n  };\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (!props.theme) {\n      subscription = addEventListener(\n        AccessibilityInfo,\n        'reduceMotionChanged',\n        setReduceMotionEnabled\n      );\n    }\n    return () => {\n      if (!props.theme) {\n        subscription?.remove();\n      }\n    };\n  }, [props.theme]);\n\n  React.useEffect(() => {\n    let appearanceSubscription: NativeEventSubscription | undefined;\n    if (!props.theme) {\n      appearanceSubscription = Appearance?.addChangeListener(\n        handleAppearanceChange\n      ) as NativeEventSubscription | undefined;\n    }\n    return () => {\n      if (!props.theme) {\n        if (appearanceSubscription) {\n          appearanceSubscription.remove();\n        } else {\n          Appearance?.removeChangeListener(handleAppearanceChange);\n        }\n      }\n    };\n  }, [props.theme]);\n\n  const getTheme = () => {\n    const { theme: providedTheme } = props;\n\n    if (providedTheme) {\n      return providedTheme;\n    } else {\n      const theme = (\n        colorScheme === 'dark' ? DarkTheme : DefaultTheme\n      ) as ReactNativePaper.Theme;\n\n      return {\n        ...theme,\n        animation: {\n          ...theme.animation,\n          scale: reduceMotionEnabled ? 0 : 1,\n        },\n      };\n    }\n  };\n\n  const { children, settings } = props;\n  return (\n    <PortalHost>\n      <SettingsProvider value={settings || { icon: MaterialCommunityIcon }}>\n        <ThemeProvider theme={getTheme()}>{children}</ThemeProvider>\n      </SettingsProvider>\n    </PortalHost>\n  );\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}