{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\nexport function getAdornmentConfig(_ref) {\n  let {\n    left,\n    right\n  } = _ref;\n  let adornmentConfig = [];\n\n  if (left || right) {\n    [{\n      side: AdornmentSide.Left,\n      adornment: left\n    }, {\n      side: AdornmentSide.Right,\n      adornment: right\n    }].forEach(_ref2 => {\n      let {\n        side,\n        adornment\n      } = _ref2;\n\n      if (adornment && /*#__PURE__*/React.isValidElement(adornment)) {\n        let type;\n\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n\n        adornmentConfig.push({\n          side,\n          type\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\nexport function getAdornmentStyleAdjustmentForNativeInput(_ref3) {\n  let {\n    adornmentConfig,\n    leftAffixWidth,\n    rightAffixWidth,\n    paddingHorizontal,\n    inputOffset = 0,\n    mode\n  } = _ref3;\n\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(_ref4 => {\n      let {\n        type,\n        side\n      } = _ref4;\n      const isLeftSide = side === AdornmentSide.Left;\n      const inputModeAdornemntOffset = mode === InputMode.Outlined ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET : ADORNMENT_OFFSET;\n      const paddingKey = `padding${captalize(side)}`;\n      const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n      const padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;\n      const offset = affixWidth + padding;\n      const isAffix = type === AdornmentType.Affix;\n      const marginKey = `margin${captalize(side)}`;\n      return {\n        [marginKey]: isAffix ? 0 : offset,\n        [paddingKey]: isAffix ? offset : inputOffset\n      };\n    });\n    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce((mergedStyles, currentStyle) => {\n      return { ...mergedStyles,\n        ...currentStyle\n      };\n    }, {});\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = text => text.charAt(0).toUpperCase() + text.slice(1);\n\nconst TextInputAdornment = _ref5 => {\n  let {\n    adornmentConfig,\n    left,\n    right,\n    onAffixChange,\n    textStyle,\n    visible,\n    topPosition,\n    isTextInputFocused,\n    forceFocus,\n    paddingHorizontal,\n    maxFontSizeMultiplier\n  } = _ref5;\n\n  if (adornmentConfig.length) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, adornmentConfig.map(_ref6 => {\n      let {\n        type,\n        side\n      } = _ref6;\n      let inputAdornmentComponent;\n\n      if (side === AdornmentSide.Left) {\n        inputAdornmentComponent = left;\n      } else if (side === AdornmentSide.Right) {\n        inputAdornmentComponent = right;\n      }\n\n      const commonProps = {\n        key: side,\n        side: side,\n        testID: `${side}-${type}-adornment`,\n        isTextInputFocused,\n        paddingHorizontal\n      };\n\n      if (type === AdornmentType.Icon) {\n        return /*#__PURE__*/React.createElement(IconAdornment, _extends({}, commonProps, {\n          icon: inputAdornmentComponent,\n          topPosition: topPosition[AdornmentType.Icon],\n          forceFocus: forceFocus\n        }));\n      } else if (type === AdornmentType.Affix) {\n        return /*#__PURE__*/React.createElement(AffixAdornment, _extends({}, commonProps, {\n          topPosition: topPosition[AdornmentType.Affix][side],\n          affix: inputAdornmentComponent,\n          textStyle: textStyle,\n          onLayout: onAffixChange[side],\n          visible: visible,\n          maxFontSizeMultiplier: maxFontSizeMultiplier\n        }));\n      } else {\n        return null;\n      }\n    }));\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;","map":{"version":3,"mappings":"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","names":["React","TextInputIcon","IconAdornment","TextInputAffix","AffixAdornment","ADORNMENT_OFFSET","OUTLINED_INPUT_OFFSET","AdornmentSide","AdornmentType","InputMode","getAdornmentConfig","left","right","_ref","adornmentConfig","side","Left","adornment","Right","forEach","_ref2","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","_ref3","length","adornmentStyleAdjustmentForNativeInput","map","_ref4","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","_ref5","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","_ref6","inputAdornmentComponent","commonProps","key","testID","icon","affix","onLayout"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/TextInput/Adornment/TextInputAdornment.tsx"],"sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"module"}