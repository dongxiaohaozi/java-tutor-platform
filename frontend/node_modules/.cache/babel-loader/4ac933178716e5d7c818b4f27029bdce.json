{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { View, Animated, TouchableWithoutFeedback, StyleSheet, Platform } from 'react-native';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from '../../styles/overlay';\nimport Icon from '../Icon';\nimport Surface from '../Surface';\nimport Badge from '../Badge';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport useAnimatedValue from '../../utils/useAnimatedValue';\nimport useAnimatedValueArray from '../../utils/useAnimatedValueArray';\nimport useLayout from '../../utils/useLayout';\nimport useIsKeyboardShown from '../../utils/useIsKeyboardShown';\nimport BottomNavigationRouteScreen from './BottomNavigationRouteScreen';\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\n\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst BOTTOM_INSET = getBottomSpace();\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = _ref => {\n  let {\n    route: _0,\n    style,\n    children,\n    borderless,\n    centered,\n    rippleColor,\n    ...rest\n  } = _ref;\n  return TouchableRipple.supported ? /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n    disabled: rest.disabled || undefined,\n    borderless: borderless,\n    centered: centered,\n    rippleColor: rippleColor,\n    style: style\n  }), children) : /*#__PURE__*/React.createElement(TouchableWithoutFeedback, rest, /*#__PURE__*/React.createElement(View, {\n    style: style\n  }, children));\n};\n\nconst SceneComponent = /*#__PURE__*/React.memo(_ref2 => {\n  let {\n    component,\n    ...rest\n  } = _ref2;\n  return /*#__PURE__*/React.createElement(component, rest);\n});\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tabs](https://github.com/react-navigation/react-navigation/tree/main/packages/material-bottom-tabs) and consult [createMaterialBottomTabNavigator](https://reactnavigation.org/docs/material-bottom-tab-navigator/) documentation.\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst BottomNavigation = _ref3 => {\n  var _safeAreaInsets$left, _safeAreaInsets$right, _safeAreaInsets$botto;\n\n  let {\n    navigationState,\n    renderScene,\n    renderIcon,\n    renderLabel,\n    renderTouchable = props => /*#__PURE__*/React.createElement(Touchable, props),\n    getLabelText = _ref4 => {\n      let {\n        route\n      } = _ref4;\n      return route.title;\n    },\n    getBadge = _ref5 => {\n      let {\n        route\n      } = _ref5;\n      return route.badge;\n    },\n    getColor = _ref6 => {\n      let {\n        route\n      } = _ref6;\n      return route.color;\n    },\n    getAccessibilityLabel = _ref7 => {\n      let {\n        route\n      } = _ref7;\n      return route.accessibilityLabel;\n    },\n    getTestID = _ref8 => {\n      let {\n        route\n      } = _ref8;\n      return route.testID;\n    },\n    activeColor,\n    inactiveColor,\n    keyboardHidesNavigationBar = true,\n    barStyle,\n    labeled = true,\n    style,\n    theme,\n    sceneAnimationEnabled = false,\n    onTabPress,\n    onIndexChange,\n    shifting = navigationState.routes.length > 3,\n    safeAreaInsets,\n    labelMaxFontSizeMultiplier = 1\n  } = _ref3;\n  const {\n    scale\n  } = theme.animation;\n  const focusedKey = navigationState.routes[navigationState.index].key;\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n\n  const visibleAnim = useAnimatedValue(1);\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n\n  const tabsAnims = useAnimatedValueArray(navigationState.routes.map( // focused === 1, unfocused === 0\n  (_, i) => i === navigationState.index ? 1 : 0));\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n\n  const offsetsAnims = useAnimatedValueArray(navigationState.routes.map( // offscreen === 1, normal === 0\n  (_, i) => i === navigationState.index ? 0 : 1));\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n\n  const indexAnim = useAnimatedValue(navigationState.index);\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n\n  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n\n  const [layout, onLayout] = useLayout();\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n\n  const [loaded, setLoaded] = React.useState([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded(loaded => [...loaded, focusedKey]);\n  }\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n\n\n  const [keyboardVisible, setKeyboardVisible] = React.useState(false);\n  const handleKeyboardShow = React.useCallback(() => {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true\n    }).start();\n  }, [scale, visibleAnim]);\n  const handleKeyboardHide = React.useCallback(() => {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true\n    }).start(() => {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n  const animateToIndex = React.useCallback(index => {\n    // Reset the ripple to avoid glitch if it's currently animating\n    rippleAnim.setValue(MIN_RIPPLE_SCALE);\n    Animated.parallel([Animated.timing(rippleAnim, {\n      toValue: 1,\n      duration: shifting ? 400 * scale : 0,\n      useNativeDriver: true\n    }), ...navigationState.routes.map((_, i) => Animated.timing(tabsAnims[i], {\n      toValue: i === index ? 1 : 0,\n      duration: shifting ? 150 * scale : 0,\n      useNativeDriver: true\n    }))]).start(_ref9 => {\n      let {\n        finished\n      } = _ref9; // Workaround a bug in native animations where this is reset after first animation\n\n      tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0)); // Update the index to change bar's background color and then hide the ripple\n\n      indexAnim.setValue(index);\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      if (finished) {\n        // Position all inactive screens offscreen to save memory usage\n        // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n        offsetsAnims.forEach((offset, i) => {\n          if (i === index) {\n            offset.setValue(0);\n          } else {\n            offset.setValue(1);\n          }\n        });\n      }\n    });\n  }, [indexAnim, shifting, navigationState.routes, offsetsAnims, rippleAnim, scale, tabsAnims]);\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useIsKeyboardShown({\n    onShow: handleKeyboardShow,\n    onHide: handleKeyboardHide\n  });\n  const prevNavigationState = React.useRef();\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      var _prevNavigationState$;\n\n      if (i === navigationState.index || i === ((_prevNavigationState$ = prevNavigationState.current) === null || _prevNavigationState$ === void 0 ? void 0 : _prevNavigationState$.index)) {\n        offset.setValue(0);\n      }\n    });\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = index => {\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      }\n    };\n    onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const jumpTo = React.useCallback(key => {\n    const index = navigationState.routes.findIndex(route => route.key === key);\n    onIndexChange(index);\n  }, [navigationState.routes, onIndexChange]);\n  const {\n    routes\n  } = navigationState;\n  const {\n    colors,\n    dark: isDarkTheme,\n    mode\n  } = theme;\n  const {\n    backgroundColor: customBackground,\n    elevation = 4\n  } = StyleSheet.flatten(barStyle) || {};\n  const approxBackgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n  const backgroundColor = shifting ? indexAnim.interpolate({\n    inputRange: routes.map((_, i) => i),\n    // FIXME: does outputRange support ColorValue or just strings?\n    // @ts-expect-error\n    outputRange: routes.map(route => getColor({\n      route\n    }) || approxBackgroundColor)\n  }) : approxBackgroundColor;\n  const isDark = typeof approxBackgroundColor === 'string' ? !color(approxBackgroundColor).isLight() : true;\n  const textColor = isDark ? white : black;\n  const activeTintColor = typeof activeColor !== 'undefined' ? activeColor : textColor;\n  const inactiveTintColor = typeof inactiveColor !== 'undefined' ? inactiveColor : color(textColor).alpha(0.5).rgb().string();\n  const touchColor = color(activeColor || activeTintColor).alpha(0.12).rgb().string();\n  const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  const maxTabBarWidth = maxTabWidth * routes.length;\n  const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  const tabWidth = tabBarWidth / routes.length;\n  const rippleSize = layout.width / 4;\n  const insets = {\n    left: (_safeAreaInsets$left = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left) !== null && _safeAreaInsets$left !== void 0 ? _safeAreaInsets$left : 0,\n    right: (_safeAreaInsets$right = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right) !== null && _safeAreaInsets$right !== void 0 ? _safeAreaInsets$right : 0,\n    bottom: (_safeAreaInsets$botto = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom) !== null && _safeAreaInsets$botto !== void 0 ? _safeAreaInsets$botto : BOTTOM_INSET\n  };\n  return /*#__PURE__*/React.createElement(View, {\n    style: [styles.container, style]\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.content, {\n      backgroundColor: colors.background\n    }]\n  }, routes.map((route, index) => {\n    if (!loaded.includes(route.key)) {\n      // Don't render a screen if we've never navigated to it\n      return null;\n    }\n\n    const focused = navigationState.index === index;\n    const opacity = sceneAnimationEnabled ? tabsAnims[index] : focused ? 1 : 0;\n    const top = sceneAnimationEnabled ? offsetsAnims[index].interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, FAR_FAR_AWAY]\n    }) : focused ? 0 : FAR_FAR_AWAY;\n    return /*#__PURE__*/React.createElement(BottomNavigationRouteScreen, {\n      key: route.key,\n      pointerEvents: focused ? 'auto' : 'none',\n      accessibilityElementsHidden: !focused,\n      importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n      index: index,\n      visibility: opacity,\n      style: [StyleSheet.absoluteFill, {\n        opacity\n      }],\n      collapsable: false,\n      removeClippedSubviews: // On iOS, set removeClippedSubviews to true only when not focused\n      // This is an workaround for a bug where the clipped view never re-appears\n      Platform.OS === 'ios' ? navigationState.index !== index : true\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.content, {\n        top\n      }]\n    }, renderScene({\n      route,\n      jumpTo\n    })));\n  })), /*#__PURE__*/React.createElement(Surface, {\n    style: [styles.bar, keyboardHidesNavigationBar ? {\n      // When the keyboard is shown, slide down the navigation bar\n      transform: [{\n        translateY: visibleAnim.interpolate({\n          inputRange: [0, 1],\n          outputRange: [layout.height, 0]\n        })\n      }],\n      // Absolutely position the navigation bar so that the content is below it\n      // This is needed to avoid gap at bottom when the navigation bar is hidden\n      position: keyboardVisible ? 'absolute' : null\n    } : null, barStyle],\n    pointerEvents: layout.measured ? keyboardHidesNavigationBar && keyboardVisible ? 'none' : 'auto' : 'none',\n    onLayout: onLayout\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.barContent, {\n      backgroundColor\n    }]\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.items, {\n      marginBottom: insets.bottom,\n      marginHorizontal: Math.max(insets.left, insets.right),\n      maxWidth: maxTabBarWidth\n    }],\n    accessibilityRole: 'tablist'\n  }, shifting ? /*#__PURE__*/React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [styles.ripple, {\n      // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n      // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n      top: (BAR_HEIGHT - rippleSize) / 2,\n      left: tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n      height: rippleSize,\n      width: rippleSize,\n      borderRadius: rippleSize / 2,\n      backgroundColor: getColor({\n        route: routes[navigationState.index]\n      }),\n      transform: [{\n        // Scale to twice the size  to ensure it covers the whole navigation bar\n        scale: rippleAnim.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 8]\n        })\n      }],\n      opacity: rippleAnim.interpolate({\n        inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n        outputRange: [0, 0, 1, 1]\n      })\n    }]\n  }) : null, routes.map((route, index) => {\n    const focused = navigationState.index === index;\n    const active = tabsAnims[index]; // Scale the label up\n\n    const scale = labeled && shifting ? active.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0.5, 1]\n    }) : 1; // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n\n    const translateY = labeled ? shifting ? active.interpolate({\n      inputRange: [0, 1],\n      outputRange: [7, 0]\n    }) : 0 : 7; // We render the active icon and label on top of inactive ones and cross-fade them on change.\n    // This trick gives the illusion that we are animating between active and inactive colors.\n    // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n\n    const activeOpacity = active;\n    const inactiveOpacity = active.interpolate({\n      inputRange: [0, 1],\n      outputRange: [1, 0]\n    });\n    const badge = getBadge({\n      route\n    });\n    return renderTouchable({\n      key: route.key,\n      route,\n      borderless: true,\n      centered: true,\n      rippleColor: touchColor,\n      onPress: () => handleTabPress(index),\n      testID: getTestID({\n        route\n      }),\n      accessibilityLabel: getAccessibilityLabel({\n        route\n      }),\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n      accessibilityComponentType: 'button',\n      accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n      accessibilityState: {\n        selected: focused\n      },\n      style: styles.item,\n      children: /*#__PURE__*/React.createElement(View, {\n        pointerEvents: \"none\"\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.iconContainer, {\n          transform: [{\n            translateY\n          }]\n        }]\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.iconWrapper, {\n          opacity: activeOpacity\n        }]\n      }, renderIcon ? renderIcon({\n        route,\n        focused: true,\n        color: activeTintColor\n      }) : /*#__PURE__*/React.createElement(Icon, {\n        source: route.icon,\n        color: activeTintColor,\n        size: 24\n      })), /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.iconWrapper, {\n          opacity: inactiveOpacity\n        }]\n      }, renderIcon ? renderIcon({\n        route,\n        focused: false,\n        color: inactiveTintColor\n      }) : /*#__PURE__*/React.createElement(Icon, {\n        source: route.icon,\n        color: inactiveTintColor,\n        size: 24\n      })), /*#__PURE__*/React.createElement(View, {\n        style: [styles.badgeContainer, {\n          right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - 2\n        }]\n      }, typeof badge === 'boolean' ? /*#__PURE__*/React.createElement(Badge, {\n        visible: badge,\n        size: 8\n      }) : /*#__PURE__*/React.createElement(Badge, {\n        visible: badge != null,\n        size: 16\n      }, badge))), labeled ? /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.labelContainer, {\n          transform: [{\n            scale\n          }]\n        }]\n      }, /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.labelWrapper, {\n          opacity: activeOpacity\n        }]\n      }, renderLabel ? renderLabel({\n        route,\n        focused: true,\n        color: activeTintColor\n      }) : /*#__PURE__*/React.createElement(Text, {\n        maxFontSizeMultiplier: labelMaxFontSizeMultiplier,\n        style: [styles.label, {\n          color: activeTintColor\n        }]\n      }, getLabelText({\n        route\n      }))), shifting ? null : /*#__PURE__*/React.createElement(Animated.View, {\n        style: [styles.labelWrapper, {\n          opacity: inactiveOpacity\n        }]\n      }, renderLabel ? renderLabel({\n        route,\n        focused: false,\n        color: inactiveTintColor\n      }) : /*#__PURE__*/React.createElement(Text, {\n        maxFontSizeMultiplier: labelMaxFontSizeMultiplier,\n        selectable: false,\n        style: [styles.label, {\n          color: inactiveTintColor\n        }]\n      }, getLabelText({\n        route\n      })))) : /*#__PURE__*/React.createElement(View, {\n        style: styles.labelContainer\n      }))\n    });\n  })))));\n};\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\n\n\nBottomNavigation.SceneMap = scenes => {\n  return _ref10 => {\n    let {\n      route,\n      jumpTo\n    } = _ref10;\n    return /*#__PURE__*/React.createElement(SceneComponent, {\n      key: route.key,\n      component: scenes[route.key ? route.key : ''],\n      route: route,\n      jumpTo: jumpTo\n    });\n  };\n};\n\nexport default withTheme(BottomNavigation);\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  content: {\n    flex: 1\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  items: {\n    flexDirection: 'row',\n    ...(Platform.OS === 'web' ? {\n      width: '100%'\n    } : null)\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6\n  },\n  ripple: {\n    position: 'absolute'\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center'\n  },\n  iconWrapper: { ...StyleSheet.absoluteFillObject,\n    alignItems: 'center'\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2\n  },\n  labelWrapper: { ...StyleSheet.absoluteFillObject\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    height: BAR_HEIGHT,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web' ? {\n      whiteSpace: 'nowrap',\n      alignSelf: 'center'\n    } : null)\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2\n  }\n});","map":{"version":3,"mappings":"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","names":["React","View","Animated","TouchableWithoutFeedback","StyleSheet","Platform","getBottomSpace","color","overlay","Icon","Surface","Badge","TouchableRipple","Text","black","white","withTheme","useAnimatedValue","useAnimatedValueArray","useLayout","useIsKeyboardShown","BottomNavigationRouteScreen","MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","BOTTOM_INSET","FAR_FAR_AWAY","OS","Touchable","_ref","route","_0","style","children","borderless","centered","rippleColor","rest","supported","disabled","undefined","SceneComponent","memo","_ref2","component","createElement","BottomNavigation","_ref3","navigationState","renderScene","renderIcon","renderLabel","renderTouchable","props","getLabelText","_ref4","title","getBadge","_ref5","badge","getColor","_ref6","getAccessibilityLabel","_ref7","accessibilityLabel","getTestID","_ref8","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","theme","sceneAnimationEnabled","onTabPress","onIndexChange","shifting","routes","length","safeAreaInsets","labelMaxFontSizeMultiplier","scale","animation","focusedKey","index","key","visibleAnim","tabsAnims","map","_","i","offsetsAnims","indexAnim","rippleAnim","layout","onLayout","loaded","setLoaded","useState","includes","keyboardVisible","setKeyboardVisible","handleKeyboardShow","useCallback","timing","toValue","duration","useNativeDriver","start","handleKeyboardHide","animateToIndex","setValue","parallel","_ref9","finished","tab","forEach","offset","useEffect","onShow","onHide","prevNavigationState","useRef","current","_prevNavigationState$","handleTabPress","event","defaultPrevented","preventDefault","jumpTo","findIndex","colors","dark","isDarkTheme","mode","backgroundColor","customBackground","elevation","flatten","approxBackgroundColor","surface","primary","interpolate","inputRange","outputRange","isDark","isLight","textColor","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","min","width","tabWidth","rippleSize","insets","left","right","bottom","styles","container","content","background","focused","opacity","top","pointerEvents","accessibilityElementsHidden","importantForAccessibility","visibility","absoluteFill","collapsable","removeClippedSubviews","bar","transform","translateY","height","position","measured","barContent","items","marginBottom","marginHorizontal","max","maxWidth","accessibilityRole","ripple","borderRadius","active","activeOpacity","inactiveOpacity","onPress","accessibilityTraits","accessibilityComponentType","accessibilityState","selected","item","iconContainer","iconWrapper","source","icon","size","badgeContainer","String","visible","labelContainer","labelWrapper","maxFontSizeMultiplier","label","selectable","SceneMap","scenes","_ref10","create","flex","overflow","alignItems","flexDirection","paddingVertical","marginTop","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/BottomNavigation/BottomNavigation.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  ViewStyle,\n} from 'react-native';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from '../../styles/overlay';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport Badge from '../Badge';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport useAnimatedValue from '../../utils/useAnimatedValue';\nimport useAnimatedValueArray from '../../utils/useAnimatedValueArray';\nimport useLayout from '../../utils/useLayout';\nimport useIsKeyboardShown from '../../utils/useIsKeyboardShown';\nimport BottomNavigationRouteScreen from './BottomNavigationRouteScreen';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\n   *\n   * By default, this is `true` when you have more than 3 tabs.\n   * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Safe area insets for the tab bar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * The bottom insets for iOS is added by default. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Style for the bottom navigation bar.  You can pass a custom background color here:\n   *\n   * ```js\n   * barStyle={{ backgroundColor: '#694fad' }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  /**\n   * Specifies the largest possible scale a label font can reach.\n   */\n  labelMaxFontSizeMultiplier?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst BOTTOM_INSET = getBottomSpace();\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRipple.supported ? (\n    <TouchableRipple\n      {...rest}\n      disabled={rest.disabled || undefined}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nconst SceneComponent = React.memo(({ component, ...rest }: any) =>\n  React.createElement(component, rest)\n);\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tabs](https://github.com/react-navigation/react-navigation/tree/main/packages/material-bottom-tabs) and consult [createMaterialBottomTabNavigator](https://reactnavigation.org/docs/material-bottom-tab-navigator/) documentation.\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst BottomNavigation = ({\n  navigationState,\n  renderScene,\n  renderIcon,\n  renderLabel,\n  renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n  getLabelText = ({ route }: { route: Route }) => route.title,\n  getBadge = ({ route }: { route: Route }) => route.badge,\n  getColor = ({ route }: { route: Route }) => route.color,\n  getAccessibilityLabel = ({ route }: { route: Route }) =>\n    route.accessibilityLabel,\n  getTestID = ({ route }: { route: Route }) => route.testID,\n  activeColor,\n  inactiveColor,\n  keyboardHidesNavigationBar = true,\n  barStyle,\n  labeled = true,\n  style,\n  theme,\n  sceneAnimationEnabled = false,\n  onTabPress,\n  onIndexChange,\n  shifting = navigationState.routes.length > 3,\n  safeAreaInsets,\n  labelMaxFontSizeMultiplier = 1,\n}: Props) => {\n  const { scale } = theme.animation;\n\n  const focusedKey = navigationState.routes[navigationState.index].key;\n\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  const visibleAnim = useAnimatedValue(1);\n\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n  const tabsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // focused === 1, unfocused === 0\n      (_, i) => (i === navigationState.index ? 1 : 0)\n    )\n  );\n\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  const offsetsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // offscreen === 1, normal === 0\n      (_, i) => (i === navigationState.index ? 0 : 1)\n    )\n  );\n\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  const indexAnim = useAnimatedValue(navigationState.index);\n\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  const [layout, onLayout] = useLayout();\n\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  const [loaded, setLoaded] = React.useState<string[]>([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded((loaded) => [...loaded, focusedKey]);\n  }\n\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n  const [keyboardVisible, setKeyboardVisible] = React.useState(false);\n\n  const handleKeyboardShow = React.useCallback(() => {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [scale, visibleAnim]);\n\n  const handleKeyboardHide = React.useCallback(() => {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n\n  const animateToIndex = React.useCallback(\n    (index: number) => {\n      // Reset the ripple to avoid glitch if it's currently animating\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([\n        Animated.timing(rippleAnim, {\n          toValue: 1,\n          duration: shifting ? 400 * scale : 0,\n          useNativeDriver: true,\n        }),\n        ...navigationState.routes.map((_, i) =>\n          Animated.timing(tabsAnims[i], {\n            toValue: i === index ? 1 : 0,\n            duration: shifting ? 150 * scale : 0,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start(({ finished }) => {\n        // Workaround a bug in native animations where this is reset after first animation\n        tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n        // Update the index to change bar's background color and then hide the ripple\n        indexAnim.setValue(index);\n        rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          // Position all inactive screens offscreen to save memory usage\n          // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n          offsetsAnims.forEach((offset, i) => {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    },\n    [\n      indexAnim,\n      shifting,\n      navigationState.routes,\n      offsetsAnims,\n      rippleAnim,\n      scale,\n      tabsAnims,\n    ]\n  );\n\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useIsKeyboardShown({\n    onShow: handleKeyboardShow,\n    onHide: handleKeyboardHide,\n  });\n\n  const prevNavigationState = React.useRef<NavigationState>();\n\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      if (\n        i === navigationState.index ||\n        i === prevNavigationState.current?.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = (index: number) => {\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const jumpTo = React.useCallback(\n    (key: string) => {\n      const index = navigationState.routes.findIndex(\n        (route) => route.key === key\n      );\n\n      onIndexChange(index);\n    },\n    [navigationState.routes, onIndexChange]\n  );\n\n  const { routes } = navigationState;\n  const { colors, dark: isDarkTheme, mode } = theme;\n\n  const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n    StyleSheet.flatten(barStyle) || {};\n\n  const approxBackgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n\n  const backgroundColor = shifting\n    ? indexAnim.interpolate({\n        inputRange: routes.map((_, i) => i),\n        // FIXME: does outputRange support ColorValue or just strings?\n        // @ts-expect-error\n        outputRange: routes.map(\n          (route) => getColor({ route }) || approxBackgroundColor\n        ),\n      })\n    : approxBackgroundColor;\n\n  const isDark =\n    typeof approxBackgroundColor === 'string'\n      ? !color(approxBackgroundColor).isLight()\n      : true;\n\n  const textColor = isDark ? white : black;\n  const activeTintColor =\n    typeof activeColor !== 'undefined' ? activeColor : textColor;\n  const inactiveTintColor =\n    typeof inactiveColor !== 'undefined'\n      ? inactiveColor\n      : color(textColor).alpha(0.5).rgb().string();\n\n  const touchColor = color(activeColor || activeTintColor)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  const maxTabBarWidth = maxTabWidth * routes.length;\n\n  const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  const tabWidth = tabBarWidth / routes.length;\n\n  const rippleSize = layout.width / 4;\n\n  const insets = {\n    left: safeAreaInsets?.left ?? 0,\n    right: safeAreaInsets?.right ?? 0,\n    bottom: safeAreaInsets?.bottom ?? BOTTOM_INSET,\n  };\n\n  return (\n    <View style={[styles.container, style]}>\n      <View style={[styles.content, { backgroundColor: colors.background }]}>\n        {routes.map((route, index) => {\n          if (!loaded.includes(route.key)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const focused = navigationState.index === index;\n\n          const opacity = sceneAnimationEnabled\n            ? tabsAnims[index]\n            : focused\n            ? 1\n            : 0;\n\n          const top = sceneAnimationEnabled\n            ? offsetsAnims[index].interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, FAR_FAR_AWAY],\n              })\n            : focused\n            ? 0\n            : FAR_FAR_AWAY;\n\n          return (\n            <BottomNavigationRouteScreen\n              key={route.key}\n              pointerEvents={focused ? 'auto' : 'none'}\n              accessibilityElementsHidden={!focused}\n              importantForAccessibility={\n                focused ? 'auto' : 'no-hide-descendants'\n              }\n              index={index}\n              visibility={opacity}\n              style={[StyleSheet.absoluteFill, { opacity }]}\n              collapsable={false}\n              removeClippedSubviews={\n                // On iOS, set removeClippedSubviews to true only when not focused\n                // This is an workaround for a bug where the clipped view never re-appears\n                Platform.OS === 'ios' ? navigationState.index !== index : true\n              }\n            >\n              <Animated.View style={[styles.content, { top }]}>\n                {renderScene({ route, jumpTo })}\n              </Animated.View>\n            </BottomNavigationRouteScreen>\n          );\n        })}\n      </View>\n      <Surface\n        style={\n          [\n            styles.bar,\n            keyboardHidesNavigationBar\n              ? {\n                  // When the keyboard is shown, slide down the navigation bar\n                  transform: [\n                    {\n                      translateY: visibleAnim.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [layout.height, 0],\n                      }),\n                    },\n                  ],\n                  // Absolutely position the navigation bar so that the content is below it\n                  // This is needed to avoid gap at bottom when the navigation bar is hidden\n                  position: keyboardVisible ? 'absolute' : null,\n                }\n              : null,\n            barStyle,\n          ] as StyleProp<ViewStyle>\n        }\n        pointerEvents={\n          layout.measured\n            ? keyboardHidesNavigationBar && keyboardVisible\n              ? 'none'\n              : 'auto'\n            : 'none'\n        }\n        onLayout={onLayout}\n      >\n        <Animated.View style={[styles.barContent, { backgroundColor }]}>\n          <View\n            style={[\n              styles.items,\n              {\n                marginBottom: insets.bottom,\n                marginHorizontal: Math.max(insets.left, insets.right),\n                maxWidth: maxTabBarWidth,\n              },\n            ]}\n            accessibilityRole={'tablist'}\n          >\n            {shifting ? (\n              <Animated.View\n                pointerEvents=\"none\"\n                style={[\n                  styles.ripple,\n                  {\n                    // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                    // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                    top: (BAR_HEIGHT - rippleSize) / 2,\n                    left:\n                      tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n                    height: rippleSize,\n                    width: rippleSize,\n                    borderRadius: rippleSize / 2,\n                    backgroundColor: getColor({\n                      route: routes[navigationState.index],\n                    }),\n                    transform: [\n                      {\n                        // Scale to twice the size  to ensure it covers the whole navigation bar\n                        scale: rippleAnim.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [0, 8],\n                        }),\n                      },\n                    ],\n                    opacity: rippleAnim.interpolate({\n                      inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                      outputRange: [0, 0, 1, 1],\n                    }),\n                  },\n                ]}\n              />\n            ) : null}\n            {routes.map((route, index) => {\n              const focused = navigationState.index === index;\n              const active = tabsAnims[index];\n\n              // Scale the label up\n              const scale =\n                labeled && shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [0.5, 1],\n                    })\n                  : 1;\n\n              // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n              const translateY = labeled\n                ? shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [7, 0],\n                    })\n                  : 0\n                : 7;\n\n              // We render the active icon and label on top of inactive ones and cross-fade them on change.\n              // This trick gives the illusion that we are animating between active and inactive colors.\n              // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n              const activeOpacity = active;\n              const inactiveOpacity = active.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 0],\n              });\n\n              const badge = getBadge({ route });\n\n              return renderTouchable({\n                key: route.key,\n                route,\n                borderless: true,\n                centered: true,\n                rippleColor: touchColor,\n                onPress: () => handleTabPress(index),\n                testID: getTestID({ route }),\n                accessibilityLabel: getAccessibilityLabel({ route }),\n                // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                accessibilityTraits: focused\n                  ? ['button', 'selected']\n                  : 'button',\n                accessibilityComponentType: 'button',\n                accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n                accessibilityState: { selected: focused },\n                style: styles.item,\n                children: (\n                  <View pointerEvents=\"none\">\n                    <Animated.View\n                      style={[\n                        styles.iconContainer,\n                        { transform: [{ translateY }] },\n                      ]}\n                    >\n                      <Animated.View\n                        style={[styles.iconWrapper, { opacity: activeOpacity }]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: true,\n                            color: activeTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={activeTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <Animated.View\n                        style={[\n                          styles.iconWrapper,\n                          { opacity: inactiveOpacity },\n                        ]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: false,\n                            color: inactiveTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={inactiveTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <View\n                        style={[\n                          styles.badgeContainer,\n                          {\n                            right:\n                              (badge != null && typeof badge !== 'boolean'\n                                ? String(badge).length * -2\n                                : 0) - 2,\n                          },\n                        ]}\n                      >\n                        {typeof badge === 'boolean' ? (\n                          <Badge visible={badge} size={8} />\n                        ) : (\n                          <Badge visible={badge != null} size={16}>\n                            {badge}\n                          </Badge>\n                        )}\n                      </View>\n                    </Animated.View>\n                    {labeled ? (\n                      <Animated.View\n                        style={[\n                          styles.labelContainer,\n                          { transform: [{ scale }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.labelWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderLabel ? (\n                            renderLabel({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Text\n                              maxFontSizeMultiplier={labelMaxFontSizeMultiplier}\n                              style={[styles.label, { color: activeTintColor }]}\n                            >\n                              {getLabelText({ route })}\n                            </Text>\n                          )}\n                        </Animated.View>\n                        {shifting ? null : (\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: inactiveOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: false,\n                                color: inactiveTintColor,\n                              })\n                            ) : (\n                              <Text\n                                maxFontSizeMultiplier={\n                                  labelMaxFontSizeMultiplier\n                                }\n                                selectable={false}\n                                style={[\n                                  styles.label,\n                                  { color: inactiveTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                        )}\n                      </Animated.View>\n                    ) : (\n                      <View style={styles.labelContainer} />\n                    )}\n                  </View>\n                ),\n              });\n            })}\n          </View>\n        </Animated.View>\n      </Surface>\n    </View>\n  );\n};\n\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\nBottomNavigation.SceneMap = (scenes: {\n  [key: string]: React.ComponentType<{\n    route: Route;\n    jumpTo: (key: string) => void;\n  }>;\n}) => {\n  return ({\n    route,\n    jumpTo,\n  }: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => (\n    <SceneComponent\n      key={route.key}\n      component={scenes[route.key ? route.key : '']}\n      route={route}\n      jumpTo={jumpTo}\n    />\n  );\n};\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    ...(Platform.OS === 'web'\n      ? {\n          width: '100%',\n        }\n      : null),\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    height: BAR_HEIGHT,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}