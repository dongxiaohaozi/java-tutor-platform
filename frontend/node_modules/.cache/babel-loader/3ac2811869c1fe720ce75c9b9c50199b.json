{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Platform, StyleSheet, Animated, BackHandler, Dimensions, Easing, I18nManager, TouchableWithoutFeedback, View, ScrollView, findNodeHandle } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport Portal from '../Portal/Portal';\nimport Surface from '../Surface';\nimport MenuItem from './MenuItem';\nimport { APPROX_STATUSBAR_HEIGHT } from '../../constants';\nimport { addEventListener } from '../../utils/addEventListener'; // Minimum padding between the edge of the screen and the menu\n\nconst SCREEN_INDENT = 8; // From https://material.io/design/motion/speed.html#duration\n\nconst ANIMATION_DURATION = 250; // From the 'Standard easing' section of https://material.io/design/motion/speed.html#easing\n\nconst EASING = Easing.bezier(0.4, 0, 0.2, 1);\n/**\n * Menus display a list of choices on temporary elevated surfaces. Their placement varies based on the element that opens them.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/menu-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/menu-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Menu, Divider, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const openMenu = () => setVisible(true);\n *\n *   const closeMenu = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <View\n *         style={{\n *           paddingTop: 50,\n *           flexDirection: 'row',\n *           justifyContent: 'center',\n *         }}>\n *         <Menu\n *           visible={visible}\n *           onDismiss={closeMenu}\n *           anchor={<Button onPress={openMenu}>Show menu</Button>}>\n *           <Menu.Item onPress={() => {}} title=\"Item 1\" />\n *           <Menu.Item onPress={() => {}} title=\"Item 2\" />\n *           <Divider />\n *           <Menu.Item onPress={() => {}} title=\"Item 3\" />\n *         </Menu>\n *       </View>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nclass Menu extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    _defineProperty(this, \"state\", {\n      rendered: this.props.visible,\n      top: 0,\n      left: 0,\n      menuLayout: {\n        width: 0,\n        height: 0\n      },\n      anchorLayout: {\n        width: 0,\n        height: 0\n      },\n      opacityAnimation: new Animated.Value(0),\n      scaleAnimation: new Animated.ValueXY({\n        x: 0,\n        y: 0\n      })\n    });\n\n    _defineProperty(this, \"anchor\", null);\n\n    _defineProperty(this, \"menu\", null);\n\n    _defineProperty(this, \"backHandlerSubscription\", void 0);\n\n    _defineProperty(this, \"dimensionsSubscription\", void 0);\n\n    _defineProperty(this, \"isCoordinate\", anchor => ! /*#__PURE__*/React.isValidElement(anchor) && typeof (anchor === null || anchor === void 0 ? void 0 : anchor.x) === 'number' && typeof (anchor === null || anchor === void 0 ? void 0 : anchor.y) === 'number');\n\n    _defineProperty(this, \"measureMenuLayout\", () => new Promise(resolve => {\n      if (this.menu) {\n        this.menu.measureInWindow((x, y, width, height) => {\n          resolve({\n            x,\n            y,\n            width,\n            height\n          });\n        });\n      }\n    }));\n\n    _defineProperty(this, \"measureAnchorLayout\", () => new Promise(resolve => {\n      const {\n        anchor\n      } = this.props;\n\n      if (this.isCoordinate(anchor)) {\n        resolve({\n          x: anchor.x,\n          y: anchor.y,\n          width: 0,\n          height: 0\n        });\n        return;\n      }\n\n      if (this.anchor) {\n        this.anchor.measureInWindow((x, y, width, height) => {\n          resolve({\n            x,\n            y,\n            width,\n            height\n          });\n        });\n      }\n    }));\n\n    _defineProperty(this, \"updateVisibility\", async () => {\n      // Menu is rendered in Portal, which updates items asynchronously\n      // We need to do the same here so that the ref is up-to-date\n      await Promise.resolve();\n\n      if (this.props.visible) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    });\n\n    _defineProperty(this, \"isBrowser\", () => Platform.OS === 'web' && 'document' in global);\n\n    _defineProperty(this, \"focusFirstDOMNode\", el => {\n      if (el && this.isBrowser()) {\n        // When in the browser, we want to focus the first focusable item on toggle\n        // For example, when menu is shown, focus the first item in the menu\n        // And when menu is dismissed, send focus back to the button to resume tabbing\n        const node = findNodeHandle(el);\n        const focusableNode = node.querySelector( // This is a rough list of selectors that can be focused\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n        focusableNode === null || focusableNode === void 0 ? void 0 : focusableNode.focus();\n      }\n    });\n\n    _defineProperty(this, \"handleDismiss\", () => {\n      if (this.props.visible) {\n        this.props.onDismiss();\n      }\n\n      return true;\n    });\n\n    _defineProperty(this, \"handleKeypress\", e => {\n      if (e.key === 'Escape') {\n        this.props.onDismiss();\n      }\n    });\n\n    _defineProperty(this, \"attachListeners\", () => {\n      this.backHandlerSubscription = addEventListener(BackHandler, 'hardwareBackPress', this.handleDismiss);\n      this.dimensionsSubscription = addEventListener(Dimensions, 'change', this.handleDismiss);\n      this.isBrowser() && document.addEventListener('keyup', this.handleKeypress);\n    });\n\n    _defineProperty(this, \"removeListeners\", () => {\n      var _this$backHandlerSubs, _this$dimensionsSubsc;\n\n      (_this$backHandlerSubs = this.backHandlerSubscription) === null || _this$backHandlerSubs === void 0 ? void 0 : _this$backHandlerSubs.remove();\n      (_this$dimensionsSubsc = this.dimensionsSubscription) === null || _this$dimensionsSubsc === void 0 ? void 0 : _this$dimensionsSubsc.remove();\n      this.isBrowser() && document.removeEventListener('keyup', this.handleKeypress);\n    });\n\n    _defineProperty(this, \"show\", async () => {\n      const windowLayout = Dimensions.get('window');\n      const [menuLayout, anchorLayout] = await Promise.all([this.measureMenuLayout(), this.measureAnchorLayout()]); // When visible is true for first render\n      // native views can be still not rendered and\n      // measureMenuLayout/measureAnchorLayout functions\n      // return wrong values e.g { x:0, y: 0, width: 0, height: 0 }\n      // so we have to wait until views are ready\n      // and rerun this function to show menu\n\n      if (!windowLayout.width || !windowLayout.height || !menuLayout.width || !menuLayout.height || !anchorLayout.width && !this.isCoordinate(this.props.anchor) || !anchorLayout.height && !this.isCoordinate(this.props.anchor)) {\n        requestAnimationFrame(this.show);\n        return;\n      }\n\n      this.setState(() => ({\n        left: anchorLayout.x,\n        top: anchorLayout.y,\n        anchorLayout: {\n          height: anchorLayout.height,\n          width: anchorLayout.width\n        },\n        menuLayout: {\n          width: menuLayout.width,\n          height: menuLayout.height\n        }\n      }), () => {\n        this.attachListeners();\n        const {\n          animation\n        } = this.props.theme;\n        Animated.parallel([Animated.timing(this.state.scaleAnimation, {\n          toValue: {\n            x: menuLayout.width,\n            y: menuLayout.height\n          },\n          duration: ANIMATION_DURATION * animation.scale,\n          easing: EASING,\n          useNativeDriver: true\n        }), Animated.timing(this.state.opacityAnimation, {\n          toValue: 1,\n          duration: ANIMATION_DURATION * animation.scale,\n          easing: EASING,\n          useNativeDriver: true\n        })]).start(_ref => {\n          let {\n            finished\n          } = _ref;\n\n          if (finished) {\n            this.focusFirstDOMNode(this.menu);\n          }\n        });\n      });\n    });\n\n    _defineProperty(this, \"hide\", () => {\n      this.removeListeners();\n      const {\n        animation\n      } = this.props.theme;\n      Animated.timing(this.state.opacityAnimation, {\n        toValue: 0,\n        duration: ANIMATION_DURATION * animation.scale,\n        easing: EASING,\n        useNativeDriver: true\n      }).start(_ref2 => {\n        let {\n          finished\n        } = _ref2;\n\n        if (finished) {\n          this.setState({\n            menuLayout: {\n              width: 0,\n              height: 0\n            },\n            rendered: false\n          });\n          this.state.scaleAnimation.setValue({\n            x: 0,\n            y: 0\n          });\n          this.focusFirstDOMNode(this.anchor);\n        }\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.visible && !prevState.rendered) {\n      return {\n        rendered: true\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.visible !== this.props.visible) {\n      this.updateVisibility();\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  render() {\n    const {\n      visible,\n      anchor,\n      contentStyle,\n      style,\n      children,\n      theme,\n      statusBarHeight,\n      onDismiss,\n      overlayAccessibilityLabel\n    } = this.props;\n    const {\n      rendered,\n      menuLayout,\n      anchorLayout,\n      opacityAnimation,\n      scaleAnimation\n    } = this.state;\n    let {\n      left,\n      top\n    } = this.state; // I don't know why but on Android measure function is wrong by 24\n\n    const additionalVerticalValue = Platform.select({\n      android: statusBarHeight,\n      default: 0\n    });\n    const scaleTransforms = [{\n      scaleX: scaleAnimation.x.interpolate({\n        inputRange: [0, menuLayout.width],\n        outputRange: [0, 1]\n      })\n    }, {\n      scaleY: scaleAnimation.y.interpolate({\n        inputRange: [0, menuLayout.height],\n        outputRange: [0, 1]\n      })\n    }];\n    const windowLayout = Dimensions.get('window'); // We need to translate menu while animating scale to imitate transform origin for scale animation\n\n    const positionTransforms = []; // Check if menu fits horizontally and if not align it to right.\n\n    if (left <= windowLayout.width - menuLayout.width - SCREEN_INDENT) {\n      positionTransforms.push({\n        translateX: scaleAnimation.x.interpolate({\n          inputRange: [0, menuLayout.width],\n          outputRange: [-(menuLayout.width / 2), 0]\n        })\n      }); // Check if menu position has enough space from left side\n\n      if (left < SCREEN_INDENT) {\n        left = SCREEN_INDENT;\n      }\n    } else {\n      positionTransforms.push({\n        translateX: scaleAnimation.x.interpolate({\n          inputRange: [0, menuLayout.width],\n          outputRange: [menuLayout.width / 2, 0]\n        })\n      });\n      left += anchorLayout.width - menuLayout.width;\n      const right = left + menuLayout.width; // Check if menu position has enough space from right side\n\n      if (right > windowLayout.width - SCREEN_INDENT) {\n        left = windowLayout.width - SCREEN_INDENT - menuLayout.width;\n      }\n    } // If the menu is larger than available vertical space,\n    // calculate the height of scrollable view\n\n\n    let scrollableMenuHeight = 0; // Check if the menu should be scrollable\n\n    if ( // Check if the menu overflows from bottom side\n    top >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue && // And bottom side of the screen has more space than top side\n    top <= windowLayout.height - top) {\n      // Scrollable menu should be below the anchor (expands downwards)\n      scrollableMenuHeight = windowLayout.height - top - SCREEN_INDENT - additionalVerticalValue;\n    } else if ( // Check if the menu overflows from bottom side\n    top >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue && // And top side of the screen has more space than bottom side\n    top >= windowLayout.height - top && // And menu overflows from top side\n    top <= menuLayout.height - anchorLayout.height + SCREEN_INDENT - additionalVerticalValue) {\n      // Scrollable menu should be above the anchor (expands upwards)\n      scrollableMenuHeight = top + anchorLayout.height - SCREEN_INDENT + additionalVerticalValue;\n    } // Scrollable menu max height\n\n\n    scrollableMenuHeight = scrollableMenuHeight > windowLayout.height - 2 * SCREEN_INDENT ? windowLayout.height - 2 * SCREEN_INDENT : scrollableMenuHeight; // Menu is typically positioned below the element that generates it\n    // So first check if it fits below the anchor (expands downwards)\n\n    if ( // Check if menu fits vertically\n    top <= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue || // Or if the menu overflows from bottom side\n    top >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue && // And bottom side of the screen has more space than top side\n    top <= windowLayout.height - top) {\n      positionTransforms.push({\n        translateY: scaleAnimation.y.interpolate({\n          inputRange: [0, menuLayout.height],\n          outputRange: [-((scrollableMenuHeight || menuLayout.height) / 2), 0]\n        })\n      }); // Check if menu position has enough space from top side\n\n      if (top < SCREEN_INDENT) {\n        top = SCREEN_INDENT;\n      }\n    } else {\n      positionTransforms.push({\n        translateY: scaleAnimation.y.interpolate({\n          inputRange: [0, menuLayout.height],\n          outputRange: [(scrollableMenuHeight || menuLayout.height) / 2, 0]\n        })\n      });\n      top += anchorLayout.height - (scrollableMenuHeight || menuLayout.height);\n      const bottom = top + (scrollableMenuHeight || menuLayout.height) + additionalVerticalValue; // Check if menu position has enough space from bottom side\n\n      if (bottom > windowLayout.height - SCREEN_INDENT) {\n        top = scrollableMenuHeight === windowLayout.height - 2 * SCREEN_INDENT ? -SCREEN_INDENT * 2 : windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue;\n      }\n    }\n\n    const shadowMenuContainerStyle = {\n      opacity: opacityAnimation,\n      transform: scaleTransforms,\n      borderRadius: theme.roundness,\n      ...(scrollableMenuHeight ? {\n        height: scrollableMenuHeight\n      } : {})\n    };\n    const positionStyle = {\n      top: this.isCoordinate(anchor) ? top : top + additionalVerticalValue,\n      ...(I18nManager.isRTL ? {\n        right: left\n      } : {\n        left\n      })\n    };\n    return /*#__PURE__*/React.createElement(View, {\n      ref: ref => {\n        this.anchor = ref;\n      },\n      collapsable: false\n    }, this.isCoordinate(anchor) ? null : anchor, rendered ? /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {\n      accessibilityLabel: overlayAccessibilityLabel,\n      accessibilityRole: \"button\",\n      onPress: onDismiss\n    }, /*#__PURE__*/React.createElement(View, {\n      style: StyleSheet.absoluteFill\n    })), /*#__PURE__*/React.createElement(View, {\n      ref: ref => {\n        this.menu = ref;\n      },\n      collapsable: false,\n      accessibilityViewIsModal: visible,\n      style: [styles.wrapper, positionStyle, style],\n      pointerEvents: visible ? 'box-none' : 'none',\n      onAccessibilityEscape: onDismiss\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: {\n        transform: positionTransforms\n      }\n    }, /*#__PURE__*/React.createElement(Surface, {\n      style: [styles.shadowMenuContainer, shadowMenuContainerStyle, contentStyle]\n    }, scrollableMenuHeight && /*#__PURE__*/React.createElement(ScrollView, null, children) || /*#__PURE__*/React.createElement(React.Fragment, null, children))))) : null);\n  }\n\n}\n\n_defineProperty(Menu, \"Item\", MenuItem);\n\n_defineProperty(Menu, \"defaultProps\", {\n  statusBarHeight: APPROX_STATUSBAR_HEIGHT,\n  overlayAccessibilityLabel: 'Close menu'\n});\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute'\n  },\n  shadowMenuContainer: {\n    opacity: 0,\n    paddingVertical: 8,\n    elevation: 8\n  }\n});\nexport default withTheme(Menu);","map":{"version":3,"mappings":"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","names":["React","Platform","StyleSheet","Animated","BackHandler","Dimensions","Easing","I18nManager","TouchableWithoutFeedback","View","ScrollView","findNodeHandle","withTheme","Portal","Surface","MenuItem","APPROX_STATUSBAR_HEIGHT","addEventListener","SCREEN_INDENT","ANIMATION_DURATION","EASING","bezier","Menu","Component","constructor","_defineProperty","rendered","props","visible","top","left","menuLayout","width","height","anchorLayout","opacityAnimation","Value","scaleAnimation","ValueXY","x","y","anchor","isValidElement","Promise","resolve","menu","measureInWindow","isCoordinate","show","hide","OS","global","el","isBrowser","node","focusableNode","querySelector","focus","onDismiss","e","key","backHandlerSubscription","handleDismiss","dimensionsSubscription","document","handleKeypress","remove","removeEventListener","windowLayout","get","all","measureMenuLayout","measureAnchorLayout","requestAnimationFrame","setState","attachListeners","animation","theme","parallel","timing","state","toValue","duration","scale","easing","useNativeDriver","start","_ref","finished","focusFirstDOMNode","removeListeners","_ref2","setValue","getDerivedStateFromProps","nextProps","prevState","componentDidUpdate","prevProps","updateVisibility","componentWillUnmount","render","contentStyle","style","children","statusBarHeight","overlayAccessibilityLabel","additionalVerticalValue","select","android","default","scaleTransforms","scaleX","interpolate","inputRange","outputRange","scaleY","positionTransforms","push","translateX","right","scrollableMenuHeight","translateY","bottom","shadowMenuContainerStyle","opacity","transform","borderRadius","roundness","positionStyle","isRTL","ref","collapsable","accessibilityLabel","accessibilityRole","onPress","absoluteFill","accessibilityViewIsModal","styles","wrapper","pointerEvents","onAccessibilityEscape","shadowMenuContainer","Fragment","create","position","paddingVertical","elevation"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/Menu/Menu.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Animated,\n  BackHandler,\n  Dimensions,\n  Easing,\n  I18nManager,\n  LayoutRectangle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  ScrollView,\n  findNodeHandle,\n  NativeEventSubscription,\n} from 'react-native';\n\nimport { withTheme } from '../../core/theming';\nimport type { $Omit } from '../../types';\nimport Portal from '../Portal/Portal';\nimport Surface from '../Surface';\nimport MenuItem from './MenuItem';\nimport { APPROX_STATUSBAR_HEIGHT } from '../../constants';\nimport { addEventListener } from '../../utils/addEventListener';\n\ntype Props = {\n  /**\n   * Whether the Menu is currently visible.\n   */\n  visible: boolean;\n  /**\n   * The anchor to open the menu from. In most cases, it will be a button that opens the menu.\n   */\n  anchor: React.ReactNode | { x: number; y: number };\n  /**\n   * Extra margin to add at the top of the menu to account for translucent status bar on Android.\n   * If you are using Expo, we assume translucent status bar and set a height for status bar automatically.\n   * Pass `0` or a custom value to and customize it.\n   * This is automatically handled on iOS.\n   */\n  statusBarHeight?: number;\n  /**\n   * Callback called when Menu is dismissed. The `visible` prop needs to be updated when this is called.\n   */\n  onDismiss: () => void;\n  /**\n   * Accessibility label for the overlay. This is read by the screen reader when the user taps outside the menu.\n   */\n  overlayAccessibilityLabel?: string;\n  /**\n   * Content of the `Menu`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style of menu's inner content.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype Layout = $Omit<$Omit<LayoutRectangle, 'x'>, 'y'>;\n\ntype State = {\n  rendered: boolean;\n  top: number;\n  left: number;\n  menuLayout: Layout;\n  anchorLayout: Layout;\n  opacityAnimation: Animated.Value;\n  scaleAnimation: Animated.ValueXY;\n};\n\n// Minimum padding between the edge of the screen and the menu\nconst SCREEN_INDENT = 8;\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 250;\n// From the 'Standard easing' section of https://material.io/design/motion/speed.html#easing\nconst EASING = Easing.bezier(0.4, 0, 0.2, 1);\n\n/**\n * Menus display a list of choices on temporary elevated surfaces. Their placement varies based on the element that opens them.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/menu-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/menu-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Menu, Divider, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const openMenu = () => setVisible(true);\n *\n *   const closeMenu = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <View\n *         style={{\n *           paddingTop: 50,\n *           flexDirection: 'row',\n *           justifyContent: 'center',\n *         }}>\n *         <Menu\n *           visible={visible}\n *           onDismiss={closeMenu}\n *           anchor={<Button onPress={openMenu}>Show menu</Button>}>\n *           <Menu.Item onPress={() => {}} title=\"Item 1\" />\n *           <Menu.Item onPress={() => {}} title=\"Item 2\" />\n *           <Divider />\n *           <Menu.Item onPress={() => {}} title=\"Item 3\" />\n *         </Menu>\n *       </View>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass Menu extends React.Component<Props, State> {\n  // @component ./MenuItem.tsx\n  static Item = MenuItem;\n\n  static defaultProps = {\n    statusBarHeight: APPROX_STATUSBAR_HEIGHT,\n    overlayAccessibilityLabel: 'Close menu',\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (nextProps.visible && !prevState.rendered) {\n      return { rendered: true };\n    }\n\n    return null;\n  }\n\n  state = {\n    rendered: this.props.visible,\n    top: 0,\n    left: 0,\n    menuLayout: { width: 0, height: 0 },\n    anchorLayout: { width: 0, height: 0 },\n    opacityAnimation: new Animated.Value(0),\n    scaleAnimation: new Animated.ValueXY({ x: 0, y: 0 }),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      this.updateVisibility();\n    }\n  }\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  private anchor?: View | null = null;\n  private menu?: View | null = null;\n  private backHandlerSubscription: NativeEventSubscription | undefined;\n  private dimensionsSubscription: NativeEventSubscription | undefined;\n\n  private isCoordinate = (anchor: any): anchor is { x: number; y: number } =>\n    !React.isValidElement(anchor) &&\n    typeof anchor?.x === 'number' &&\n    typeof anchor?.y === 'number';\n\n  private measureMenuLayout = () =>\n    new Promise<LayoutRectangle>((resolve) => {\n      if (this.menu) {\n        this.menu.measureInWindow((x, y, width, height) => {\n          resolve({ x, y, width, height });\n        });\n      }\n    });\n\n  private measureAnchorLayout = () =>\n    new Promise<LayoutRectangle>((resolve) => {\n      const { anchor } = this.props;\n      if (this.isCoordinate(anchor)) {\n        resolve({ x: anchor.x, y: anchor.y, width: 0, height: 0 });\n        return;\n      }\n\n      if (this.anchor) {\n        this.anchor.measureInWindow((x, y, width, height) => {\n          resolve({ x, y, width, height });\n        });\n      }\n    });\n\n  private updateVisibility = async () => {\n    // Menu is rendered in Portal, which updates items asynchronously\n    // We need to do the same here so that the ref is up-to-date\n    await Promise.resolve();\n\n    if (this.props.visible) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  };\n\n  private isBrowser = () => Platform.OS === 'web' && 'document' in global;\n\n  private focusFirstDOMNode = (el: View | null | undefined) => {\n    if (el && this.isBrowser()) {\n      // When in the browser, we want to focus the first focusable item on toggle\n      // For example, when menu is shown, focus the first item in the menu\n      // And when menu is dismissed, send focus back to the button to resume tabbing\n      const node: any = findNodeHandle(el);\n      const focusableNode = node.querySelector(\n        // This is a rough list of selectors that can be focused\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      );\n\n      focusableNode?.focus();\n    }\n  };\n\n  private handleDismiss = () => {\n    if (this.props.visible) {\n      this.props.onDismiss();\n    }\n    return true;\n  };\n\n  private handleKeypress = (e: KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      this.props.onDismiss();\n    }\n  };\n\n  private attachListeners = () => {\n    this.backHandlerSubscription = addEventListener(\n      BackHandler,\n      'hardwareBackPress',\n      this.handleDismiss\n    );\n    this.dimensionsSubscription = addEventListener(\n      Dimensions,\n      'change',\n      this.handleDismiss\n    );\n    this.isBrowser() && document.addEventListener('keyup', this.handleKeypress);\n  };\n\n  private removeListeners = () => {\n    this.backHandlerSubscription?.remove();\n    this.dimensionsSubscription?.remove();\n    this.isBrowser() &&\n      document.removeEventListener('keyup', this.handleKeypress);\n  };\n\n  private show = async () => {\n    const windowLayout = Dimensions.get('window');\n    const [menuLayout, anchorLayout] = await Promise.all([\n      this.measureMenuLayout(),\n      this.measureAnchorLayout(),\n    ]);\n\n    // When visible is true for first render\n    // native views can be still not rendered and\n    // measureMenuLayout/measureAnchorLayout functions\n    // return wrong values e.g { x:0, y: 0, width: 0, height: 0 }\n    // so we have to wait until views are ready\n    // and rerun this function to show menu\n    if (\n      !windowLayout.width ||\n      !windowLayout.height ||\n      !menuLayout.width ||\n      !menuLayout.height ||\n      (!anchorLayout.width && !this.isCoordinate(this.props.anchor)) ||\n      (!anchorLayout.height && !this.isCoordinate(this.props.anchor))\n    ) {\n      requestAnimationFrame(this.show);\n      return;\n    }\n\n    this.setState(\n      () => ({\n        left: anchorLayout.x,\n        top: anchorLayout.y,\n        anchorLayout: {\n          height: anchorLayout.height,\n          width: anchorLayout.width,\n        },\n        menuLayout: {\n          width: menuLayout.width,\n          height: menuLayout.height,\n        },\n      }),\n      () => {\n        this.attachListeners();\n\n        const { animation } = this.props.theme;\n        Animated.parallel([\n          Animated.timing(this.state.scaleAnimation, {\n            toValue: { x: menuLayout.width, y: menuLayout.height },\n            duration: ANIMATION_DURATION * animation.scale,\n            easing: EASING,\n            useNativeDriver: true,\n          }),\n          Animated.timing(this.state.opacityAnimation, {\n            toValue: 1,\n            duration: ANIMATION_DURATION * animation.scale,\n            easing: EASING,\n            useNativeDriver: true,\n          }),\n        ]).start(({ finished }) => {\n          if (finished) {\n            this.focusFirstDOMNode(this.menu);\n          }\n        });\n      }\n    );\n  };\n\n  private hide = () => {\n    this.removeListeners();\n\n    const { animation } = this.props.theme;\n    Animated.timing(this.state.opacityAnimation, {\n      toValue: 0,\n      duration: ANIMATION_DURATION * animation.scale,\n      easing: EASING,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.setState({ menuLayout: { width: 0, height: 0 }, rendered: false });\n        this.state.scaleAnimation.setValue({ x: 0, y: 0 });\n        this.focusFirstDOMNode(this.anchor);\n      }\n    });\n  };\n\n  render() {\n    const {\n      visible,\n      anchor,\n      contentStyle,\n      style,\n      children,\n      theme,\n      statusBarHeight,\n      onDismiss,\n      overlayAccessibilityLabel,\n    } = this.props;\n\n    const {\n      rendered,\n      menuLayout,\n      anchorLayout,\n      opacityAnimation,\n      scaleAnimation,\n    } = this.state;\n\n    let { left, top } = this.state;\n\n    // I don't know why but on Android measure function is wrong by 24\n    const additionalVerticalValue = Platform.select({\n      android: statusBarHeight,\n      default: 0,\n    });\n\n    const scaleTransforms = [\n      {\n        scaleX: scaleAnimation.x.interpolate({\n          inputRange: [0, menuLayout.width],\n          outputRange: [0, 1],\n        }),\n      },\n      {\n        scaleY: scaleAnimation.y.interpolate({\n          inputRange: [0, menuLayout.height],\n          outputRange: [0, 1],\n        }),\n      },\n    ];\n\n    const windowLayout = Dimensions.get('window');\n\n    // We need to translate menu while animating scale to imitate transform origin for scale animation\n    const positionTransforms = [];\n\n    // Check if menu fits horizontally and if not align it to right.\n    if (left <= windowLayout.width - menuLayout.width - SCREEN_INDENT) {\n      positionTransforms.push({\n        translateX: scaleAnimation.x.interpolate({\n          inputRange: [0, menuLayout.width],\n          outputRange: [-(menuLayout.width / 2), 0],\n        }),\n      });\n\n      // Check if menu position has enough space from left side\n      if (left < SCREEN_INDENT) {\n        left = SCREEN_INDENT;\n      }\n    } else {\n      positionTransforms.push({\n        translateX: scaleAnimation.x.interpolate({\n          inputRange: [0, menuLayout.width],\n          outputRange: [menuLayout.width / 2, 0],\n        }),\n      });\n\n      left += anchorLayout.width - menuLayout.width;\n\n      const right = left + menuLayout.width;\n      // Check if menu position has enough space from right side\n      if (right > windowLayout.width - SCREEN_INDENT) {\n        left = windowLayout.width - SCREEN_INDENT - menuLayout.width;\n      }\n    }\n\n    // If the menu is larger than available vertical space,\n    // calculate the height of scrollable view\n    let scrollableMenuHeight = 0;\n\n    // Check if the menu should be scrollable\n    if (\n      // Check if the menu overflows from bottom side\n      top >=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue &&\n      // And bottom side of the screen has more space than top side\n      top <= windowLayout.height - top\n    ) {\n      // Scrollable menu should be below the anchor (expands downwards)\n      scrollableMenuHeight =\n        windowLayout.height - top - SCREEN_INDENT - additionalVerticalValue;\n    } else if (\n      // Check if the menu overflows from bottom side\n      top >=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue &&\n      // And top side of the screen has more space than bottom side\n      top >= windowLayout.height - top &&\n      // And menu overflows from top side\n      top <=\n        menuLayout.height -\n          anchorLayout.height +\n          SCREEN_INDENT -\n          additionalVerticalValue\n    ) {\n      // Scrollable menu should be above the anchor (expands upwards)\n      scrollableMenuHeight =\n        top + anchorLayout.height - SCREEN_INDENT + additionalVerticalValue;\n    }\n\n    // Scrollable menu max height\n    scrollableMenuHeight =\n      scrollableMenuHeight > windowLayout.height - 2 * SCREEN_INDENT\n        ? windowLayout.height - 2 * SCREEN_INDENT\n        : scrollableMenuHeight;\n\n    // Menu is typically positioned below the element that generates it\n    // So first check if it fits below the anchor (expands downwards)\n    if (\n      // Check if menu fits vertically\n      top <=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue ||\n      // Or if the menu overflows from bottom side\n      (top >=\n        windowLayout.height -\n          menuLayout.height -\n          SCREEN_INDENT -\n          additionalVerticalValue &&\n        // And bottom side of the screen has more space than top side\n        top <= windowLayout.height - top)\n    ) {\n      positionTransforms.push({\n        translateY: scaleAnimation.y.interpolate({\n          inputRange: [0, menuLayout.height],\n          outputRange: [-((scrollableMenuHeight || menuLayout.height) / 2), 0],\n        }),\n      });\n\n      // Check if menu position has enough space from top side\n      if (top < SCREEN_INDENT) {\n        top = SCREEN_INDENT;\n      }\n    } else {\n      positionTransforms.push({\n        translateY: scaleAnimation.y.interpolate({\n          inputRange: [0, menuLayout.height],\n          outputRange: [(scrollableMenuHeight || menuLayout.height) / 2, 0],\n        }),\n      });\n\n      top += anchorLayout.height - (scrollableMenuHeight || menuLayout.height);\n\n      const bottom =\n        top +\n        (scrollableMenuHeight || menuLayout.height) +\n        additionalVerticalValue;\n\n      // Check if menu position has enough space from bottom side\n      if (bottom > windowLayout.height - SCREEN_INDENT) {\n        top =\n          scrollableMenuHeight === windowLayout.height - 2 * SCREEN_INDENT\n            ? -SCREEN_INDENT * 2\n            : windowLayout.height -\n              menuLayout.height -\n              SCREEN_INDENT -\n              additionalVerticalValue;\n      }\n    }\n\n    const shadowMenuContainerStyle = {\n      opacity: opacityAnimation,\n      transform: scaleTransforms,\n      borderRadius: theme.roundness,\n      ...(scrollableMenuHeight ? { height: scrollableMenuHeight } : {}),\n    };\n\n    const positionStyle = {\n      top: this.isCoordinate(anchor) ? top : top + additionalVerticalValue,\n      ...(I18nManager.isRTL ? { right: left } : { left }),\n    };\n\n    return (\n      <View\n        ref={(ref) => {\n          this.anchor = ref;\n        }}\n        collapsable={false}\n      >\n        {this.isCoordinate(anchor) ? null : anchor}\n        {rendered ? (\n          <Portal>\n            <TouchableWithoutFeedback\n              accessibilityLabel={overlayAccessibilityLabel}\n              accessibilityRole=\"button\"\n              onPress={onDismiss}\n            >\n              <View style={StyleSheet.absoluteFill} />\n            </TouchableWithoutFeedback>\n            <View\n              ref={(ref) => {\n                this.menu = ref;\n              }}\n              collapsable={false}\n              accessibilityViewIsModal={visible}\n              style={[styles.wrapper, positionStyle, style]}\n              pointerEvents={visible ? 'box-none' : 'none'}\n              onAccessibilityEscape={onDismiss}\n            >\n              <Animated.View style={{ transform: positionTransforms }}>\n                <Surface\n                  style={\n                    [\n                      styles.shadowMenuContainer,\n                      shadowMenuContainerStyle,\n                      contentStyle,\n                    ] as StyleProp<ViewStyle>\n                  }\n                >\n                  {(scrollableMenuHeight && (\n                    <ScrollView>{children}</ScrollView>\n                  )) || <React.Fragment>{children}</React.Fragment>}\n                </Surface>\n              </Animated.View>\n            </View>\n          </Portal>\n        ) : null}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    position: 'absolute',\n  },\n  shadowMenuContainer: {\n    opacity: 0,\n    paddingVertical: 8,\n    elevation: 8,\n  },\n});\n\nexport default withTheme(Menu);\n"]},"metadata":{},"sourceType":"module"}