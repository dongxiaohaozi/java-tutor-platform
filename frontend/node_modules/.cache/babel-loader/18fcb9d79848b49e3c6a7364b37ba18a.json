{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, TextInput as NativeTextInput } from 'react-native';\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputIcon from './Adornment/TextInputIcon';\nimport TextInputAffix from './Adornment/TextInputAffix';\nimport { withTheme } from '../../core/theming';\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState(\"\");\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\n\nconst TextInput = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    mode = 'flat',\n    dense = false,\n    disabled = false,\n    error: errorProp = false,\n    multiline = false,\n    editable = true,\n    render = props => /*#__PURE__*/React.createElement(NativeTextInput, props),\n    ...rest\n  } = _ref;\n  const isControlled = rest.value !== undefined;\n  const validInputValue = isControlled ? rest.value : rest.defaultValue;\n  const {\n    current: labeled\n  } = React.useRef(new Animated.Value(validInputValue ? 0 : 1));\n  const {\n    current: error\n  } = React.useRef(new Animated.Value(errorProp ? 1 : 0));\n  const [focused, setFocused] = React.useState(false);\n  const [placeholder, setPlaceholder] = React.useState('');\n  const [uncontrolledValue, setUncontrolledValue] = React.useState(validInputValue); // Use value from props instead of local state when input is controlled\n\n  const value = isControlled ? rest.value : uncontrolledValue;\n  const [labelLayout, setLabelLayout] = React.useState({\n    measured: false,\n    width: 0,\n    height: 0\n  });\n  const [leftLayout, setLeftLayout] = React.useState({\n    width: null,\n    height: null\n  });\n  const [rightLayout, setRightLayout] = React.useState({\n    width: null,\n    height: null\n  });\n  const timer = React.useRef();\n  const root = React.useRef();\n  const {\n    scale\n  } = rest.theme.animation;\n  React.useImperativeHandle(ref, () => ({\n    focus: () => {\n      var _root$current;\n\n      return (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.focus();\n    },\n    clear: () => {\n      var _root$current2;\n\n      return (_root$current2 = root.current) === null || _root$current2 === void 0 ? void 0 : _root$current2.clear();\n    },\n    setNativeProps: args => {\n      var _root$current3;\n\n      return (_root$current3 = root.current) === null || _root$current3 === void 0 ? void 0 : _root$current3.setNativeProps(args);\n    },\n    isFocused: () => {\n      var _root$current4;\n\n      return ((_root$current4 = root.current) === null || _root$current4 === void 0 ? void 0 : _root$current4.isFocused()) || false;\n    },\n    blur: () => {\n      var _root$current5;\n\n      return (_root$current5 = root.current) === null || _root$current5 === void 0 ? void 0 : _root$current5.blur();\n    },\n    forceFocus: () => {\n      var _root$current6;\n\n      return (_root$current6 = root.current) === null || _root$current6 === void 0 ? void 0 : _root$current6.focus();\n    }\n  }));\n  React.useEffect(() => {\n    // When the input has an error, we wiggle the label and apply error styles\n    if (errorProp) {\n      // show error\n      Animated.timing(error, {\n        toValue: 1,\n        duration: FOCUS_ANIMATION_DURATION * scale,\n        // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n        useNativeDriver: true\n      }).start();\n    } else {\n      // hide error\n      {\n        Animated.timing(error, {\n          toValue: 0,\n          duration: BLUR_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, [errorProp, scale, error]);\n  React.useEffect(() => {\n    // Show placeholder text only if the input is focused, or there's no label\n    // We don't show placeholder if there's a label because the label acts as placeholder\n    // When focused, the label moves up, so we can show a placeholder\n    if (focused || !rest.label) {\n      // Set the placeholder in a delay to offset the label animation\n      // If we show it immediately, they'll overlap and look ugly\n      timer.current = setTimeout(() => setPlaceholder(rest.placeholder), 50);\n    } else {\n      // hidePlaceholder\n      setPlaceholder('');\n    }\n\n    return () => {\n      if (timer.current) {\n        clearTimeout(timer.current);\n      }\n    };\n  }, [focused, rest.label, rest.placeholder]);\n  React.useEffect(() => {\n    // The label should be minimized if the text input is focused, or has text\n    // In minimized mode, the label moves up and becomes small\n    // workaround for animated regression for react native > 0.61\n    // https://github.com/callstack/react-native-paper/pull/1440\n    if (value || focused) {\n      // minimize label\n      Animated.timing(labeled, {\n        toValue: 0,\n        duration: BLUR_ANIMATION_DURATION * scale,\n        // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n        useNativeDriver: true\n      }).start();\n    } else {\n      // restore label\n      {\n        Animated.timing(labeled, {\n          toValue: 1,\n          duration: FOCUS_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true\n        }).start();\n      }\n    }\n  }, [focused, value, labeled, scale]);\n\n  const onLeftAffixLayoutChange = event => {\n    setLeftLayout({\n      height: event.nativeEvent.layout.height,\n      width: event.nativeEvent.layout.width\n    });\n  };\n\n  const onRightAffixLayoutChange = event => {\n    setRightLayout({\n      width: event.nativeEvent.layout.width,\n      height: event.nativeEvent.layout.height\n    });\n  };\n\n  const handleFocus = args => {\n    var _rest$onFocus;\n\n    if (disabled || !editable) {\n      return;\n    }\n\n    setFocused(true);\n    (_rest$onFocus = rest.onFocus) === null || _rest$onFocus === void 0 ? void 0 : _rest$onFocus.call(rest, args);\n  };\n\n  const handleBlur = args => {\n    var _rest$onBlur;\n\n    if (!editable) {\n      return;\n    }\n\n    setFocused(false);\n    (_rest$onBlur = rest.onBlur) === null || _rest$onBlur === void 0 ? void 0 : _rest$onBlur.call(rest, args);\n  };\n\n  const handleChangeText = value => {\n    var _rest$onChangeText;\n\n    if (!editable || disabled) {\n      return;\n    }\n\n    if (!isControlled) {\n      // Keep track of value in local state when input is not controlled\n      setUncontrolledValue(value);\n    }\n\n    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, value);\n  };\n\n  const handleLayoutAnimatedText = e => {\n    setLabelLayout({\n      width: e.nativeEvent.layout.width,\n      height: e.nativeEvent.layout.height,\n      measured: true\n    });\n  };\n\n  const forceFocus = () => {\n    var _root$current7;\n\n    return (_root$current7 = root.current) === null || _root$current7 === void 0 ? void 0 : _root$current7.focus();\n  };\n\n  const {\n    maxFontSizeMultiplier = 1.5\n  } = rest;\n\n  if (mode === 'outlined') {\n    return /*#__PURE__*/React.createElement(TextInputOutlined, _extends({\n      dense: dense,\n      disabled: disabled,\n      error: errorProp,\n      multiline: multiline,\n      editable: editable,\n      render: render\n    }, rest, {\n      value: value,\n      parentState: {\n        labeled,\n        error,\n        focused,\n        placeholder,\n        value,\n        labelLayout,\n        leftLayout,\n        rightLayout\n      },\n      innerRef: ref => {\n        root.current = ref;\n      },\n      onFocus: handleFocus,\n      forceFocus: forceFocus,\n      onBlur: handleBlur,\n      onChangeText: handleChangeText,\n      onLayoutAnimatedText: handleLayoutAnimatedText,\n      onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n      onRightAffixLayoutChange: onRightAffixLayoutChange,\n      maxFontSizeMultiplier: maxFontSizeMultiplier\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(TextInputFlat, _extends({\n    dense: dense,\n    disabled: disabled,\n    error: errorProp,\n    multiline: multiline,\n    editable: editable,\n    render: render\n  }, rest, {\n    value: value,\n    parentState: {\n      labeled,\n      error,\n      focused,\n      placeholder,\n      value,\n      labelLayout,\n      leftLayout,\n      rightLayout\n    },\n    innerRef: ref => {\n      root.current = ref;\n    },\n    onFocus: handleFocus,\n    forceFocus: forceFocus,\n    onBlur: handleBlur,\n    onChangeText: handleChangeText,\n    onLayoutAnimatedText: handleLayoutAnimatedText,\n    onLeftAffixLayoutChange: onLeftAffixLayoutChange,\n    onRightAffixLayoutChange: onRightAffixLayoutChange,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }));\n}); // @component ./Adornment/TextInputIcon.tsx\n\nTextInput.Icon = TextInputIcon; // @component ./Adornment/TextInputAffix.tsx\n// @ts-ignore Types of property 'theme' are incompatible.\n\nTextInput.Affix = TextInputAffix;\nexport default withTheme(TextInput);","map":{"version":3,"mappings":"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","names":["React","Animated","TextInput","NativeTextInput","TextInputOutlined","TextInputFlat","TextInputIcon","TextInputAffix","withTheme","BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","forwardRef","ref","mode","dense","disabled","error","errorProp","multiline","editable","render","props","rest","_ref","isControlled","value","undefined","validInputValue","defaultValue","current","labeled","useRef","Value","focused","setFocused","useState","placeholder","setPlaceholder","uncontrolledValue","setUncontrolledValue","labelLayout","setLabelLayout","measured","width","height","leftLayout","setLeftLayout","rightLayout","setRightLayout","timer","root","scale","theme","animation","useImperativeHandle","focus","_root$current","clear","_root$current2","setNativeProps","args","_root$current3","isFocused","blur","_root$current5","forceFocus","_root$current6","useEffect","timing","toValue","duration","useNativeDriver","start","label","setTimeout","clearTimeout","onLeftAffixLayoutChange","event","nativeEvent","layout","onRightAffixLayoutChange","handleFocus","onFocus","handleBlur","onBlur","handleChangeText","onChangeText","handleLayoutAnimatedText","e","_root$current7","maxFontSizeMultiplier","parentState","innerRef","onLayoutAnimatedText","Icon","Affix"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/TextInput/TextInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextInput as NativeTextInput,\n  LayoutChangeEvent,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputIcon, {\n  Props as TextInputIconProps,\n} from './Adornment/TextInputIcon';\nimport TextInputAffix, {\n  Props as TextInputAffixProps,\n} from './Adornment/TextInputAffix';\nimport { withTheme } from '../../core/theming';\nimport type { RenderProps, TextInputLabelProp } from './types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type TextInputProps = React.ComponentPropsWithRef<\n  typeof NativeTextInput\n> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text or component to use for the floating label.\n   */\n  label?: TextInputLabelProp;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string;\n  /**\n   * Inactive underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Active underline color of the input.\n   */\n  activeUnderlineColor?: string;\n  /**\n   * Inactive outline color of the input.\n   */\n  outlineColor?: string;\n  /**\n   * Active outline color of the input.\n   */\n  activeOutlineColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `height` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ninterface CompoundedComponent\n  extends React.ForwardRefExoticComponent<\n    TextInputProps & React.RefAttributes<TextInputHandles>\n  > {\n  Icon: React.FunctionComponent<TextInputIconProps>;\n  Affix: React.FunctionComponent<Partial<TextInputAffixProps>>;\n}\n\ntype TextInputHandles = Pick<\n  NativeTextInput,\n  'focus' | 'clear' | 'blur' | 'isFocused' | 'setNativeProps'\n>;\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState(\"\");\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\n\nconst TextInput = React.forwardRef<TextInputHandles, TextInputProps>(\n  (\n    {\n      mode = 'flat',\n      dense = false,\n      disabled = false,\n      error: errorProp = false,\n      multiline = false,\n      editable = true,\n      render = (props: RenderProps) => <NativeTextInput {...props} />,\n      ...rest\n    }: TextInputProps,\n    ref\n  ) => {\n    const isControlled = rest.value !== undefined;\n    const validInputValue = isControlled ? rest.value : rest.defaultValue;\n\n    const { current: labeled } = React.useRef<Animated.Value>(\n      new Animated.Value(validInputValue ? 0 : 1)\n    );\n    const { current: error } = React.useRef<Animated.Value>(\n      new Animated.Value(errorProp ? 1 : 0)\n    );\n    const [focused, setFocused] = React.useState<boolean>(false);\n    const [placeholder, setPlaceholder] = React.useState<string | undefined>(\n      ''\n    );\n    const [uncontrolledValue, setUncontrolledValue] = React.useState<\n      string | undefined\n    >(validInputValue);\n    // Use value from props instead of local state when input is controlled\n    const value = isControlled ? rest.value : uncontrolledValue;\n\n    const [labelLayout, setLabelLayout] = React.useState<{\n      measured: boolean;\n      width: number;\n      height: number;\n    }>({\n      measured: false,\n      width: 0,\n      height: 0,\n    });\n    const [leftLayout, setLeftLayout] = React.useState<{\n      height: number | null;\n      width: number | null;\n    }>({\n      width: null,\n      height: null,\n    });\n    const [rightLayout, setRightLayout] = React.useState<{\n      height: number | null;\n      width: number | null;\n    }>({\n      width: null,\n      height: null,\n    });\n\n    const timer = React.useRef<NodeJS.Timeout | undefined>();\n\n    const root = React.useRef<NativeTextInput | undefined | null>();\n\n    const { scale } = rest.theme.animation;\n\n    React.useImperativeHandle(ref, () => ({\n      focus: () => root.current?.focus(),\n      clear: () => root.current?.clear(),\n      setNativeProps: (args: Object) => root.current?.setNativeProps(args),\n      isFocused: () => root.current?.isFocused() || false,\n      blur: () => root.current?.blur(),\n      forceFocus: () => root.current?.focus(),\n    }));\n\n    React.useEffect(() => {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (errorProp) {\n        // show error\n        Animated.timing(error, {\n          toValue: 1,\n          duration: FOCUS_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true,\n        }).start();\n      } else {\n        // hide error\n        {\n          Animated.timing(error, {\n            toValue: 0,\n            duration: BLUR_ANIMATION_DURATION * scale,\n            // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n            useNativeDriver: true,\n          }).start();\n        }\n      }\n    }, [errorProp, scale, error]);\n\n    React.useEffect(() => {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (focused || !rest.label) {\n        // Set the placeholder in a delay to offset the label animation\n        // If we show it immediately, they'll overlap and look ugly\n        timer.current = setTimeout(\n          () => setPlaceholder(rest.placeholder),\n          50\n        ) as unknown as NodeJS.Timeout;\n      } else {\n        // hidePlaceholder\n        setPlaceholder('');\n      }\n\n      return () => {\n        if (timer.current) {\n          clearTimeout(timer.current);\n        }\n      };\n    }, [focused, rest.label, rest.placeholder]);\n\n    React.useEffect(() => {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      if (value || focused) {\n        // minimize label\n        Animated.timing(labeled, {\n          toValue: 0,\n          duration: BLUR_ANIMATION_DURATION * scale,\n          // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n          useNativeDriver: true,\n        }).start();\n      } else {\n        // restore label\n        {\n          Animated.timing(labeled, {\n            toValue: 1,\n            duration: FOCUS_ANIMATION_DURATION * scale,\n            // To prevent this - https://github.com/callstack/react-native-paper/issues/941\n            useNativeDriver: true,\n          }).start();\n        }\n      }\n    }, [focused, value, labeled, scale]);\n\n    const onLeftAffixLayoutChange = (event: LayoutChangeEvent) => {\n      setLeftLayout({\n        height: event.nativeEvent.layout.height,\n        width: event.nativeEvent.layout.width,\n      });\n    };\n\n    const onRightAffixLayoutChange = (event: LayoutChangeEvent) => {\n      setRightLayout({\n        width: event.nativeEvent.layout.width,\n        height: event.nativeEvent.layout.height,\n      });\n    };\n\n    const handleFocus = (args: any) => {\n      if (disabled || !editable) {\n        return;\n      }\n\n      setFocused(true);\n\n      rest.onFocus?.(args);\n    };\n\n    const handleBlur = (args: Object) => {\n      if (!editable) {\n        return;\n      }\n\n      setFocused(false);\n      rest.onBlur?.(args);\n    };\n\n    const handleChangeText = (value: string) => {\n      if (!editable || disabled) {\n        return;\n      }\n\n      if (!isControlled) {\n        // Keep track of value in local state when input is not controlled\n        setUncontrolledValue(value);\n      }\n      rest.onChangeText?.(value);\n    };\n\n    const handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n      setLabelLayout({\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      });\n    };\n    const forceFocus = () => root.current?.focus();\n\n    const { maxFontSizeMultiplier = 1.5 } = rest;\n\n    if (mode === 'outlined') {\n      return (\n        <TextInputOutlined\n          dense={dense}\n          disabled={disabled}\n          error={errorProp}\n          multiline={multiline}\n          editable={editable}\n          render={render}\n          {...rest}\n          value={value}\n          parentState={{\n            labeled,\n            error,\n            focused,\n            placeholder,\n            value,\n            labelLayout,\n            leftLayout,\n            rightLayout,\n          }}\n          innerRef={(ref) => {\n            root.current = ref;\n          }}\n          onFocus={handleFocus}\n          forceFocus={forceFocus}\n          onBlur={handleBlur}\n          onChangeText={handleChangeText}\n          onLayoutAnimatedText={handleLayoutAnimatedText}\n          onLeftAffixLayoutChange={onLeftAffixLayoutChange}\n          onRightAffixLayoutChange={onRightAffixLayoutChange}\n          maxFontSizeMultiplier={maxFontSizeMultiplier}\n        />\n      );\n    }\n\n    return (\n      <TextInputFlat\n        dense={dense}\n        disabled={disabled}\n        error={errorProp}\n        multiline={multiline}\n        editable={editable}\n        render={render}\n        {...rest}\n        value={value}\n        parentState={{\n          labeled,\n          error,\n          focused,\n          placeholder,\n          value,\n          labelLayout,\n          leftLayout,\n          rightLayout,\n        }}\n        innerRef={(ref) => {\n          root.current = ref;\n        }}\n        onFocus={handleFocus}\n        forceFocus={forceFocus}\n        onBlur={handleBlur}\n        onChangeText={handleChangeText}\n        onLayoutAnimatedText={handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={onRightAffixLayoutChange}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      />\n    );\n  }\n) as CompoundedComponent;\n// @component ./Adornment/TextInputIcon.tsx\nTextInput.Icon = TextInputIcon;\n\n// @component ./Adornment/TextInputAffix.tsx\n// @ts-ignore Types of property 'theme' are incompatible.\nTextInput.Affix = TextInputAffix;\n\nexport default withTheme(TextInput);\n"]},"metadata":{},"sourceType":"module"}