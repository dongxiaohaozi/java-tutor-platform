{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport color from 'color';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\n\nconst ListItem = _ref => {\n  let {\n    left,\n    right,\n    title,\n    description,\n    onPress,\n    theme,\n    style,\n    titleStyle,\n    titleNumberOfLines = 1,\n    descriptionNumberOfLines = 2,\n    titleEllipsizeMode,\n    descriptionEllipsizeMode,\n    descriptionStyle,\n    ...rest\n  } = _ref;\n\n  const renderDescription = (descriptionColor, description) => {\n    return typeof description === 'function' ? description({\n      selectable: false,\n      ellipsizeMode: descriptionEllipsizeMode,\n      color: descriptionColor,\n      fontSize: styles.description.fontSize\n    }) : /*#__PURE__*/React.createElement(Text, {\n      selectable: false,\n      numberOfLines: descriptionNumberOfLines,\n      ellipsizeMode: descriptionEllipsizeMode,\n      style: [styles.description, {\n        color: descriptionColor\n      }, descriptionStyle]\n    }, description);\n  };\n\n  const renderTitle = () => {\n    const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n    return typeof title === 'function' ? title({\n      selectable: false,\n      ellipsizeMode: titleEllipsizeMode,\n      color: titleColor,\n      fontSize: styles.title.fontSize\n    }) : /*#__PURE__*/React.createElement(Text, {\n      selectable: false,\n      ellipsizeMode: titleEllipsizeMode,\n      numberOfLines: titleNumberOfLines,\n      style: [styles.title, {\n        color: titleColor\n      }, titleStyle]\n    }, title);\n  };\n\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n  return /*#__PURE__*/React.createElement(TouchableRipple, _extends({}, rest, {\n    style: [styles.container, style],\n    onPress: onPress\n  }), /*#__PURE__*/React.createElement(View, {\n    style: styles.row\n  }, left ? left({\n    color: descriptionColor,\n    style: description ? styles.iconMarginLeft : { ...styles.iconMarginLeft,\n      ...styles.marginVerticalNone\n    }\n  }) : null, /*#__PURE__*/React.createElement(View, {\n    style: [styles.item, styles.content]\n  }, renderTitle(), description ? renderDescription(descriptionColor, description) : null), right ? right({\n    color: descriptionColor,\n    style: description ? styles.iconMarginRight : { ...styles.iconMarginRight,\n      ...styles.marginVerticalNone\n    }\n  }) : null));\n};\n\nListItem.displayName = 'List.Item';\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  marginVerticalNone: {\n    marginVertical: 0\n  },\n  iconMarginLeft: {\n    marginLeft: 0,\n    marginRight: 16\n  },\n  iconMarginRight: {\n    marginRight: 0\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListItem);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAEEC,UAFF,EAIEC,IAJF,QAMO,cANP;AAQA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AA+FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAGC,QAeJ;EAAA,IAfK;IAChBC,IADgB;IAEhBC,KAFgB;IAGhBC,KAHgB;IAIhBC,WAJgB;IAKhBC,OALgB;IAMhBC,KANgB;IAOhBC,KAPgB;IAQhBC,UARgB;IAShBC,kBAAkB,GAAG,CATL;IAUhBC,wBAAwB,GAAG,CAVX;IAWhBC,kBAXgB;IAYhBC,wBAZgB;IAahBC,gBAbgB;IAchB,GAAGC;EAda,IAeLd;;EACX,MAAMe,iBAAiB,GAAG,CACxBC,gBADwB,EAExBZ,WAFwB,KAGrB;IACH,OAAO,OAAOA,WAAP,KAAuB,UAAvB,GACLA,WAAW,CAAC;MACVa,UAAU,EAAE,KADF;MAEVC,aAAa,EAAEN,wBAFL;MAGVpB,KAAK,EAAEwB,gBAHG;MAIVG,QAAQ,EAAEC,MAAM,CAAChB,WAAPgB,CAAmBD;IAJnB,CAAD,CADN,gBAQL1B,oBAACI,IAAD;MACEoB,UAAU,EAAE,KADd;MAEEI,aAAa,EAAEX,wBAFjB;MAGEQ,aAAa,EAAEN,wBAHjB;MAIEL,KAAK,EAAE,CACLa,MAAM,CAAChB,WADF,EAEL;QAAEZ,KAAK,EAAEwB;MAAT,CAFK,EAGLH,gBAHK;IAJT,GAUGT,WAVH,CARF;EAJF;;EA2BA,MAAMkB,WAAW,GAAG,MAAM;IACxB,MAAMC,UAAU,GAAG/B,KAAK,CAACc,KAAK,CAACkB,MAANlB,CAAamB,IAAd,CAALjC,CAAyBkC,KAAzBlC,CAA+B,IAA/BA,EAAqCmC,GAArCnC,GAA2CoC,MAA3CpC,EAAnB;IAEA,OAAO,OAAOW,KAAP,KAAiB,UAAjB,GACLA,KAAK,CAAC;MACJc,UAAU,EAAE,KADR;MAEJC,aAAa,EAAEP,kBAFX;MAGJnB,KAAK,EAAE+B,UAHH;MAIJJ,QAAQ,EAAEC,MAAM,CAACjB,KAAPiB,CAAaD;IAJnB,CAAD,CADA,gBAQL1B,oBAACI,IAAD;MACEoB,UAAU,EAAE,KADd;MAEEC,aAAa,EAAEP,kBAFjB;MAGEU,aAAa,EAAEZ,kBAHjB;MAIEF,KAAK,EAAE,CAACa,MAAM,CAACjB,KAAR,EAAe;QAAEX,KAAK,EAAE+B;MAAT,CAAf,EAAsCf,UAAtC;IAJT,GAMGL,KANH,CARF;EAHF;;EAsBA,MAAMa,gBAAgB,GAAGxB,KAAK,CAACc,KAAK,CAACkB,MAANlB,CAAamB,IAAd,CAALjC,CAAyBkC,KAAzBlC,CAA+B,IAA/BA,EAAqCmC,GAArCnC,GAA2CoC,MAA3CpC,EAAzB;EAEA,oBACEC,oBAACG,eAAD,eACMkB,IADN;IAEEP,KAAK,EAAE,CAACa,MAAM,CAACS,SAAR,EAAmBtB,KAAnB,CAFT;IAGEF,OAAO,EAAEA;EAHX,iBAKEZ,oBAACE,IAAD;IAAMY,KAAK,EAAEa,MAAM,CAACU;EAApB,GACG7B,IAAI,GACDA,IAAI,CAAC;IACHT,KAAK,EAAEwB,gBADJ;IAEHT,KAAK,EAAEH,WAAW,GACdgB,MAAM,CAACW,cADO,GAEd,EACE,GAAGX,MAAM,CAACW,cADZ;MAEE,GAAGX,MAAM,CAACY;IAFZ;EAJD,CAAD,CADH,GAUD,IAXN,eAYEvC,oBAACE,IAAD;IAAMY,KAAK,EAAE,CAACa,MAAM,CAACa,IAAR,EAAcb,MAAM,CAACc,OAArB;EAAb,GACGZ,WAAW,EADd,EAGGlB,WAAW,GACRW,iBAAiB,CAACC,gBAAD,EAAmBZ,WAAnB,CADT,GAER,IALN,CAZF,EAmBGF,KAAK,GACFA,KAAK,CAAC;IACJV,KAAK,EAAEwB,gBADH;IAEJT,KAAK,EAAEH,WAAW,GACdgB,MAAM,CAACe,eADO,GAEd,EACE,GAAGf,MAAM,CAACe,eADZ;MAEE,GAAGf,MAAM,CAACY;IAFZ;EAJA,CAAD,CADH,GAUF,IA7BN,CALF,CADF;AAnEF;;AA4GAjC,QAAQ,CAACqC,WAATrC,GAAuB,WAAvBA;AAEA,MAAMqB,MAAM,GAAG1B,UAAU,CAAC2C,MAAX3C,CAAkB;EAC/BmC,SAAS,EAAE;IACTS,OAAO,EAAE;EADA,CADoB;EAI/BR,GAAG,EAAE;IACHS,aAAa,EAAE;EADZ,CAJ0B;EAO/BpC,KAAK,EAAE;IACLgB,QAAQ,EAAE;EADL,CAPwB;EAU/Bf,WAAW,EAAE;IACXe,QAAQ,EAAE;EADC,CAVkB;EAa/Ba,kBAAkB,EAAE;IAAEQ,cAAc,EAAE;EAAlB,CAbW;EAc/BT,cAAc,EAAE;IAAEU,UAAU,EAAE,CAAd;IAAiBC,WAAW,EAAE;EAA9B,CAde;EAe/BP,eAAe,EAAE;IAAEO,WAAW,EAAE;EAAf,CAfc;EAgB/BT,IAAI,EAAE;IACJO,cAAc,EAAE,CADZ;IAEJG,WAAW,EAAE;EAFT,CAhByB;EAoB/BT,OAAO,EAAE;IACPU,IAAI,EAAE,CADC;IAEPC,cAAc,EAAE;EAFT;AApBsB,CAAlBnD,CAAf;AA0BA,eAAeI,SAAS,CAACC,QAAD,CAAxB","names":["color","React","StyleSheet","View","TouchableRipple","Text","withTheme","ListItem","_ref","left","right","title","description","onPress","theme","style","titleStyle","titleNumberOfLines","descriptionNumberOfLines","titleEllipsizeMode","descriptionEllipsizeMode","descriptionStyle","rest","renderDescription","descriptionColor","selectable","ellipsizeMode","fontSize","styles","numberOfLines","renderTitle","titleColor","colors","text","alpha","rgb","string","container","row","iconMarginLeft","marginVerticalNone","item","content","iconMarginRight","displayName","create","padding","flexDirection","marginVertical","marginLeft","marginRight","paddingLeft","flex","justifyContent"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/List/ListItem.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Title =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      selectable: boolean;\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: Title;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description.  One of `'head'`, `'middle'`, `'tail'`, `'clip'`.\n   *\n   * See [`ellipsizeMode`](https://reactnative.dev/docs/text#ellipsizemode)\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst ListItem = ({\n  left,\n  right,\n  title,\n  description,\n  onPress,\n  theme,\n  style,\n  titleStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  titleEllipsizeMode,\n  descriptionEllipsizeMode,\n  descriptionStyle,\n  ...rest\n}: Props) => {\n  const renderDescription = (\n    descriptionColor: string,\n    description?: Description | null\n  ) => {\n    return typeof description === 'function' ? (\n      description({\n        selectable: false,\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  };\n\n  const renderTitle = () => {\n    const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n\n    return typeof title === 'function' ? (\n      title({\n        selectable: false,\n        ellipsizeMode: titleEllipsizeMode,\n        color: titleColor,\n        fontSize: styles.title.fontSize,\n      })\n    ) : (\n      <Text\n        selectable={false}\n        ellipsizeMode={titleEllipsizeMode}\n        numberOfLines={titleNumberOfLines}\n        style={[styles.title, { color: titleColor }, titleStyle]}\n      >\n        {title}\n      </Text>\n    );\n  };\n\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      style={[styles.container, style]}\n      onPress={onPress}\n    >\n      <View style={styles.row}>\n        {left\n          ? left({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginLeft\n                : {\n                    ...styles.iconMarginLeft,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n        <View style={[styles.item, styles.content]}>\n          {renderTitle()}\n\n          {description\n            ? renderDescription(descriptionColor, description)\n            : null}\n        </View>\n        {right\n          ? right({\n              color: descriptionColor,\n              style: description\n                ? styles.iconMarginRight\n                : {\n                    ...styles.iconMarginRight,\n                    ...styles.marginVerticalNone,\n                  },\n            })\n          : null}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nListItem.displayName = 'List.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"]},"metadata":{},"sourceType":"module"}