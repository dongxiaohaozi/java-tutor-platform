{"ast":null,"code":"import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\n\nconst InputLabel = props => {\n  const {\n    parentState,\n    labelBackground\n  } = props;\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset,\n    maxFontSizeMultiplier\n  } = props.labelProps;\n  const labelTranslationX = {\n    transform: [{\n      // Offset label scale since RN doesn't support transform origin\n      translateX: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0]\n      })\n    }]\n  };\n  const labelStyle = { ...font,\n    fontSize,\n    fontWeight,\n    transform: [{\n      // Wiggle the label when there's an error\n      translateX: parentState.error.interpolate({\n        inputRange: [0, 0.5, 1],\n        outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0]\n      })\n    }, {\n      // Move label to top\n      translateY: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [baseLabelTranslateY, 0]\n      })\n    }, {\n      // Make label smaller\n      scale: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [labelScale, 1]\n      })\n    }]\n  };\n  return label ?\n  /*#__PURE__*/\n  // Position colored placeholder and gray placeholder on top of each other and crossfade them\n  // This gives the effect of animating the color, but allows us to use native driver\n  React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.labelContainer, {\n      opacity: // Hide the label in minimized state until we measure it's width\n      parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1\n    }, labelTranslationX]\n  }, labelBackground === null || labelBackground === void 0 ? void 0 : labelBackground({\n    parentState,\n    labelStyle,\n    labelProps: props.labelProps,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }), /*#__PURE__*/React.createElement(AnimatedText, {\n    onLayout: onLayoutAnimatedText,\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset || {}, {\n      color: activeColor,\n      opacity: parentState.labeled.interpolate({\n        inputRange: [0, 1],\n        outputRange: [hasActiveOutline ? 1 : 0, 0]\n      })\n    }],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, label), /*#__PURE__*/React.createElement(AnimatedText, {\n    style: [placeholderStyle, {\n      top: topPosition\n    }, labelStyle, paddingOffset, {\n      color: error && errorColor ? errorColor : placeholderColor,\n      opacity: placeholderOpacity\n    }],\n    numberOfLines: 1,\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, label)) : null;\n};\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3\n  }\n});\nexport default InputLabel;","map":{"version":3,"mappings":"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","names":["React","Animated","StyleSheet","AnimatedText","InputLabel","props","parentState","labelBackground","label","error","onLayoutAnimatedText","hasActiveOutline","activeColor","placeholderStyle","baseLabelTranslateX","baseLabelTranslateY","font","fontSize","fontWeight","placeholderOpacity","wiggleOffsetX","labelScale","topPosition","paddingOffset","placeholderColor","errorColor","labelTranslationXOffset","maxFontSizeMultiplier","labelProps","labelTranslationX","transform","translateX","labeled","interpolate","inputRange","outputRange","labelStyle","value","translateY","scale","View","pointerEvents","style","absoluteFill","styles","labelContainer","opacity","focused","labelLayout","measured","onLayout","top","color","numberOfLines","create","zIndex"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/TextInput/Label/InputLabel.tsx"],"sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport type { InputLabelProps } from '../types';\n\nconst InputLabel = (props: InputLabelProps) => {\n  const { parentState, labelBackground } = props;\n\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset,\n    maxFontSizeMultiplier,\n  } = props.labelProps;\n\n  const labelTranslationX = {\n    transform: [\n      {\n        // Offset label scale since RN doesn't support transform origin\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0],\n        }),\n      },\n    ],\n  };\n\n  const labelStyle = {\n    ...font,\n    fontSize,\n    fontWeight,\n    transform: [\n      {\n        // Wiggle the label when there's an error\n        translateX: parentState.error.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0],\n        }),\n      },\n      {\n        // Move label to top\n        translateY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateY, 0],\n        }),\n      },\n      {\n        // Make label smaller\n        scale: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [labelScale, 1],\n        }),\n      },\n    ],\n  };\n\n  return label ? (\n    // Position colored placeholder and gray placeholder on top of each other and crossfade them\n    // This gives the effect of animating the color, but allows us to use native driver\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        StyleSheet.absoluteFill,\n        styles.labelContainer,\n        {\n          opacity:\n            // Hide the label in minimized state until we measure it's width\n            parentState.value || parentState.focused\n              ? parentState.labelLayout.measured\n                ? 1\n                : 0\n              : 1,\n        },\n        labelTranslationX,\n      ]}\n    >\n      {labelBackground?.({\n        parentState,\n        labelStyle,\n        labelProps: props.labelProps,\n        maxFontSizeMultiplier: maxFontSizeMultiplier,\n      })}\n      <AnimatedText\n        onLayout={onLayoutAnimatedText}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset || {},\n          {\n            color: activeColor,\n            opacity: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasActiveOutline ? 1 : 0, 0],\n            }),\n          },\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      >\n        {label}\n      </AnimatedText>\n      <AnimatedText\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset,\n          {\n            color: error && errorColor ? errorColor : placeholderColor,\n            opacity: placeholderOpacity,\n          },\n        ]}\n        numberOfLines={1}\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n      >\n        {label}\n      </AnimatedText>\n    </Animated.View>\n  ) : null;\n};\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3,\n  },\n});\n\nexport default InputLabel;\n"]},"metadata":{},"sourceType":"module"}