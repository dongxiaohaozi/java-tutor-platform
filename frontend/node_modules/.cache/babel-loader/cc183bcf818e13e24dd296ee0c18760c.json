{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, Platform, StyleSheet, View, I18nManager } from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\nconst {\n  isRTL\n} = I18nManager;\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst ProgressBar = _ref => {\n  let {\n    color,\n    indeterminate,\n    style,\n    progress = 0,\n    visible = true,\n    theme,\n    ...rest\n  } = _ref;\n  const {\n    current: timer\n  } = React.useRef(new Animated.Value(0));\n  const {\n    current: fade\n  } = React.useRef(new Animated.Value(0));\n  const [width, setWidth] = React.useState(0);\n  const [prevWidth, setPrevWidth] = React.useState(0);\n  const indeterminateAnimation = React.useRef(null);\n  const {\n    scale\n  } = theme.animation;\n  const startAnimation = React.useCallback(() => {\n    // Show progress bar\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false\n    }).start(); // Animate progress bar\n\n    if (indeterminate) {\n      if (!indeterminateAnimation.current) {\n        indeterminateAnimation.current = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          // Animated.loop does not work if useNativeDriver is true on web\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false\n        });\n      } // Reset timer to the beginning\n\n\n      timer.setValue(0);\n      Animated.loop(indeterminateAnimation.current).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200 * scale,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start();\n    }\n  }, [scale, timer, progress, indeterminate, fade]);\n  const stopAnimation = React.useCallback(() => {\n    // Stop indeterminate animation\n    if (indeterminateAnimation.current) {\n      indeterminateAnimation.current.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false\n    }).start();\n  }, [fade, scale]);\n  React.useEffect(() => {\n    if (visible) startAnimation();else stopAnimation();\n  }, [visible, startAnimation, stopAnimation]);\n  React.useEffect(() => {\n    // Start animation the very first time when previously the width was unclear\n    if (visible && prevWidth === 0) {\n      startAnimation();\n    }\n  }, [prevWidth, startAnimation, visible]);\n\n  const onLayout = event => {\n    setPrevWidth(width);\n    setWidth(event.nativeEvent.layout.width);\n  };\n\n  const tintColor = color || theme.colors.primary;\n  const trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\n  return /*#__PURE__*/React.createElement(View, _extends({\n    onLayout: onLayout\n  }, rest, {\n    accessible: true,\n    accessibilityRole: \"progressbar\",\n    accessibilityState: {\n      busy: visible\n    },\n    accessibilityValue: indeterminate ? {} : {\n      min: 0,\n      max: 100,\n      now: progress * 100\n    }\n  }), /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.container, {\n      backgroundColor: trackTintColor,\n      opacity: fade\n    }, style]\n  }, width ? /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.progressBar, {\n      width,\n      backgroundColor: tintColor,\n      transform: [{\n        translateX: timer.interpolate(indeterminate ? {\n          inputRange: [0, 0.5, 1],\n          outputRange: [(isRTL ? 1 : -1) * 0.5 * width, (isRTL ? 1 : -1) * 0.5 * INDETERMINATE_MAX_WIDTH * width, (isRTL ? -1 : 1) * 0.7 * width]\n        } : {\n          inputRange: [0, 1],\n          outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0]\n        })\n      }, {\n        // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n        scaleX: timer.interpolate(indeterminate ? {\n          inputRange: [0, 0.5, 1],\n          outputRange: [0.0001, INDETERMINATE_MAX_WIDTH, 0.0001]\n        } : {\n          inputRange: [0, 1],\n          outputRange: [0.0001, 1]\n        })\n      }]\n    }]\n  }) : null));\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden'\n  },\n  progressBar: {\n    flex: 1\n  }\n});\nexport default withTheme(ProgressBar);","map":{"version":3,"mappings":"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","names":["React","Animated","Platform","StyleSheet","View","I18nManager","setColor","withTheme","INDETERMINATE_DURATION","INDETERMINATE_MAX_WIDTH","isRTL","ProgressBar","_ref","color","indeterminate","style","progress","visible","theme","rest","current","timer","useRef","Value","fade","width","setWidth","useState","prevWidth","setPrevWidth","indeterminateAnimation","scale","animation","startAnimation","useCallback","timing","duration","toValue","useNativeDriver","isInteraction","start","OS","setValue","loop","stopAnimation","stop","useEffect","onLayout","event","nativeEvent","layout","tintColor","colors","primary","trackTintColor","alpha","rgb","string","accessible","accessibilityRole","accessibilityState","busy","accessibilityValue","min","max","now","styles","container","backgroundColor","opacity","progressBar","transform","translateX","interpolate","inputRange","outputRange","scaleX","create","height","overflow","flex"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/ProgressBar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n  LayoutChangeEvent,\n  I18nManager,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Progress value (between 0 and 1).\n   */\n  progress?: number;\n  /**\n   * Color of the progress bar. The background color will be calculated based on this but you can change it by passing `backgroundColor` to `style` prop.\n   */\n  color?: string;\n  /**\n   * If the progress bar will show indeterminate progress.\n   */\n  indeterminate?: boolean;\n  /**\n   * Whether to show the ProgressBar (true, the default) or hide it (false).\n   */\n  visible?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\nconst { isRTL } = I18nManager;\n\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ProgressBar = ({\n  color,\n  indeterminate,\n  style,\n  progress = 0,\n  visible = true,\n  theme,\n  ...rest\n}: Props) => {\n  const { current: timer } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { current: fade } = React.useRef<Animated.Value>(new Animated.Value(0));\n  const [width, setWidth] = React.useState<number>(0);\n  const [prevWidth, setPrevWidth] = React.useState<number>(0);\n\n  const indeterminateAnimation =\n    React.useRef<Animated.CompositeAnimation | null>(null);\n\n  const { scale } = theme.animation;\n\n  const startAnimation = React.useCallback(() => {\n    // Show progress bar\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n\n    // Animate progress bar\n    if (indeterminate) {\n      if (!indeterminateAnimation.current) {\n        indeterminateAnimation.current = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          // Animated.loop does not work if useNativeDriver is true on web\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false,\n        });\n      }\n\n      // Reset timer to the beginning\n      timer.setValue(0);\n\n      Animated.loop(indeterminateAnimation.current).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200 * scale,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start();\n    }\n  }, [scale, timer, progress, indeterminate, fade]);\n\n  const stopAnimation = React.useCallback(() => {\n    // Stop indeterminate animation\n    if (indeterminateAnimation.current) {\n      indeterminateAnimation.current.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n  }, [fade, scale]);\n\n  React.useEffect(() => {\n    if (visible) startAnimation();\n    else stopAnimation();\n  }, [visible, startAnimation, stopAnimation]);\n\n  React.useEffect(() => {\n    // Start animation the very first time when previously the width was unclear\n    if (visible && prevWidth === 0) {\n      startAnimation();\n    }\n  }, [prevWidth, startAnimation, visible]);\n\n  const onLayout = (event: LayoutChangeEvent) => {\n    setPrevWidth(width);\n    setWidth(event.nativeEvent.layout.width);\n  };\n\n  const tintColor = color || theme.colors.primary;\n  const trackTintColor = setColor(tintColor).alpha(0.38).rgb().string();\n\n  return (\n    <View\n      onLayout={onLayout}\n      {...rest}\n      accessible\n      accessibilityRole=\"progressbar\"\n      accessibilityState={{ busy: visible }}\n      accessibilityValue={\n        indeterminate ? {} : { min: 0, max: 100, now: progress * 100 }\n      }\n    >\n      <Animated.View\n        style={[\n          styles.container,\n          { backgroundColor: trackTintColor, opacity: fade },\n          style,\n        ]}\n      >\n        {width ? (\n          <Animated.View\n            style={[\n              styles.progressBar,\n              {\n                width,\n                backgroundColor: tintColor,\n                transform: [\n                  {\n                    translateX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              (isRTL ? 1 : -1) * 0.5 * width,\n                              (isRTL ? 1 : -1) *\n                                0.5 *\n                                INDETERMINATE_MAX_WIDTH *\n                                width,\n                              (isRTL ? -1 : 1) * 0.7 * width,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [(isRTL ? 1 : -1) * 0.5 * width, 0],\n                          }\n                    ),\n                  },\n                  {\n                    // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n                    scaleX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              0.0001,\n                              INDETERMINATE_MAX_WIDTH,\n                              0.0001,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [0.0001, 1],\n                          }\n                    ),\n                  },\n                ],\n              },\n            ]}\n          />\n        ) : null}\n      </Animated.View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden',\n  },\n\n  progressBar: {\n    flex: 1,\n  },\n});\n\nexport default withTheme(ProgressBar);\n"]},"metadata":{},"sourceType":"module"}