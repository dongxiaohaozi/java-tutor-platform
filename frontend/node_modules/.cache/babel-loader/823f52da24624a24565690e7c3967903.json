{"ast":null,"code":"import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, I18nManager } from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst ListAccordion = _ref => {\n  let {\n    left,\n    right,\n    title,\n    description,\n    children,\n    theme,\n    titleStyle,\n    descriptionStyle,\n    titleNumberOfLines = 1,\n    descriptionNumberOfLines = 2,\n    style,\n    id,\n    testID,\n    onPress,\n    onLongPress,\n    expanded: expandedProp,\n    accessibilityLabel\n  } = _ref;\n  const [expanded, setExpanded] = React.useState(expandedProp || false);\n\n  const handlePressAction = () => {\n    onPress === null || onPress === void 0 ? void 0 : onPress();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded(expanded => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n  const groupContext = React.useContext(ListAccordionGroupContext);\n\n  if (groupContext !== null && !id) {\n    throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');\n  }\n\n  const isExpanded = groupContext ? groupContext.expandedId === id : expandedInternal;\n  const handlePress = groupContext && id !== undefined ? () => groupContext.onAccordionPress(id) : handlePressAction;\n  return /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(View, {\n    style: {\n      backgroundColor: theme.colors.background\n    }\n  }, /*#__PURE__*/React.createElement(TouchableRipple, {\n    style: [styles.container, style],\n    onPress: handlePress,\n    onLongPress: onLongPress // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: \"button\",\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      expanded: isExpanded\n    },\n    accessibilityLabel: accessibilityLabel,\n    testID: testID,\n    delayPressIn: 0,\n    borderless: true\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.row,\n    pointerEvents: \"none\"\n  }, left ? left({\n    color: isExpanded ? theme.colors.primary : descriptionColor\n  }) : null, /*#__PURE__*/React.createElement(View, {\n    style: [styles.item, styles.content]\n  }, /*#__PURE__*/React.createElement(Text, {\n    selectable: false,\n    numberOfLines: titleNumberOfLines,\n    style: [styles.title, {\n      color: isExpanded ? theme.colors.primary : titleColor\n    }, titleStyle]\n  }, title), description ? /*#__PURE__*/React.createElement(Text, {\n    selectable: false,\n    numberOfLines: descriptionNumberOfLines,\n    style: [styles.description, {\n      color: descriptionColor\n    }, descriptionStyle]\n  }, description) : null), /*#__PURE__*/React.createElement(View, {\n    style: [styles.item, description ? styles.multiline : undefined]\n  }, right ? right({\n    isExpanded: isExpanded\n  }) : /*#__PURE__*/React.createElement(MaterialCommunityIcon, {\n    name: isExpanded ? 'chevron-up' : 'chevron-down',\n    color: titleColor,\n    size: 24,\n    direction: I18nManager.isRTL ? 'rtl' : 'ltr'\n  }))))), isExpanded ? React.Children.map(children, child => {\n    if (left && /*#__PURE__*/React.isValidElement(child) && !child.props.left && !child.props.right) {\n      return /*#__PURE__*/React.cloneElement(child, {\n        style: [styles.child, child.props.style]\n      });\n    }\n\n    return child;\n  }) : null);\n};\n\nListAccordion.displayName = 'List.Accordion';\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  item: {\n    margin: 8\n  },\n  child: {\n    paddingLeft: 64\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListAccordion);","map":{"version":3,"mappings":"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","names":["color","React","View","StyleSheet","I18nManager","TouchableRipple","MaterialCommunityIcon","Text","withTheme","ListAccordionGroupContext","ListAccordion","_ref","left","right","title","description","children","theme","titleStyle","descriptionStyle","titleNumberOfLines","descriptionNumberOfLines","style","id","testID","onPress","onLongPress","expanded","expandedProp","accessibilityLabel","setExpanded","useState","handlePressAction","undefined","titleColor","colors","text","alpha","rgb","string","descriptionColor","expandedInternal","groupContext","useContext","Error","isExpanded","expandedId","handlePress","onAccordionPress","backgroundColor","background","styles","container","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","delayPressIn","borderless","row","pointerEvents","primary","item","content","selectable","numberOfLines","multiline","name","size","direction","isRTL","Children","map","child","isValidElement","props","cloneElement","displayName","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/List/ListAccordion.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n  GestureResponderEvent,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { isExpanded: boolean }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the TouchableRipple. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  right,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n  accessibilityLabel,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    onPress?.();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <View style={{ backgroundColor: theme.colors.background }}>\n        <TouchableRipple\n          style={[styles.container, style]}\n          onPress={handlePress}\n          onLongPress={onLongPress}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ expanded: isExpanded }}\n          accessibilityLabel={accessibilityLabel}\n          testID={testID}\n          delayPressIn={0}\n          borderless\n        >\n          <View style={styles.row} pointerEvents=\"none\">\n            {left\n              ? left({\n                  color: isExpanded ? theme.colors.primary : descriptionColor,\n                })\n              : null}\n            <View style={[styles.item, styles.content]}>\n              <Text\n                selectable={false}\n                numberOfLines={titleNumberOfLines}\n                style={[\n                  styles.title,\n                  {\n                    color: isExpanded ? theme.colors.primary : titleColor,\n                  },\n                  titleStyle,\n                ]}\n              >\n                {title}\n              </Text>\n              {description ? (\n                <Text\n                  selectable={false}\n                  numberOfLines={descriptionNumberOfLines}\n                  style={[\n                    styles.description,\n                    {\n                      color: descriptionColor,\n                    },\n                    descriptionStyle,\n                  ]}\n                >\n                  {description}\n                </Text>\n              ) : null}\n            </View>\n            <View\n              style={[styles.item, description ? styles.multiline : undefined]}\n            >\n              {right ? (\n                right({\n                  isExpanded: isExpanded,\n                })\n              ) : (\n                <MaterialCommunityIcon\n                  name={isExpanded ? 'chevron-up' : 'chevron-down'}\n                  color={titleColor}\n                  size={24}\n                  direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n                />\n              )}\n            </View>\n          </View>\n        </TouchableRipple>\n      </View>\n\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]},"metadata":{},"sourceType":"module"}