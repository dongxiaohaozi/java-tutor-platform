{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, Easing, Platform, StyleSheet, View } from 'react-native';\nimport { withTheme } from '../core/theming';\nconst DURATION = 2400;\n/**\n * Activity indicator is used to present progress of some activity in the app.\n * It can be used as a drop-in for the ActivityIndicator shipped with React Native.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/activity-indicator.gif\" style=\"width: 100px;\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ActivityIndicator, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ActivityIndicator animating={true} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst ActivityIndicator = _ref => {\n  let {\n    animating = true,\n    color: indicatorColor,\n    hidesWhenStopped = true,\n    size: indicatorSize = 'small',\n    style,\n    theme,\n    ...rest\n  } = _ref;\n  const {\n    current: timer\n  } = React.useRef(new Animated.Value(0));\n  const {\n    current: fade\n  } = React.useRef(new Animated.Value(!animating && hidesWhenStopped ? 0 : 1));\n  const rotation = React.useRef(undefined);\n  const {\n    animation: {\n      scale\n    }\n  } = theme;\n  const startRotation = React.useCallback(() => {\n    // Show indicator\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      isInteraction: false,\n      useNativeDriver: true\n    }).start(); // Circular animation in loop\n\n    if (rotation.current) {\n      timer.setValue(0); // $FlowFixMe\n\n      Animated.loop(rotation.current).start();\n    }\n  }, [scale, fade, timer]);\n\n  const stopRotation = () => {\n    if (rotation.current) {\n      rotation.current.stop();\n    }\n  };\n\n  React.useEffect(() => {\n    if (rotation.current === undefined) {\n      // Circular animation in loop\n      rotation.current = Animated.timing(timer, {\n        duration: DURATION,\n        easing: Easing.linear,\n        // Animated.loop does not work if useNativeDriver is true on web\n        useNativeDriver: Platform.OS !== 'web',\n        toValue: 1,\n        isInteraction: false\n      });\n    }\n\n    if (animating) {\n      startRotation();\n    } else if (hidesWhenStopped) {\n      // Hide indicator first and then stop rotation\n      Animated.timing(fade, {\n        duration: 200 * scale,\n        toValue: 0,\n        useNativeDriver: true,\n        isInteraction: false\n      }).start(stopRotation);\n    } else {\n      stopRotation();\n    }\n  }, [animating, fade, hidesWhenStopped, startRotation, scale, timer]);\n  const color = indicatorColor || theme.colors.primary;\n  const size = typeof indicatorSize === 'string' ? indicatorSize === 'small' ? 24 : 48 : indicatorSize ? indicatorSize : 24;\n  const frames = 60 * DURATION / 1000;\n  const easing = Easing.bezier(0.4, 0.0, 0.7, 1.0);\n  const containerStyle = {\n    width: size,\n    height: size / 2,\n    overflow: 'hidden'\n  };\n  return /*#__PURE__*/React.createElement(View, _extends({\n    style: [styles.container, style]\n  }, rest, {\n    accessible: true,\n    accessibilityRole: \"progressbar\",\n    accessibilityState: {\n      busy: animating\n    }\n  }), /*#__PURE__*/React.createElement(Animated.View, {\n    style: [{\n      width: size,\n      height: size,\n      opacity: fade\n    }],\n    collapsable: false\n  }, [0, 1].map(index => {\n    // Thanks to https://github.com/n4kz/react-native-indicators for the great work\n    const inputRange = Array.from(new Array(frames), (_, frameIndex) => frameIndex / (frames - 1));\n    const outputRange = Array.from(new Array(frames), (_, frameIndex) => {\n      let progress = 2 * frameIndex / (frames - 1);\n      const rotation = index ? +(360 - 15) : -(180 - 15);\n\n      if (progress > 1.0) {\n        progress = 2.0 - progress;\n      }\n\n      const direction = index ? -1 : +1;\n      return `${direction * (180 - 30) * easing(progress) + rotation}deg`;\n    });\n    const layerStyle = {\n      width: size,\n      height: size,\n      transform: [{\n        rotate: timer.interpolate({\n          inputRange: [0, 1],\n          outputRange: [`${0 + 30 + 15}deg`, `${2 * 360 + 30 + 15}deg`]\n        })\n      }]\n    };\n    const viewportStyle = {\n      width: size,\n      height: size,\n      transform: [{\n        translateY: index ? -size / 2 : 0\n      }, {\n        rotate: timer.interpolate({\n          inputRange,\n          outputRange\n        })\n      }]\n    };\n    const offsetStyle = index ? {\n      top: size / 2\n    } : null;\n    const lineStyle = {\n      width: size,\n      height: size,\n      borderColor: color,\n      borderWidth: size / 10,\n      borderRadius: size / 2\n    };\n    return /*#__PURE__*/React.createElement(Animated.View, {\n      key: index,\n      style: [styles.layer]\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: layerStyle\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [containerStyle, offsetStyle],\n      collapsable: false\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: viewportStyle\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: containerStyle,\n      collapsable: false\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: lineStyle\n    }))))));\n  })));\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  layer: { ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\nexport default withTheme(ActivityIndicator);","map":{"version":3,"mappings":"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","names":["React","Animated","Easing","Platform","StyleSheet","View","withTheme","DURATION","ActivityIndicator","_ref","animating","color","indicatorColor","hidesWhenStopped","size","indicatorSize","style","theme","rest","current","timer","useRef","Value","fade","rotation","undefined","animation","scale","startRotation","useCallback","timing","duration","toValue","isInteraction","useNativeDriver","start","setValue","loop","stopRotation","stop","useEffect","easing","linear","OS","colors","primary","frames","bezier","containerStyle","width","height","overflow","styles","container","accessible","accessibilityRole","accessibilityState","busy","opacity","collapsable","map","index","inputRange","Array","from","_","frameIndex","outputRange","progress","direction","layerStyle","transform","rotate","interpolate","viewportStyle","translateY","offsetStyle","top","lineStyle","borderColor","borderWidth","borderRadius","key","layer","create","justifyContent","alignItems","absoluteFillObject"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/ActivityIndicator.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Whether to show the indicator or hide it.\n   */\n  animating?: boolean;\n  /**\n   * The color of the spinner.\n   */\n  color?: string;\n  /**\n   * Size of the indicator.\n   */\n  size?: 'small' | 'large' | number;\n  /**\n   * Whether the indicator should hide when not animating.\n   */\n  hidesWhenStopped?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst DURATION = 2400;\n\n/**\n * Activity indicator is used to present progress of some activity in the app.\n * It can be used as a drop-in for the ActivityIndicator shipped with React Native.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/activity-indicator.gif\" style=\"width: 100px;\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ActivityIndicator, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ActivityIndicator animating={true} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst ActivityIndicator = ({\n  animating = true,\n  color: indicatorColor,\n  hidesWhenStopped = true,\n  size: indicatorSize = 'small',\n  style,\n  theme,\n  ...rest\n}: Props) => {\n  const { current: timer } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { current: fade } = React.useRef<Animated.Value>(\n    new Animated.Value(!animating && hidesWhenStopped ? 0 : 1)\n  );\n\n  const rotation = React.useRef<Animated.CompositeAnimation | undefined>(\n    undefined\n  );\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  const startRotation = React.useCallback(() => {\n    // Show indicator\n    Animated.timing(fade, {\n      duration: 200 * scale,\n      toValue: 1,\n      isInteraction: false,\n      useNativeDriver: true,\n    }).start();\n\n    // Circular animation in loop\n    if (rotation.current) {\n      timer.setValue(0);\n      // $FlowFixMe\n      Animated.loop(rotation.current).start();\n    }\n  }, [scale, fade, timer]);\n\n  const stopRotation = () => {\n    if (rotation.current) {\n      rotation.current.stop();\n    }\n  };\n\n  React.useEffect(() => {\n    if (rotation.current === undefined) {\n      // Circular animation in loop\n      rotation.current = Animated.timing(timer, {\n        duration: DURATION,\n        easing: Easing.linear,\n        // Animated.loop does not work if useNativeDriver is true on web\n        useNativeDriver: Platform.OS !== 'web',\n        toValue: 1,\n        isInteraction: false,\n      });\n    }\n\n    if (animating) {\n      startRotation();\n    } else if (hidesWhenStopped) {\n      // Hide indicator first and then stop rotation\n      Animated.timing(fade, {\n        duration: 200 * scale,\n        toValue: 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start(stopRotation);\n    } else {\n      stopRotation();\n    }\n  }, [animating, fade, hidesWhenStopped, startRotation, scale, timer]);\n\n  const color = indicatorColor || theme.colors.primary;\n  const size =\n    typeof indicatorSize === 'string'\n      ? indicatorSize === 'small'\n        ? 24\n        : 48\n      : indicatorSize\n      ? indicatorSize\n      : 24;\n\n  const frames = (60 * DURATION) / 1000;\n  const easing = Easing.bezier(0.4, 0.0, 0.7, 1.0);\n  const containerStyle = {\n    width: size,\n    height: size / 2,\n    overflow: 'hidden' as const,\n  };\n\n  return (\n    <View\n      style={[styles.container, style]}\n      {...rest}\n      accessible\n      accessibilityRole=\"progressbar\"\n      accessibilityState={{ busy: animating }}\n    >\n      <Animated.View\n        style={[{ width: size, height: size, opacity: fade }]}\n        collapsable={false}\n      >\n        {[0, 1].map((index) => {\n          // Thanks to https://github.com/n4kz/react-native-indicators for the great work\n          const inputRange = Array.from(\n            new Array(frames),\n            (_, frameIndex) => frameIndex / (frames - 1)\n          );\n          const outputRange = Array.from(new Array(frames), (_, frameIndex) => {\n            let progress = (2 * frameIndex) / (frames - 1);\n            const rotation = index ? +(360 - 15) : -(180 - 15);\n\n            if (progress > 1.0) {\n              progress = 2.0 - progress;\n            }\n\n            const direction = index ? -1 : +1;\n\n            return `${direction * (180 - 30) * easing(progress) + rotation}deg`;\n          });\n\n          const layerStyle = {\n            width: size,\n            height: size,\n            transform: [\n              {\n                rotate: timer.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [`${0 + 30 + 15}deg`, `${2 * 360 + 30 + 15}deg`],\n                }),\n              },\n            ],\n          };\n\n          const viewportStyle = {\n            width: size,\n            height: size,\n            transform: [\n              {\n                translateY: index ? -size / 2 : 0,\n              },\n              {\n                rotate: timer.interpolate({ inputRange, outputRange }),\n              },\n            ],\n          };\n\n          const offsetStyle = index ? { top: size / 2 } : null;\n\n          const lineStyle = {\n            width: size,\n            height: size,\n            borderColor: color,\n            borderWidth: size / 10,\n            borderRadius: size / 2,\n          };\n\n          return (\n            <Animated.View key={index} style={[styles.layer]}>\n              <Animated.View style={layerStyle}>\n                <Animated.View\n                  style={[containerStyle, offsetStyle]}\n                  collapsable={false}\n                >\n                  <Animated.View style={viewportStyle}>\n                    <Animated.View style={containerStyle} collapsable={false}>\n                      <Animated.View style={lineStyle} />\n                    </Animated.View>\n                  </Animated.View>\n                </Animated.View>\n              </Animated.View>\n            </Animated.View>\n          );\n        })}\n      </Animated.View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n\n  layer: {\n    ...StyleSheet.absoluteFillObject,\n\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(ActivityIndicator);\n"]},"metadata":{},"sourceType":"module"}