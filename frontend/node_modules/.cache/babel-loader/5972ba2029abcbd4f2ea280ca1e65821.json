{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport color from 'color';\nimport { Animated, View, StyleSheet, Easing, ScrollView, Text, Platform, I18nManager } from 'react-native';\nimport Surface from '../../Surface';\nimport Icon from '../../Icon';\nimport TouchableRipple from '../../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../../core/theming';\nimport { white, black } from '../../../styles/colors';\nimport AnimatedText from '../../Typography/AnimatedText';\nimport { getCombinedStyles } from './utils';\nconst SIZE = 56;\nconst BORDER_RADIUS = SIZE / 2;\nconst SCALE = 0.9;\n\nconst AnimatedFAB = _ref => {\n  let {\n    icon,\n    label,\n    accessibilityLabel = label,\n    accessibilityState,\n    color: customColor,\n    disabled,\n    onPress,\n    onLongPress,\n    theme,\n    style,\n    visible = true,\n    uppercase = true,\n    testID,\n    animateFrom = 'right',\n    extended = false,\n    iconMode = 'dynamic',\n    ...rest\n  } = _ref;\n  const isIOS = Platform.OS === 'ios';\n  const isAnimatedFromRight = animateFrom === 'right';\n  const isIconStatic = iconMode === 'static';\n  const {\n    isRTL\n  } = I18nManager;\n  const {\n    current: visibility\n  } = React.useRef(new Animated.Value(visible ? 1 : 0));\n  const {\n    current: animFAB\n  } = React.useRef(new Animated.Value(0));\n  const {\n    scale\n  } = theme.animation;\n  const [textWidth, setTextWidth] = React.useState(0);\n  const [textHeight, setTextHeight] = React.useState(0);\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n  const disabledColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n  const {\n    backgroundColor = disabled ? disabledColor : theme.colors.accent\n  } = StyleSheet.flatten(style) || {};\n  let foregroundColor;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  } else {\n    foregroundColor = !color(backgroundColor).isLight() ? white : 'rgba(0, 0, 0, .54)';\n  }\n\n  const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n  const extendedWidth = textWidth + 1.5 * SIZE;\n  const distance = isAnimatedFromRight ? -textWidth - BORDER_RADIUS : textWidth + BORDER_RADIUS;\n  React.useEffect(() => {\n    Animated.timing(animFAB, {\n      toValue: !extended ? 0 : distance,\n      duration: 150 * scale,\n      useNativeDriver: true,\n      easing: Easing.linear\n    }).start();\n  }, [animFAB, scale, distance, extended]);\n\n  const onTextLayout = _ref2 => {\n    let {\n      nativeEvent\n    } = _ref2;\n    const currentWidth = Math.ceil(nativeEvent.lines[0].width);\n    const currentHeight = Math.ceil(nativeEvent.lines[0].height);\n\n    if (currentWidth !== textWidth || currentHeight !== textHeight) {\n      setTextHeight(currentHeight);\n\n      if (isIOS) {\n        return setTextWidth(currentWidth - 12);\n      }\n\n      setTextWidth(currentWidth);\n    }\n  };\n\n  const propForDirection = right => {\n    if (isAnimatedFromRight) {\n      return right;\n    }\n\n    return right.reverse();\n  };\n\n  const combinedStyles = getCombinedStyles({\n    isAnimatedFromRight,\n    isIconStatic,\n    distance,\n    animFAB\n  });\n  return /*#__PURE__*/React.createElement(Surface, _extends({}, rest, {\n    style: [{\n      opacity: visibility,\n      transform: [{\n        scale: visibility\n      }],\n      elevation: isIOS ? 6 : 0\n    }, styles.container, disabled && styles.disabled, style]\n  }), /*#__PURE__*/React.createElement(Animated.View, {\n    style: [{\n      transform: [{\n        scaleY: animFAB.interpolate({\n          inputRange: propForDirection([distance, 0]),\n          outputRange: propForDirection([SCALE, 1])\n        })\n      }]\n    }, styles.standard]\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [StyleSheet.absoluteFill, styles.shadowWrapper]\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.shadow, {\n      width: extendedWidth,\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.9 * distance, 0]),\n        outputRange: propForDirection([1, 0.15, 0])\n      })\n    }]\n  }), /*#__PURE__*/React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, styles.shadow, {\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.9 * distance, 0]),\n        outputRange: propForDirection([0, 0.85, 1])\n      }),\n      width: SIZE,\n      borderRadius: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0]),\n        outputRange: propForDirection([SIZE / (extendedWidth / SIZE), BORDER_RADIUS])\n      })\n    }, combinedStyles.absoluteFill]\n  })), /*#__PURE__*/React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: [styles.innerWrapper]\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.standard, {\n      width: extendedWidth,\n      backgroundColor\n    }, combinedStyles.innerWrapper]\n  }, /*#__PURE__*/React.createElement(TouchableRipple, {\n    borderless: true,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    rippleColor: rippleColor,\n    disabled: disabled,\n    accessibilityLabel: accessibilityLabel // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: { ...accessibilityState,\n      disabled\n    },\n    testID: testID,\n    style: styles.touchable\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.standard, {\n      width: extendedWidth\n    }]\n  }))))), /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.iconWrapper, combinedStyles.iconWrapper],\n    pointerEvents: \"none\"\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    size: 24,\n    color: foregroundColor\n  })), /*#__PURE__*/React.createElement(View, {\n    pointerEvents: \"none\"\n  }, /*#__PURE__*/React.createElement(AnimatedText, {\n    numberOfLines: 1,\n    onTextLayout: isIOS ? onTextLayout : undefined,\n    ellipsizeMode: 'tail',\n    style: [{\n      [isAnimatedFromRight || isRTL ? 'right' : 'left']: isIconStatic ? isIOS ? SIZE - 10 : SIZE - 12 : BORDER_RADIUS\n    }, {\n      minWidth: textWidth,\n      top: -BORDER_RADIUS - textHeight / 2,\n      opacity: animFAB.interpolate({\n        inputRange: propForDirection([distance, 0.7 * distance, 0]),\n        outputRange: propForDirection([1, 0, 0])\n      }),\n      transform: [{\n        translateX: animFAB.interpolate({\n          inputRange: propForDirection([distance, 0]),\n          outputRange: propForDirection([0, SIZE])\n        })\n      }]\n    }, styles.label, uppercase && styles.uppercaseLabel, {\n      color: foregroundColor,\n      ...theme.fonts.medium\n    }]\n  }, label)), !isIOS &&\n  /*#__PURE__*/\n  // Method `onTextLayout` on Android returns sizes of text visible on the screen,\n  // however during render the text in `FAB` isn't fully visible. In order to get\n  // proper text measurements there is a need to additionaly render that text, but\n  // wrapped in absolutely positioned `ScrollView` which height is 0.\n  React.createElement(ScrollView, {\n    style: styles.textPlaceholderContainer\n  }, /*#__PURE__*/React.createElement(Text, {\n    onTextLayout: onTextLayout\n  }, label)));\n};\n\nconst styles = StyleSheet.create({\n  standard: {\n    height: SIZE,\n    borderRadius: BORDER_RADIUS\n  },\n  disabled: {\n    elevation: 0\n  },\n  container: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    borderRadius: BORDER_RADIUS\n  },\n  innerWrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden',\n    borderRadius: BORDER_RADIUS\n  },\n  shadowWrapper: {\n    elevation: 0\n  },\n  shadow: {\n    elevation: 6,\n    borderRadius: BORDER_RADIUS\n  },\n  touchable: {\n    borderRadius: BORDER_RADIUS\n  },\n  iconWrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    height: SIZE,\n    width: SIZE\n  },\n  label: {\n    position: 'absolute'\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  },\n  textPlaceholderContainer: {\n    height: 0,\n    position: 'absolute'\n  }\n});\nexport default withTheme(AnimatedFAB);","map":{"version":3,"mappings":"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","names":["React","color","Animated","View","StyleSheet","Easing","ScrollView","Text","Platform","I18nManager","Surface","Icon","TouchableRipple","withTheme","white","black","AnimatedText","getCombinedStyles","SIZE","BORDER_RADIUS","SCALE","AnimatedFAB","_ref","icon","label","accessibilityLabel","accessibilityState","customColor","disabled","onPress","onLongPress","theme","style","visible","uppercase","testID","animateFrom","extended","iconMode","rest","isIOS","OS","isAnimatedFromRight","isIconStatic","isRTL","current","visibility","useRef","Value","animFAB","scale","animation","textWidth","setTextWidth","useState","textHeight","setTextHeight","useEffect","timing","toValue","duration","useNativeDriver","start","disabledColor","dark","alpha","rgb","string","backgroundColor","colors","accent","flatten","foregroundColor","isLight","rippleColor","extendedWidth","distance","easing","linear","onTextLayout","_ref2","nativeEvent","currentWidth","Math","ceil","lines","width","currentHeight","height","propForDirection","right","reverse","combinedStyles","opacity","transform","elevation","styles","container","scaleY","interpolate","inputRange","outputRange","standard","absoluteFill","shadowWrapper","pointerEvents","shadow","borderRadius","innerWrapper","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","touchable","iconWrapper","source","size","numberOfLines","undefined","ellipsizeMode","minWidth","top","translateX","uppercaseLabel","fonts","medium","textPlaceholderContainer","create","position","flexDirection","overflow","alignItems","justifyContent","textTransform"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/FAB/AnimatedFAB/AnimatedFAB.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  Easing,\n  ScrollView,\n  Text,\n  Platform,\n  I18nManager,\n} from 'react-native';\nimport Surface from '../../Surface';\nimport Icon from '../../Icon';\nimport TouchableRipple from '../../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren } from '../../../types';\nimport type { IconSource } from '../../Icon';\nimport { withTheme } from '../../../core/theming';\nimport type {\n  AccessibilityState,\n  NativeSyntheticEvent,\n  TextLayoutEventData,\n} from 'react-native';\nimport { white, black } from '../../../styles/colors';\nimport AnimatedText from '../../Typography/AnimatedText';\nimport { getCombinedStyles } from './utils';\n\nexport type AnimatedFABIconMode = 'static' | 'dynamic';\nexport type AnimatedFABAnimateFrom = 'left' | 'right';\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Label for extended `FAB`.\n   */\n  label: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Whether icon should be translated to the end of extended `FAB` or be static and stay in the same place. The default value is `dynamic`.\n   */\n  iconMode?: AnimatedFABIconMode;\n  /**\n   * Indicates from which direction animation should be performed. The default value is `right`.\n   */\n  animateFrom?: AnimatedFABAnimateFrom;\n  /**\n   * Whether `FAB` should start animation to extend.\n   */\n  extended: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  testID?: string;\n};\n\nconst SIZE = 56;\nconst BORDER_RADIUS = SIZE / 2;\nconst SCALE = 0.9;\n\nconst AnimatedFAB = ({\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = true,\n  testID,\n  animateFrom = 'right',\n  extended = false,\n  iconMode = 'dynamic',\n  ...rest\n}: Props) => {\n  const isIOS = Platform.OS === 'ios';\n  const isAnimatedFromRight = animateFrom === 'right';\n  const isIconStatic = iconMode === 'static';\n  const { isRTL } = I18nManager;\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { current: animFAB } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n  const { scale } = theme.animation;\n\n  const [textWidth, setTextWidth] = React.useState<number>(0);\n  const [textHeight, setTextHeight] = React.useState<number>(0);\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const { backgroundColor = disabled ? disabledColor : theme.colors.accent } =\n    StyleSheet.flatten<ViewStyle>(style) || {};\n\n  let foregroundColor: string;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else {\n    foregroundColor = !color(backgroundColor as string).isLight()\n      ? white\n      : 'rgba(0, 0, 0, .54)';\n  }\n\n  const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n\n  const extendedWidth = textWidth + 1.5 * SIZE;\n\n  const distance = isAnimatedFromRight\n    ? -textWidth - BORDER_RADIUS\n    : textWidth + BORDER_RADIUS;\n\n  React.useEffect(() => {\n    Animated.timing(animFAB, {\n      toValue: !extended ? 0 : distance,\n      duration: 150 * scale,\n      useNativeDriver: true,\n      easing: Easing.linear,\n    }).start();\n  }, [animFAB, scale, distance, extended]);\n\n  const onTextLayout = ({\n    nativeEvent,\n  }: NativeSyntheticEvent<TextLayoutEventData>) => {\n    const currentWidth = Math.ceil(nativeEvent.lines[0].width);\n    const currentHeight = Math.ceil(nativeEvent.lines[0].height);\n\n    if (currentWidth !== textWidth || currentHeight !== textHeight) {\n      setTextHeight(currentHeight);\n\n      if (isIOS) {\n        return setTextWidth(currentWidth - 12);\n      }\n\n      setTextWidth(currentWidth);\n    }\n  };\n\n  const propForDirection = <T,>(right: T[]): T[] => {\n    if (isAnimatedFromRight) {\n      return right;\n    }\n\n    return right.reverse();\n  };\n\n  const combinedStyles = getCombinedStyles({\n    isAnimatedFromRight,\n    isIconStatic,\n    distance,\n    animFAB,\n  });\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n            elevation: isIOS ? 6 : 0,\n          },\n          styles.container,\n          disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n    >\n      <Animated.View\n        style={[\n          {\n            transform: [\n              {\n                scaleY: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([SCALE, 1]),\n                }),\n              },\n            ],\n          },\n          styles.standard,\n        ]}\n      >\n        <View style={[StyleSheet.absoluteFill, styles.shadowWrapper]}>\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              styles.shadow,\n              {\n                width: extendedWidth,\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([1, 0.15, 0]),\n                }),\n              },\n            ]}\n          />\n          <Animated.View\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              styles.shadow,\n              {\n                opacity: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0.9 * distance, 0]),\n                  outputRange: propForDirection([0, 0.85, 1]),\n                }),\n                width: SIZE,\n                borderRadius: animFAB.interpolate({\n                  inputRange: propForDirection([distance, 0]),\n                  outputRange: propForDirection([\n                    SIZE / (extendedWidth / SIZE),\n                    BORDER_RADIUS,\n                  ]),\n                }),\n              },\n              combinedStyles.absoluteFill,\n            ]}\n          />\n        </View>\n        <Animated.View pointerEvents=\"box-none\" style={[styles.innerWrapper]}>\n          <Animated.View\n            style={[\n              styles.standard,\n              {\n                width: extendedWidth,\n                backgroundColor,\n              },\n              combinedStyles.innerWrapper,\n            ]}\n          >\n            <TouchableRipple\n              borderless\n              onPress={onPress}\n              onLongPress={onLongPress}\n              rippleColor={rippleColor}\n              disabled={disabled}\n              accessibilityLabel={accessibilityLabel}\n              // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n              accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n              accessibilityComponentType=\"button\"\n              accessibilityRole=\"button\"\n              accessibilityState={{ ...accessibilityState, disabled }}\n              testID={testID}\n              style={styles.touchable}\n            >\n              <View\n                style={[\n                  styles.standard,\n                  {\n                    width: extendedWidth,\n                  },\n                ]}\n              />\n            </TouchableRipple>\n          </Animated.View>\n        </Animated.View>\n      </Animated.View>\n\n      <Animated.View\n        style={[styles.iconWrapper, combinedStyles.iconWrapper]}\n        pointerEvents=\"none\"\n      >\n        <Icon source={icon} size={24} color={foregroundColor} />\n      </Animated.View>\n\n      <View pointerEvents=\"none\">\n        <AnimatedText\n          numberOfLines={1}\n          onTextLayout={isIOS ? onTextLayout : undefined}\n          ellipsizeMode={'tail'}\n          style={[\n            {\n              [isAnimatedFromRight || isRTL ? 'right' : 'left']: isIconStatic\n                ? isIOS\n                  ? SIZE - 10\n                  : SIZE - 12\n                : BORDER_RADIUS,\n            },\n            {\n              minWidth: textWidth,\n              top: -BORDER_RADIUS - textHeight / 2,\n              opacity: animFAB.interpolate({\n                inputRange: propForDirection([distance, 0.7 * distance, 0]),\n                outputRange: propForDirection([1, 0, 0]),\n              }),\n              transform: [\n                {\n                  translateX: animFAB.interpolate({\n                    inputRange: propForDirection([distance, 0]),\n                    outputRange: propForDirection([0, SIZE]),\n                  }),\n                },\n              ],\n            },\n            styles.label,\n            uppercase && styles.uppercaseLabel,\n            {\n              color: foregroundColor,\n              ...theme.fonts.medium,\n            },\n          ]}\n        >\n          {label}\n        </AnimatedText>\n      </View>\n\n      {!isIOS && (\n        // Method `onTextLayout` on Android returns sizes of text visible on the screen,\n        // however during render the text in `FAB` isn't fully visible. In order to get\n        // proper text measurements there is a need to additionaly render that text, but\n        // wrapped in absolutely positioned `ScrollView` which height is 0.\n        <ScrollView style={styles.textPlaceholderContainer}>\n          <Text onTextLayout={onTextLayout}>{label}</Text>\n        </ScrollView>\n      )}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  standard: {\n    height: SIZE,\n    borderRadius: BORDER_RADIUS,\n  },\n  disabled: {\n    elevation: 0,\n  },\n  container: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    borderRadius: BORDER_RADIUS,\n  },\n  innerWrapper: {\n    flexDirection: 'row',\n    overflow: 'hidden',\n    borderRadius: BORDER_RADIUS,\n  },\n  shadowWrapper: {\n    elevation: 0,\n  },\n  shadow: {\n    elevation: 6,\n    borderRadius: BORDER_RADIUS,\n  },\n  touchable: {\n    borderRadius: BORDER_RADIUS,\n  },\n  iconWrapper: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    height: SIZE,\n    width: SIZE,\n  },\n  label: {\n    position: 'absolute',\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  textPlaceholderContainer: {\n    height: 0,\n    position: 'absolute',\n  },\n});\n\nexport default withTheme(AnimatedFAB);\n"]},"metadata":{},"sourceType":"module"}