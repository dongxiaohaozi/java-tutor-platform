{"ast":null,"code":"var _jsxFileName = \"/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/src/Pages/methods/Methods.jsx\",\n    _this = this;\n\nimport React from 'react';\nimport './methods.scss';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { far } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Methods = _ref => {\n  let {\n    submit\n  } = _ref;\n  return function (submit) {\n    function submit(e) {\n      e.preventDefault();\n      console.log(\"hh\");\n      let code = document.getElementById(\"input\").value;\n      let answerID = Number(e.target.id.replace(/[^0-9]+/g, '')); // eg: \"1stQuestion\" => 1\n\n      console.log(answerID);\n      let data = {\n        code: code\n      };\n      fetch(`/code/${answerID}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      }).then(res => res.text()).then(txt => alert(txt));\n    }\n\n    const obj1 = ` public class MyFirstClass {\n    public void myFirstMethod() {\n      // code\n    }\n  }`;\n    const obj2 = ` public class MyFirstClass {\n    public void myFirstMethod(Fruit fruit) {\n        // code to be executed\n    }\n}`;\n    const obj3 = `Car car = new Car()`;\n    const obj4 = ` String car = \"VM\";\n   public boolean mySecondMethod(String car) {\n       \n       if (car == \"VM\") {\n           return true;\n       } else {\n           return false;\n       }\n   }\nmySecondMethod(car)`;\n    const obj5 = ` String car = \"VM\";\n   public boolean mySecondMethod(String car) {\n       \n       if (car.equals(\"VM\") {\n           return true;\n       } else {\n           return false;\n       }\n   }\nmySecondMethod(car)`;\n\n    const Code = _ref2 => {\n      let {\n        children\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n        language: \"java\",\n        style: far,\n        children: children\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }, _this);\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"widgets\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Methods\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"In Java, the appearance of method is somehow different from the method's in other languages. Because Java emphasizes the type of data, so no matter where and how we declare a variable, we must add the type in front of the variable name after the modifier. For a method, we need to write the type of return value, if the method doesn\\u2019t return a value, we use keyword \\\"void\\\". For the parameter, we also need to indicate the type. So the fundamental look of method is like this:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"In Java, there are two kinds of methods, one is the main method, it's used for executing the program, and the other is the method declared in the class we create.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"example\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Example\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 27\n          }, _this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"code\",\n            children: /*#__PURE__*/_jsxDEV(Code, {\n              children: obj1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 31\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 28\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Notice, any type of data can be the parameter, it is totally okay we use the object of class we create to be the parameter:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"example\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Example\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 27\n          }, _this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"code\",\n            children: /*#__PURE__*/_jsxDEV(Code, {\n              children: obj2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 31\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 28\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"We know the data in Java have two general types: primitive and reference. For reference type data, such as string, \\u201C=\\u201D actually means convey the referencing address in memory  rather than copy the value. Below code firstly creates a new object and allocates the memory space and assigns a pointer to it, then copies the pointer to the car variable.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"example\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Example\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 27\n          }, _this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"code\",\n            children: /*#__PURE__*/_jsxDEV(Code, {\n              children: obj3\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 31\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 28\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"So the following code should return false in principle, because \\u201C==\\u201D is to check if the referencing object is the identical:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"example\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Example\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 27\n          }, _this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"code\",\n            children: /*#__PURE__*/_jsxDEV(Code, {\n              children: obj4\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 31\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 28\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"but in reality because the compiler is smart enough to recognize the same value so only construct one referenced string.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"To avoid this issue, when we compare two strings, we better use String.equals() method:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"example\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Example\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 27\n          }, _this), /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"code\",\n            children: /*#__PURE__*/_jsxDEV(Code, {\n              children: obj5\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 31\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 28\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Notice\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 28\n          }, _this), \": the initial value of any reference type data is null, meaning It haven't has a referencing address yet, if we want to pass this object to another object, there would be a run-time error occurring.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, _this)\n    }, void 0, false);\n  }(submit);\n};\n\n_c = Methods;\nexport default Methods;\n\nvar _c;\n\n$RefreshReg$(_c, \"Methods\");","map":{"version":3,"names":["React","SyntaxHighlighter","far","Methods","submit","e","preventDefault","console","log","code","document","getElementById","value","answerID","Number","target","id","replace","data","fetch","method","headers","body","JSON","stringify","then","res","text","txt","alert","obj1","obj2","obj3","obj4","obj5","Code","children"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/src/Pages/methods/Methods.jsx"],"sourcesContent":["import React from 'react'\r\nimport './methods.scss'\r\nimport  SyntaxHighlighter  from 'react-syntax-highlighter';\r\nimport {far} from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\nconst Methods = ({submit}) => {\r\n\r\n           function submit (e) {\r\n      e.preventDefault();\r\n      console.log(\"hh\")\r\n      let code = document.getElementById(\"input\").value;\r\n      let answerID = Number((e.target.id).replace (/[^0-9]+/g, '')); // eg: \"1stQuestion\" => 1\r\n      console.log(answerID)\r\n      let data = { code: code };\r\n      fetch(`/code/${answerID}`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      })\r\n        .then((res) => res.text())\r\n        .then((txt) => alert(txt));\r\n    }\r\n   \r\n    const obj1 = \r\n  ` public class MyFirstClass {\r\n    public void myFirstMethod() {\r\n      // code\r\n    }\r\n  }`\r\n    const obj2 =\r\n  ` public class MyFirstClass {\r\n    public void myFirstMethod(Fruit fruit) {\r\n        // code to be executed\r\n    }\r\n}`\r\n   const obj3 =\r\n   `Car car = new Car()`\r\n   const obj4 =\r\n  ` String car = \"VM\";\r\n   public boolean mySecondMethod(String car) {\r\n       \r\n       if (car == \"VM\") {\r\n           return true;\r\n       } else {\r\n           return false;\r\n       }\r\n   }\r\nmySecondMethod(car)`\r\n   const obj5=\r\n  ` String car = \"VM\";\r\n   public boolean mySecondMethod(String car) {\r\n       \r\n       if (car.equals(\"VM\") {\r\n           return true;\r\n       } else {\r\n           return false;\r\n       }\r\n   }\r\nmySecondMethod(car)`\r\n\r\nconst Code = ({ children }) => (\r\n    <SyntaxHighlighter language=\"java\" style={far}>\r\n        { children }\r\n    </SyntaxHighlighter>\r\n);\r\n  return (\r\n\r\n    <>\r\n                <div className=\"widgets\">\r\n                    \r\n                        \r\n                        <h1>Methods</h1>\r\n                        \r\n                        <p>In Java, the appearance of method is somehow different from the method's in other languages. Because Java emphasizes the type of data, so no matter where and how we declare a variable, we must add the type in front of the variable name after the modifier. For a method, we need to write the type of return value, if the method doesn’t return a value, we use keyword \"void\". For the parameter, we also need to indicate the type. So the fundamental look of method is like this:</p>\r\n                        <p>In Java, there are two kinds of methods, one is the main method, it's used for executing the program, and the other is the method declared in the class we create.</p>\r\n                        <div className = \"example\">\r\n                          <h3>Example</h3>\r\n                           <pre className = \"code\" >\r\n                              <Code>{obj1}</Code>\r\n                           </pre>\r\n                        </div>\r\n                        \r\n                        <p>Notice, any type of data can be the parameter, it is totally okay we use the object of class we create to be the parameter:</p>\r\n                        <div className = \"example\">\r\n                          <h3>Example</h3>\r\n                           <pre className = \"code\" >\r\n                              <Code>{obj2}</Code>\r\n                           </pre>\r\n                        </div>\r\n                        <p>We know the data in Java have two general types: primitive and reference. For reference type data, such as string, “=” actually means convey the referencing address in memory  rather than copy the value. Below code firstly creates a new object and allocates the memory space and assigns a pointer to it, then copies the pointer to the car variable.</p>\r\n                        <div className = \"example\">\r\n                          <h3>Example</h3>\r\n                           <pre className = \"code\" >\r\n                              <Code>{obj3}</Code>\r\n                           </pre>\r\n                        </div>\r\n                        <p>So the following code should return false in principle, because “==” is to check if the referencing object is the identical:</p>\r\n                        <div className = \"example\">\r\n                          <h3>Example</h3>\r\n                           <pre className = \"code\" >\r\n                              <Code>{obj4}</Code>\r\n                           </pre>\r\n                        </div>\r\n                        <p>but in reality because the compiler is smart enough to recognize the same value so only construct one referenced string.</p>\r\n                        <p>To avoid this issue, when we compare two strings, we better use String.equals() method:</p>\r\n                        <div className = \"example\">\r\n                          <h3>Example</h3>\r\n                           <pre className = \"code\" >\r\n                              <Code>{obj5}</Code>\r\n                           </pre>\r\n                        </div>\r\n                        <p><strong>Notice</strong>: the initial value of any reference type data is null, meaning It haven't has a referencing address yet, if we want to pass this object to another object, there would be a run-time error occurring.</p>\r\n                 </div>        \r\n           </> \r\n        \r\n  )\r\n}\r\n\r\nexport default Methods"],"mappings":"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"},"metadata":{},"sourceType":"module"}