{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport color from 'color';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst HelperText = _ref => {\n  let {\n    style,\n    type = 'info',\n    visible = true,\n    theme,\n    onLayout,\n    padding = 'normal',\n    ...rest\n  } = _ref;\n  const {\n    current: shown\n  } = React.useRef(new Animated.Value(visible ? 1 : 0));\n  let {\n    current: textHeight\n  } = React.useRef(0);\n  const {\n    scale\n  } = theme.animation;\n  const {\n    maxFontSizeMultiplier = 1.5\n  } = rest;\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = e => {\n    onLayout === null || onLayout === void 0 ? void 0 : onLayout(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const {\n    colors,\n    dark\n  } = theme;\n  const textColor = type === 'error' ? colors.error : color(colors.text).alpha(dark ? 0.7 : 0.54).rgb().string();\n  return /*#__PURE__*/React.createElement(AnimatedText, _extends({\n    onLayout: handleTextLayout,\n    style: [styles.text, padding !== 'none' ? styles.padding : {}, {\n      color: textColor,\n      opacity: shown,\n      transform: visible && type === 'error' ? [{\n        translateY: shown.interpolate({\n          inputRange: [0, 1],\n          outputRange: [-textHeight / 2, 0]\n        })\n      }] : []\n    }, style],\n    maxFontSizeMultiplier: maxFontSizeMultiplier\n  }, rest), rest.children);\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4\n  },\n  padding: {\n    paddingHorizontal: 12\n  }\n});\nexport default withTheme(HelperText);","map":{"version":3,"mappings":"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","names":["React","color","Animated","StyleSheet","AnimatedText","withTheme","HelperText","_ref","style","type","visible","theme","onLayout","padding","rest","current","shown","useRef","Value","textHeight","scale","animation","maxFontSizeMultiplier","useEffect","timing","toValue","duration","useNativeDriver","start","handleTextLayout","e","nativeEvent","layout","height","colors","dark","textColor","error","text","alpha","rgb","string","styles","opacity","transform","translateY","interpolate","inputRange","outputRange","children","create","fontSize","paddingVertical","paddingHorizontal"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/HelperText.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  const { maxFontSizeMultiplier = 1.5 } = rest;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors.error\n      : color(colors.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      maxFontSizeMultiplier={maxFontSizeMultiplier}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]},"metadata":{},"sourceType":"module"}