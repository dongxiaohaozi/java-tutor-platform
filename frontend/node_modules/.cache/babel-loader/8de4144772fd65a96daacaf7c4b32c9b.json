{"ast":null,"code":"import * as React from 'react';\nimport { Animated, BackHandler, Easing, StyleSheet, TouchableWithoutFeedback, View } from 'react-native';\nimport { getStatusBarHeight, getBottomSpace } from 'react-native-iphone-x-helper';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport useAnimatedValue from '../utils/useAnimatedValue';\nimport { addEventListener } from '../utils/addEventListener';\nconst DEFAULT_DURATION = 220;\nconst TOP_INSET = getStatusBarHeight(true);\nconst BOTTOM_INSET = getBottomSpace();\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/modal.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showModal = () => setVisible(true);\n *   const hideModal = () => setVisible(false);\n *   const containerStyle = {backgroundColor: 'white', padding: 20};\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <Modal visible={visible} onDismiss={hideModal} contentContainerStyle={containerStyle}>\n *           <Text>Example Modal.  Click outside this area to dismiss.</Text>\n *         </Modal>\n *       </Portal>\n *       <Button style={{marginTop: 30}} onPress={showModal}>\n *         Show\n *       </Button>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nfunction Modal(_ref) {\n  let {\n    dismissable = true,\n    visible = false,\n    overlayAccessibilityLabel = 'Close modal',\n    onDismiss,\n    children,\n    contentContainerStyle,\n    style,\n    theme,\n    testID\n  } = _ref;\n  const visibleRef = React.useRef(visible);\n  React.useEffect(() => {\n    visibleRef.current = visible;\n  });\n  const {\n    colors,\n    animation\n  } = theme;\n  const opacity = useAnimatedValue(visible ? 1 : 0);\n  const [rendered, setRendered] = React.useState(visible);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  const handleBack = () => {\n    if (dismissable) {\n      hideModal();\n    }\n\n    return true;\n  };\n\n  const subscription = React.useRef(undefined);\n\n  const showModal = () => {\n    var _subscription$current;\n\n    (_subscription$current = subscription.current) === null || _subscription$current === void 0 ? void 0 : _subscription$current.remove();\n    subscription.current = addEventListener(BackHandler, 'hardwareBackPress', handleBack);\n    const {\n      scale\n    } = animation;\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true\n    }).start();\n  };\n\n  const removeListeners = () => {\n    var _subscription$current2;\n\n    if ((_subscription$current2 = subscription.current) !== null && _subscription$current2 !== void 0 && _subscription$current2.remove) {\n      var _subscription$current3;\n\n      (_subscription$current3 = subscription.current) === null || _subscription$current3 === void 0 ? void 0 : _subscription$current3.remove();\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', handleBack);\n    }\n  };\n\n  const hideModal = () => {\n    removeListeners();\n    const {\n      scale\n    } = animation;\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true\n    }).start(_ref2 => {\n      let {\n        finished\n      } = _ref2;\n\n      if (!finished) {\n        return;\n      }\n\n      if (visible && onDismiss) {\n        onDismiss();\n      }\n\n      if (visibleRef.current) {\n        showModal();\n      } else {\n        setRendered(false);\n      }\n    });\n  };\n\n  const prevVisible = React.useRef(null);\n  React.useEffect(() => {\n    if (prevVisible.current !== visible) {\n      if (visible) {\n        showModal();\n      } else {\n        hideModal();\n      }\n    }\n\n    prevVisible.current = visible;\n  });\n  React.useEffect(() => {\n    return removeListeners;\n  }, []);\n  if (!rendered) return null;\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    pointerEvents: visible ? 'auto' : 'none',\n    accessibilityViewIsModal: true,\n    accessibilityLiveRegion: \"polite\",\n    style: StyleSheet.absoluteFill,\n    onAccessibilityEscape: hideModal,\n    testID: testID\n  }, /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {\n    accessibilityLabel: overlayAccessibilityLabel,\n    accessibilityRole: \"button\",\n    disabled: !dismissable,\n    onPress: dismissable ? hideModal : undefined,\n    importantForAccessibility: \"no\"\n  }, /*#__PURE__*/React.createElement(Animated.View, {\n    testID: `${testID}-backdrop`,\n    style: [styles.backdrop, {\n      backgroundColor: colors.backdrop,\n      opacity\n    }]\n  })), /*#__PURE__*/React.createElement(View, {\n    style: [styles.wrapper, {\n      marginTop: TOP_INSET,\n      marginBottom: BOTTOM_INSET\n    }, style],\n    pointerEvents: \"box-none\"\n  }, /*#__PURE__*/React.createElement(Surface, {\n    style: [{\n      opacity\n    }, styles.content, contentContainerStyle]\n  }, children)));\n}\n\nexport default withTheme(Modal);\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1\n  },\n  wrapper: { ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center'\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"mappings":"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","names":["React","Animated","BackHandler","Easing","StyleSheet","TouchableWithoutFeedback","View","getStatusBarHeight","getBottomSpace","Surface","withTheme","useAnimatedValue","addEventListener","DEFAULT_DURATION","TOP_INSET","BOTTOM_INSET","Modal","dismissable","visible","overlayAccessibilityLabel","onDismiss","children","contentContainerStyle","style","theme","testID","_ref","visibleRef","useRef","useEffect","current","colors","animation","opacity","rendered","setRendered","useState","handleBack","hideModal","subscription","undefined","showModal","remove","scale","timing","toValue","duration","easing","out","cubic","useNativeDriver","start","removeListeners","_subscription$current2","removeEventListener","_ref2","finished","prevVisible","pointerEvents","accessibilityViewIsModal","accessibilityLiveRegion","absoluteFill","onAccessibilityEscape","accessibilityLabel","accessibilityRole","disabled","onPress","importantForAccessibility","styles","backdrop","backgroundColor","wrapper","marginTop","marginBottom","content","create","flex","absoluteFillObject","justifyContent"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/Modal.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  BackHandler,\n  Easing,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  ViewStyle,\n  View,\n  NativeEventSubscription,\n} from 'react-native';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport useAnimatedValue from '../utils/useAnimatedValue';\nimport { addEventListener } from '../utils/addEventListener';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the modal dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the modal.\n   */\n  onDismiss?: () => void;\n  /**\n   * Accessibility label for the overlay. This is read by the screen reader when the user taps outside the modal.\n   */\n  overlayAccessibilityLabel?: string;\n  /**\n   * Determines Whether the modal is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Modal`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the content of the modal\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style for the wrapper of the modal.\n   * Use this prop to change the default wrapper style or to override safe area insets with marginTop and marginBottom.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  testID?: string;\n};\n\nconst DEFAULT_DURATION = 220;\nconst TOP_INSET = getStatusBarHeight(true);\nconst BOTTOM_INSET = getBottomSpace();\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/modal.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showModal = () => setVisible(true);\n *   const hideModal = () => setVisible(false);\n *   const containerStyle = {backgroundColor: 'white', padding: 20};\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <Modal visible={visible} onDismiss={hideModal} contentContainerStyle={containerStyle}>\n *           <Text>Example Modal.  Click outside this area to dismiss.</Text>\n *         </Modal>\n *       </Portal>\n *       <Button style={{marginTop: 30}} onPress={showModal}>\n *         Show\n *       </Button>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nfunction Modal({\n  dismissable = true,\n  visible = false,\n  overlayAccessibilityLabel = 'Close modal',\n  onDismiss,\n  children,\n  contentContainerStyle,\n  style,\n  theme,\n  testID,\n}: Props) {\n  const visibleRef = React.useRef(visible);\n\n  React.useEffect(() => {\n    visibleRef.current = visible;\n  });\n\n  const { colors, animation } = theme;\n\n  const opacity = useAnimatedValue(visible ? 1 : 0);\n\n  const [rendered, setRendered] = React.useState(visible);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  const handleBack = () => {\n    if (dismissable) {\n      hideModal();\n    }\n    return true;\n  };\n\n  const subscription = React.useRef<NativeEventSubscription | undefined>(\n    undefined\n  );\n\n  const showModal = () => {\n    subscription.current?.remove();\n    subscription.current = addEventListener(\n      BackHandler,\n      'hardwareBackPress',\n      handleBack\n    );\n\n    const { scale } = animation;\n\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const removeListeners = () => {\n    if (subscription.current?.remove) {\n      subscription.current?.remove();\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', handleBack);\n    }\n  };\n\n  const hideModal = () => {\n    removeListeners();\n    const { scale } = animation;\n\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (!finished) {\n        return;\n      }\n\n      if (visible && onDismiss) {\n        onDismiss();\n      }\n\n      if (visibleRef.current) {\n        showModal();\n      } else {\n        setRendered(false);\n      }\n    });\n  };\n\n  const prevVisible = React.useRef<boolean | null>(null);\n\n  React.useEffect(() => {\n    if (prevVisible.current !== visible) {\n      if (visible) {\n        showModal();\n      } else {\n        hideModal();\n      }\n    }\n    prevVisible.current = visible;\n  });\n\n  React.useEffect(() => {\n    return removeListeners;\n  }, []);\n\n  if (!rendered) return null;\n\n  return (\n    <Animated.View\n      pointerEvents={visible ? 'auto' : 'none'}\n      accessibilityViewIsModal\n      accessibilityLiveRegion=\"polite\"\n      style={StyleSheet.absoluteFill}\n      onAccessibilityEscape={hideModal}\n      testID={testID}\n    >\n      <TouchableWithoutFeedback\n        accessibilityLabel={overlayAccessibilityLabel}\n        accessibilityRole=\"button\"\n        disabled={!dismissable}\n        onPress={dismissable ? hideModal : undefined}\n        importantForAccessibility=\"no\"\n      >\n        <Animated.View\n          testID={`${testID}-backdrop`}\n          style={[\n            styles.backdrop,\n            { backgroundColor: colors.backdrop, opacity },\n          ]}\n        />\n      </TouchableWithoutFeedback>\n      <View\n        style={[\n          styles.wrapper,\n          { marginTop: TOP_INSET, marginBottom: BOTTOM_INSET },\n          style,\n        ]}\n        pointerEvents=\"box-none\"\n      >\n        <Surface\n          style={\n            [\n              { opacity },\n              styles.content,\n              contentContainerStyle,\n            ] as StyleProp<ViewStyle>\n          }\n        >\n          {children}\n        </Surface>\n      </View>\n    </Animated.View>\n  );\n}\n\nexport default withTheme(Modal);\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1,\n  },\n  wrapper: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}