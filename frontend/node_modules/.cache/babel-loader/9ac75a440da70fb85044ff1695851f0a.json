{"ast":null,"code":"import * as React from 'react';\nimport { Keyboard, Platform } from 'react-native';\nexport default function useIsKeyboardShown(_ref) {\n  let {\n    onShow,\n    onHide\n  } = _ref;\n  React.useEffect(() => {\n    let willShowSubscription;\n    let willHideSubscription;\n    let didShowSubscription;\n    let didHideSubscription;\n\n    if (Platform.OS === 'ios') {\n      willShowSubscription = Keyboard.addListener('keyboardWillShow', onShow);\n      willHideSubscription = Keyboard.addListener('keyboardWillHide', onHide);\n    } else {\n      didShowSubscription = Keyboard.addListener('keyboardDidShow', onShow);\n      didHideSubscription = Keyboard.addListener('keyboardDidHide', onHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        var _willShowSubscription, _willHideSubscription;\n\n        if ((_willShowSubscription = willShowSubscription) !== null && _willShowSubscription !== void 0 && _willShowSubscription.remove) {\n          willShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillShow', onShow);\n        }\n\n        if ((_willHideSubscription = willHideSubscription) !== null && _willHideSubscription !== void 0 && _willHideSubscription.remove) {\n          willHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillHide', onHide);\n        }\n      } else {\n        var _didShowSubscription, _didHideSubscription;\n\n        if ((_didShowSubscription = didShowSubscription) !== null && _didShowSubscription !== void 0 && _didShowSubscription.remove) {\n          didShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidShow', onShow);\n        }\n\n        if ((_didHideSubscription = didHideSubscription) !== null && _didHideSubscription !== void 0 && _didHideSubscription.remove) {\n          didHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidHide', onHide);\n        }\n      }\n    };\n  }, [onHide, onShow]);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAA4CC,QAA5C,QAA4D,cAA5D;AAMA,eAAe,SAASC,kBAAT,OAAuD;EAAA,IAA3B;IAAEC,MAAF;IAAUC;EAAV,IAA2BC;EACpEN,KAAK,CAACO,SAANP,CAAgB,MAAM;IACpB,IAAIQ,oBAAJ;IACA,IAAIC,oBAAJ;IACA,IAAIC,mBAAJ;IACA,IAAIC,mBAAJ;;IAEA,IAAIT,QAAQ,CAACU,EAATV,KAAgB,KAApB,EAA2B;MACzBM,oBAAoB,GAAGP,QAAQ,CAACY,WAATZ,CAAqB,kBAArBA,EAAyCG,MAAzCH,CAAvBO;MACAC,oBAAoB,GAAGR,QAAQ,CAACY,WAATZ,CAAqB,kBAArBA,EAAyCI,MAAzCJ,CAAvBQ;IAFF,OAGO;MACLC,mBAAmB,GAAGT,QAAQ,CAACY,WAATZ,CAAqB,iBAArBA,EAAwCG,MAAxCH,CAAtBS;MACAC,mBAAmB,GAAGV,QAAQ,CAACY,WAATZ,CAAqB,iBAArBA,EAAwCI,MAAxCJ,CAAtBU;IACD;;IAED,OAAO,MAAM;MACX,IAAIT,QAAQ,CAACU,EAATV,KAAgB,KAApB,EAA2B;QAAA;;QACzB,6BAAIM,oBAAJ,kDAAIM,sBAAsBC,MAA1B,EAAkC;UAChCP,oBAAoB,CAACO,MAArBP;QADF,OAEO;UACLP,QAAQ,CAACe,cAATf,CAAwB,kBAAxBA,EAA4CG,MAA5CH;QACD;;QAED,6BAAIQ,oBAAJ,kDAAIQ,sBAAsBF,MAA1B,EAAkC;UAChCN,oBAAoB,CAACM,MAArBN;QADF,OAEO;UACLR,QAAQ,CAACe,cAATf,CAAwB,kBAAxBA,EAA4CI,MAA5CJ;QACD;MAXH,OAYO;QAAA;;QACL,4BAAIS,mBAAJ,iDAAIQ,qBAAqBH,MAAzB,EAAiC;UAC/BL,mBAAmB,CAACK,MAApBL;QADF,OAEO;UACLT,QAAQ,CAACe,cAATf,CAAwB,iBAAxBA,EAA2CG,MAA3CH;QACD;;QAED,4BAAIU,mBAAJ,iDAAIQ,qBAAqBJ,MAAzB,EAAiC;UAC/BJ,mBAAmB,CAACI,MAApBJ;QADF,OAEO;UACLV,QAAQ,CAACe,cAATf,CAAwB,iBAAxBA,EAA2CI,MAA3CJ;QACD;MACF;IAzBH;EAdF,GAyCG,CAACI,MAAD,EAASD,MAAT,CAzCHJ;AA0CD","names":["React","Keyboard","Platform","useIsKeyboardShown","onShow","onHide","_ref","useEffect","willShowSubscription","willHideSubscription","didShowSubscription","didHideSubscription","OS","addListener","_willShowSubscription","remove","removeListener","_willHideSubscription","_didShowSubscription","_didHideSubscription"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/utils/useIsKeyboardShown.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Keyboard, NativeEventSubscription, Platform } from 'react-native';\n\ntype Props = {\n  onShow: () => void;\n  onHide: () => void;\n};\nexport default function useIsKeyboardShown({ onShow, onHide }: Props) {\n  React.useEffect(() => {\n    let willShowSubscription: NativeEventSubscription | undefined;\n    let willHideSubscription: NativeEventSubscription | undefined;\n    let didShowSubscription: NativeEventSubscription | undefined;\n    let didHideSubscription: NativeEventSubscription | undefined;\n\n    if (Platform.OS === 'ios') {\n      willShowSubscription = Keyboard.addListener('keyboardWillShow', onShow);\n      willHideSubscription = Keyboard.addListener('keyboardWillHide', onHide);\n    } else {\n      didShowSubscription = Keyboard.addListener('keyboardDidShow', onShow);\n      didHideSubscription = Keyboard.addListener('keyboardDidHide', onHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        if (willShowSubscription?.remove) {\n          willShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillShow', onShow);\n        }\n\n        if (willHideSubscription?.remove) {\n          willHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardWillHide', onHide);\n        }\n      } else {\n        if (didShowSubscription?.remove) {\n          didShowSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidShow', onShow);\n        }\n\n        if (didHideSubscription?.remove) {\n          didHideSubscription.remove();\n        } else {\n          Keyboard.removeListener('keyboardDidHide', onHide);\n        }\n      }\n    };\n  }, [onHide, onShow]);\n}\n"]},"metadata":{},"sourceType":"module"}