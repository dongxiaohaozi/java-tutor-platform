{"ast":null,"code":"import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\n\nconst RadioButtonItem = _ref => {\n  let {\n    value,\n    label,\n    style,\n    labelStyle,\n    onPress,\n    disabled,\n    color,\n    uncheckedColor,\n    status,\n    theme: {\n      colors\n    },\n    accessibilityLabel,\n    testID,\n    mode,\n    position = 'trailing'\n  } = _ref;\n  const radioButtonProps = {\n    value,\n    disabled,\n    status,\n    color,\n    uncheckedColor\n  };\n  const isLeading = position === 'leading';\n  let radioButton;\n\n  if (mode === 'android') {\n    radioButton = /*#__PURE__*/React.createElement(RadioButtonAndroid, radioButtonProps);\n  } else if (mode === 'ios') {\n    radioButton = /*#__PURE__*/React.createElement(RadioButtonIOS, radioButtonProps);\n  } else {\n    radioButton = /*#__PURE__*/React.createElement(RadioButton, radioButtonProps);\n  }\n\n  return /*#__PURE__*/React.createElement(RadioButtonContext.Consumer, null, context => {\n    return /*#__PURE__*/React.createElement(TouchableRipple, {\n      onPress: disabled ? undefined : () => handlePress({\n        onPress: onPress,\n        onValueChange: context === null || context === void 0 ? void 0 : context.onValueChange,\n        value\n      }),\n      accessibilityLabel: accessibilityLabel,\n      testID: testID\n    }, /*#__PURE__*/React.createElement(View, {\n      style: [styles.container, style],\n      pointerEvents: \"none\"\n    }, isLeading && radioButton, /*#__PURE__*/React.createElement(Text, {\n      style: [styles.label, {\n        color: colors.text,\n        textAlign: isLeading ? 'right' : 'left'\n      }, labelStyle]\n    }, label), !isLeading && radioButton));\n  });\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\nexport default withTheme(RadioButtonItem); // @component-docs ignore-next-line\n\nconst RadioButtonItemWithTheme = withTheme(RadioButtonItem); // @component-docs ignore-next-line\n\nexport { RadioButtonItemWithTheme as RadioButtonItem };\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","View","StyleSheet","withTheme","RadioButtonContext","handlePress","TouchableRipple","RadioButton","Text","RadioButtonAndroid","RadioButtonIOS","RadioButtonItem","_ref","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","colors","accessibilityLabel","testID","mode","position","radioButtonProps","isLeading","radioButton","Consumer","context","undefined","onValueChange","styles","container","pointerEvents","text","textAlign","displayName","RadioButtonItemWithTheme","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize","flexShrink","flexGrow"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/RadioButton/RadioButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport RadioButton from './RadioButton';\nimport Text from '../Typography/Text';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport RadioButtonIOS from './RadioButtonIOS';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n  /**\n   * Radio button control position.\n   */\n  position?: 'leading' | 'trailing';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme: { colors },\n  accessibilityLabel,\n  testID,\n  mode,\n  position = 'trailing',\n}: Props) => {\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  const isLeading = position === 'leading';\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        return (\n          <TouchableRipple\n            onPress={\n              disabled\n                ? undefined\n                : () =>\n                    handlePress({\n                      onPress: onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    })\n            }\n            accessibilityLabel={accessibilityLabel}\n            testID={testID}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              {isLeading && radioButton}\n              <Text\n                style={[\n                  styles.label,\n                  {\n                    color: colors.text,\n                    textAlign: isLeading ? 'right' : 'left',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n              {!isLeading && radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nconst RadioButtonItemWithTheme = withTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItemWithTheme as RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}