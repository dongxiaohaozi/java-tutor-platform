{"ast":null,"code":"import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = _ref => {\n  let {\n    style,\n    status,\n    label,\n    onPress,\n    labelStyle,\n    theme,\n    testID,\n    mode,\n    position = 'trailing',\n    disabled,\n    ...props\n  } = _ref;\n  const checkboxProps = { ...props,\n    status,\n    theme,\n    disabled\n  };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = /*#__PURE__*/React.createElement(CheckboxAndroid, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = /*#__PURE__*/React.createElement(CheckboxIOS, checkboxProps);\n  } else {\n    checkbox = /*#__PURE__*/React.createElement(Checkbox, checkboxProps);\n  }\n\n  return /*#__PURE__*/React.createElement(TouchableRipple, {\n    accessibilityLabel: label,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      checked: status === 'checked',\n      disabled\n    },\n    onPress: onPress,\n    testID: testID,\n    disabled: disabled\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\",\n    importantForAccessibility: \"no-hide-descendants\"\n  }, isLeading && checkbox, /*#__PURE__*/React.createElement(Text, {\n    style: [styles.label, {\n      color: disabled ? theme.colors.disabled : theme.colors.text,\n      textAlign: isLeading ? 'right' : 'left'\n    }, labelStyle]\n  }, label), !isLeading && checkbox));\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\nexport default withTheme(CheckboxItem); // @component-docs ignore-next-line\n\nconst CheckboxItemWithTheme = withTheme(CheckboxItem); // @component-docs ignore-next-line\n\nexport { CheckboxItemWithTheme as CheckboxItem };\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1\n  }\n});","map":{"version":3,"mappings":"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","names":["React","StyleSheet","View","Checkbox","CheckboxAndroid","CheckboxIOS","Text","TouchableRipple","withTheme","CheckboxItem","_ref","style","status","label","onPress","labelStyle","theme","testID","mode","position","disabled","props","checkboxProps","isLeading","checkbox","accessibilityLabel","accessibilityRole","accessibilityState","checked","styles","container","pointerEvents","importantForAccessibility","color","colors","text","textAlign","displayName","CheckboxItemWithTheme","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","fontSize","flexShrink","flexGrow"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/Checkbox/CheckboxItem.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  position = 'trailing',\n  disabled,\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme, disabled };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  return (\n    <TouchableRipple\n      accessibilityLabel={label}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{\n        checked: status === 'checked',\n        disabled,\n      }}\n      onPress={onPress}\n      testID={testID}\n      disabled={disabled}\n    >\n      <View\n        style={[styles.container, style]}\n        pointerEvents=\"none\"\n        importantForAccessibility=\"no-hide-descendants\"\n      >\n        {isLeading && checkbox}\n        <Text\n          style={[\n            styles.label,\n            {\n              color: disabled ? theme.colors.disabled : theme.colors.text,\n              textAlign: isLeading ? 'right' : 'left',\n            },\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}