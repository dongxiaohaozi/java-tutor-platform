{"ast":null,"code":"import * as React from 'react';\nimport { View, TextInput as NativeTextInput, StyleSheet, I18nManager, Platform } from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from './Adornment/TextInputAdornment';\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, ADORNMENT_OFFSET } from './constants';\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition } from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nconst TextInputOutlined = _ref => {\n  let {\n    disabled = false,\n    editable = true,\n    label,\n    error = false,\n    selectionColor,\n    underlineColor: _underlineColor,\n    outlineColor: customOutlineColor,\n    activeOutlineColor,\n    dense,\n    style,\n    theme,\n    render = props => /*#__PURE__*/React.createElement(NativeTextInput, props),\n    multiline = false,\n    parentState,\n    innerRef,\n    onFocus,\n    forceFocus,\n    onBlur,\n    onChangeText,\n    onLayoutAnimatedText,\n    onLeftAffixLayoutChange,\n    onRightAffixLayoutChange,\n    left,\n    right,\n    placeholderTextColor,\n    ...rest\n  } = _ref;\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right\n  });\n  const {\n    colors,\n    fonts\n  } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight,\n    height,\n    backgroundColor = colors.background,\n    textAlign,\n    ...viewStyle\n  } = StyleSheet.flatten(style) || {};\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    const isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n  const baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(_ref2 => {\n    let {\n      side,\n      type\n    } = _ref2;\n    return side === AdornmentSide.Left && type === AdornmentType.Icon;\n  });\n\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n\n  const minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  const topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  const pad = calculatePadding(paddingSettings);\n  const paddingOut = adjustPaddingOut({ ...paddingSettings,\n    pad\n  });\n  const baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  const placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor,\n    labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  const minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  const {\n    leftLayout,\n    rightLayout\n  } = parentState;\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  const rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig,\n    rightAffixWidth,\n    leftAffixWidth,\n    mode: 'outlined'\n  });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange\n  };\n  let adornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = { ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font,\n        fontSize,\n        fontWeight\n      },\n      visible: parentState.labeled\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(View, {\n    style: viewStyle\n  }, /*#__PURE__*/React.createElement(Outline, {\n    theme: theme,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), /*#__PURE__*/React.createElement(View, null, /*#__PURE__*/React.createElement(View, {\n    style: [styles.labelContainer, {\n      paddingTop: LABEL_PADDING_TOP,\n      minHeight\n    }]\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    parentState: parentState,\n    labelProps: labelProps,\n    labelBackground: LabelBackground,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  }), render === null || render === void 0 ? void 0 : render({\n    testID: 'text-input-outlined',\n    ...rest,\n    ref: innerRef,\n    onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus,\n    onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, { ...font,\n      fontSize,\n      fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n    }, Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  })), /*#__PURE__*/React.createElement(TextInputAdornment, adornmentProps)));\n};\n\nexport default TextInputOutlined;\n\nconst Outline = _ref3 => {\n  let {\n    theme,\n    hasActiveOutline,\n    activeColor,\n    outlineColor,\n    focused,\n    backgroundColor\n  } = _ref3;\n  return /*#__PURE__*/React.createElement(View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, // eslint-disable-next-line react-native/no-inline-styles\n    {\n      backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: focused ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"mappings":"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","names":["React","View","TextInput","NativeTextInput","StyleSheet","I18nManager","Platform","color","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","InputLabel","LabelBackground","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","LABEL_WIGGLE_X_OFFSET","ADORNMENT_SIZE","ADORNMENT_OFFSET","calculateLabelTopPosition","calculateInputHeight","calculatePadding","adjustPaddingOut","interpolatePlaceholder","calculateOutlinedIconAndAffixTopPosition","AdornmentType","AdornmentSide","OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","_ref","disabled","editable","label","error","selectionColor","underlineColor","_underlineColor","outlineColor","customOutlineColor","activeOutlineColor","dense","style","theme","render","props","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","adornmentConfig","colors","fonts","font","regular","hasActiveOutline","focused","fontSize","fontSizeStyle","fontWeight","lineHeight","height","backgroundColor","background","textAlign","viewStyle","flatten","inputTextColor","activeColor","placeholderColor","errorColor","isTransparent","alpha","text","rgb","string","primary","placeholder","labelScale","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","_ref2","side","type","Left","Icon","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","roundness","maxFontSizeMultiplier","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","Outline","labelContainer","paddingTop","labelBackground","testID","ref","underlineColorAndroid","input","textAlignVertical","outline","_ref3","pointerEvents","borderRadius","borderWidth","borderColor","create","position","paddingHorizontal","top","bottom","paddingBottom","flexGrow","margin","zIndex"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/TextInput/TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight,\n    height,\n    backgroundColor = colors.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    const isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        theme={theme}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID: 'text-input-outlined',\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  focused,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: focused ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}