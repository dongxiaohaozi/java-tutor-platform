{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst Button = _ref => {\n  var _StyleSheet$flatten;\n\n  let {\n    disabled,\n    compact,\n    mode = 'text',\n    dark,\n    loading,\n    icon,\n    color: buttonColor,\n    children,\n    uppercase = true,\n    accessibilityLabel,\n    accessibilityHint,\n    onPress,\n    onLongPress,\n    style,\n    theme,\n    contentStyle,\n    labelStyle,\n    testID,\n    accessible,\n    ...rest\n  } = _ref;\n  const {\n    current: elevation\n  } = React.useRef(new Animated.Value(disabled || mode !== 'contained' ? 0 : 2));\n  React.useEffect(() => {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const {\n        scale\n      } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const {\n        scale\n      } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true\n      }).start();\n    }\n  };\n\n  const {\n    colors,\n    roundness\n  } = theme;\n  const font = theme.fonts.medium;\n  let backgroundColor, borderColor, textColor, borderWidth;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black).alpha(0.12).rgb().string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black).alpha(0.29).rgb().string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark = backgroundColor === 'transparent' ? false : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness\n  };\n  const touchableStyle = {\n    borderRadius: style ? (StyleSheet.flatten(style) || {}).borderRadius || roundness : roundness\n  };\n  const {\n    color: customLabelColor,\n    fontSize: customLabelSize\n  } = StyleSheet.flatten(labelStyle) || {};\n  const textStyle = {\n    color: textColor,\n    ...font\n  };\n  const iconStyle = ((_StyleSheet$flatten = StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? styles.iconReverse : styles.icon;\n  return /*#__PURE__*/React.createElement(Surface, _extends({}, rest, {\n    style: [styles.button, compact && styles.compact, {\n      elevation\n    }, buttonStyle, style]\n  }), /*#__PURE__*/React.createElement(TouchableRipple, {\n    borderless: true,\n    delayPressIn: 0,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    onPressIn: handlePressIn,\n    onPressOut: handlePressOut,\n    accessibilityLabel: accessibilityLabel,\n    accessibilityHint: accessibilityHint // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n    ,\n    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      disabled\n    },\n    accessible: accessible,\n    disabled: disabled,\n    rippleColor: rippleColor,\n    style: touchableStyle,\n    testID: testID\n  }, /*#__PURE__*/React.createElement(View, {\n    style: [styles.content, contentStyle]\n  }, icon && loading !== true ? /*#__PURE__*/React.createElement(View, {\n    style: iconStyle\n  }, /*#__PURE__*/React.createElement(Icon, {\n    source: icon,\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor\n  })) : null, loading ? /*#__PURE__*/React.createElement(ActivityIndicator, {\n    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,\n    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,\n    style: iconStyle\n  }) : null, /*#__PURE__*/React.createElement(Text, {\n    selectable: false,\n    numberOfLines: 1,\n    style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]\n  }, children))));\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid'\n  },\n  compact: {\n    minWidth: 'auto'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16\n  },\n  compactLabel: {\n    marginHorizontal: 8\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase'\n  }\n});\nexport default withTheme(Button);","map":{"version":3,"mappings":"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","names":["React","Animated","View","StyleSheet","color","ActivityIndicator","Icon","Surface","Text","TouchableRipple","black","white","withTheme","Button","_ref","disabled","compact","mode","dark","loading","icon","buttonColor","children","uppercase","accessibilityLabel","accessibilityHint","onPress","onLongPress","style","theme","contentStyle","labelStyle","testID","accessible","rest","current","elevation","useRef","Value","useEffect","setValue","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","colors","roundness","font","fonts","medium","backgroundColor","borderColor","textColor","borderWidth","alpha","rgb","string","primary","hairlineWidth","isDark","isLight","rippleColor","buttonStyle","borderRadius","touchableStyle","flatten","customLabelColor","fontSize","customLabelSize","textStyle","iconStyle","flexDirection","styles","iconReverse","button","borderless","delayPressIn","onPressIn","onPressOut","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","content","source","size","selectable","numberOfLines","label","compactLabel","uppercaseLabel","create","minWidth","borderStyle","alignItems","justifyContent","marginLeft","marginRight","textAlign","letterSpacing","marginVertical","marginHorizontal","textTransform"],"sources":["/Users/kuidou/Documents/CS/5098/demo-a-java-tutor copy/frontend/node_modules/react-native-paper/lib/module/components/Button.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport ActivityIndicator from './ActivityIndicator';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the button. You can change the mode to adjust the styling to give it desired emphasis.\n   * - `text` - flat button without background or outline (low emphasis)\n   * - `outlined` - button with an outline (medium emphasis)\n   * - `contained` - button with a background color and elevation shadow (high emphasis)\n   */\n  mode?: 'text' | 'outlined' | 'contained';\n  /**\n   * Whether the color is a dark color. A dark button will render light text and vice-versa. Only applicable for `contained` mode.\n   */\n  dark?: boolean;\n  /**\n   * Use a compact look, useful for `text` buttons in a row.\n   */\n  compact?: boolean;\n  /**\n   * Custom text color for flat button, or background color for contained button.\n   */\n  color?: string;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Icon to display for the `Button`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Label text of the button.\n   */\n  children: React.ReactNode;\n  /**\n   * Make the label text uppercased. Note that this won't work if you pass React elements as children.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility hint for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityHint?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Style of button's inner content.\n   * Use this prop to apply custom height and width and to set the icon on the right with `flexDirection: 'row-reverse'`.\n   */\n  contentStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style for the button text.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * A button is component that the user can press to trigger an action.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/button-1.png\" />\n *     <figcaption>Text button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-2.png\" />\n *     <figcaption>Outlined button</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/button-3.png\" />\n *     <figcaption>Contained button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Button } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Button icon=\"camera\" mode=\"contained\" onPress={() => console.log('Pressed')}>\n *     Press me\n *   </Button>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Button = ({\n  disabled,\n  compact,\n  mode = 'text',\n  dark,\n  loading,\n  icon,\n  color: buttonColor,\n  children,\n  uppercase = true,\n  accessibilityLabel,\n  accessibilityHint,\n  onPress,\n  onLongPress,\n  style,\n  theme,\n  contentStyle,\n  labelStyle,\n  testID,\n  accessible,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(disabled || mode !== 'contained' ? 0 : 2)\n  );\n  React.useEffect(() => {\n    elevation.setValue(disabled || mode !== 'contained' ? 0 : 2);\n  }, [mode, elevation, disabled]);\n\n  const handlePressIn = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 8,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const handlePressOut = () => {\n    if (mode === 'contained') {\n      const { scale } = theme.animation;\n      Animated.timing(elevation, {\n        toValue: 2,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  const { colors, roundness } = theme;\n  const font = theme.fonts.medium;\n\n  let backgroundColor: string,\n    borderColor: string,\n    textColor: string,\n    borderWidth: number;\n\n  if (mode === 'contained') {\n    if (disabled) {\n      backgroundColor = color(theme.dark ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n    } else if (buttonColor) {\n      backgroundColor = buttonColor;\n    } else {\n      backgroundColor = colors.primary;\n    }\n  } else {\n    backgroundColor = 'transparent';\n  }\n\n  if (mode === 'outlined') {\n    borderColor = color(theme.dark ? white : black)\n      .alpha(0.29)\n      .rgb()\n      .string();\n    borderWidth = StyleSheet.hairlineWidth;\n  } else {\n    borderColor = 'transparent';\n    borderWidth = 0;\n  }\n\n  if (disabled) {\n    textColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else if (mode === 'contained') {\n    let isDark;\n\n    if (typeof dark === 'boolean') {\n      isDark = dark;\n    } else {\n      isDark =\n        backgroundColor === 'transparent'\n          ? false\n          : !color(backgroundColor).isLight();\n    }\n\n    textColor = isDark ? white : black;\n  } else if (buttonColor) {\n    textColor = buttonColor;\n  } else {\n    textColor = colors.primary;\n  }\n\n  const rippleColor = color(textColor).alpha(0.32).rgb().string();\n  const buttonStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius: roundness,\n  };\n  const touchableStyle = {\n    borderRadius: style\n      ? ((StyleSheet.flatten(style) || {}) as ViewStyle).borderRadius ||\n        roundness\n      : roundness,\n  };\n\n  const { color: customLabelColor, fontSize: customLabelSize } =\n    StyleSheet.flatten(labelStyle) || {};\n\n  const textStyle = { color: textColor, ...font };\n  const iconStyle =\n    StyleSheet.flatten(contentStyle)?.flexDirection === 'row-reverse'\n      ? styles.iconReverse\n      : styles.icon;\n\n  return (\n    <Surface\n      {...rest}\n      style={[\n        styles.button,\n        compact && styles.compact,\n        { elevation },\n        buttonStyle,\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityHint={accessibilityHint}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ disabled }}\n        accessible={accessible}\n        disabled={disabled}\n        rippleColor={rippleColor}\n        style={touchableStyle}\n        testID={testID}\n      >\n        <View style={[styles.content, contentStyle]}>\n          {icon && loading !== true ? (\n            <View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={customLabelSize ?? 16}\n                color={\n                  typeof customLabelColor === 'string'\n                    ? customLabelColor\n                    : textColor\n                }\n              />\n            </View>\n          ) : null}\n          {loading ? (\n            <ActivityIndicator\n              size={customLabelSize ?? 16}\n              color={\n                typeof customLabelColor === 'string'\n                  ? customLabelColor\n                  : textColor\n              }\n              style={iconStyle}\n            />\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.label,\n              compact && styles.compactLabel,\n              uppercase && styles.uppercaseLabel,\n              textStyle,\n              font,\n              labelStyle,\n            ]}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    minWidth: 64,\n    borderStyle: 'solid',\n  },\n  compact: {\n    minWidth: 'auto',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  icon: {\n    marginLeft: 12,\n    marginRight: -4,\n  },\n  iconReverse: {\n    marginRight: 12,\n    marginLeft: -4,\n  },\n  label: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    marginVertical: 9,\n    marginHorizontal: 16,\n  },\n  compactLabel: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n});\n\nexport default withTheme(Button);\n"]},"metadata":{},"sourceType":"module"}